entrypoints Rels, Rel ;

-- the same as RelAlgebra, but with SQL-like keywords except for symbols

RRels. Rels ::= [Rel] ;

terminator Rel "" ;

RTable.           Rel3 ::= Ident ;
RSelect.          Rel2 ::= "FILTER" "[" Cond "]" Rel2 ;
RProject.         Rel2 ::= "PROJECT" "[" [Projection] "]" Rel2 ;
RRename.          Rel2 ::= "RENAME" "[" Renaming "]" Rel2 ;
RGroup.           Rel2 ::= "GROUP" "[" [Ident] "," [Aggregation] "]" Rel2 ;
RSort.            Rel2 ::= "ORDER" "[" [SortExp] "]" Rel2 ;
RDistinct.        Rel2 ::= "DISTINCT" Rel2 ;
RUnion.           Rel1 ::= Rel1 "UNION" Rel2 ;
RCartesian.       Rel1 ::= Rel1 "," Rel2 ;
RExcept.          Rel1 ::= Rel1 "EXCEPT" Rel2 ;
RIntersect.       Rel1 ::= Rel1 "INTERSECT" Rel2 ;
RNaturalJoin.     Rel1 ::= Rel1 "NATURAL" "JOIN" Rel2 ;
RThetaJoin.       Rel1 ::= Rel1 "JOIN" "[" Cond "]" Rel2 ;
RInnerJoin.       Rel1 ::= Rel1 "INNER" "JOIN" "[" [Ident] "]" Rel2 ;
RFullOuterJoin.   Rel1 ::= Rel1 "FULL" "OUTER" "JOIN" "[" [Ident] "]" Rel2 ;
RLeftOuterJoin.   Rel1 ::= Rel1 "LEFT" "OUTER" "JOIN" "[" [Ident] "]" Rel2 ;
RRightOuterJoin.  Rel1 ::= Rel1 "RIGHT" "OUTER" "JOIN" "[" [Ident] "]" Rel2 ;
RLet.             Rel  ::= "LET" Ident "=" Rel1 "IN" Rel ;

coercions Rel 3 ;

CEq.        Cond2 ::= Exp "=" Exp ;
CNEq.       Cond2 ::= Exp "<>" Exp ;
CLt.        Cond2 ::= Exp "<" Exp ;
CGt.        Cond2 ::= Exp ">" Exp ;
CLeq.       Cond2 ::= Exp "<=" Exp ;
CGeq.       Cond2 ::= Exp ">=" Exp ;
CLike.      Cond2 ::= Exp "LIKE" Exp ;
CNot.       Cond2 ::= "NOT" Cond3 ;
CAnd.       Cond1 ::= Cond1 "AND" Cond2 ;
COr.        Cond1 ::= Cond1 "OR" Cond2 ;

coercions Cond 3 ;

EIdent.     Exp3  ::= Ident ;
EQIdent.    Exp3  ::= Ident "." Ident ;
EString.    Exp3  ::= String ;
EInt.       Exp3  ::= Integer ;
EFloat.     Exp3  ::= Double ;
EAggr.      Exp3  ::= Function "(" Distinct Ident ")" ;
EMul.       Exp2  ::= Exp2 "*" Exp3 ;
EDiv.       Exp2  ::= Exp2 "/" Exp3 ;
ERem.       Exp2  ::= Exp2 "%" Exp3 ;
EAdd.       Exp1  ::= Exp1 "+" Exp2 ;
ESub.       Exp1  ::= Exp1 "-" Exp2 ;

coercions Exp 3 ;

separator nonempty Exp "," ;

PExp.        Projection  ::= Exp ;
PRename.     Projection  ::= Exp "AS" Ident ;

separator nonempty Projection "," ;

RRelation.   Renaming    ::= Ident ;
RAttributes. Renaming    ::= Ident "(" [Ident] ")" ;

AApp.        Aggregation ::= Function "(" Distinct Ident ")" ;
ARename.     Aggregation ::= Function "(" Distinct Ident ")" "AS" Exp ;

separator Aggregation "," ;

FAvg.   Function ::= "AVG" ;
FSum.   Function ::= "SUM" ;
FMax.   Function ::= "MAX" ;
FMin.   Function ::= "MIN" ;
FCount. Function ::= "COUNT" ;

DNone.     Distinct ::= ;
DDistinct. Distinct ::= "DISTINCT" ; -- used in aggregation

SEAsc.  SortExp  ::= Exp ;
SEAsc.  SortExp  ::= Exp "ASC" ;
SEDesc. SortExp  ::= Exp "DESC" ;

separator nonempty SortExp "," ;

separator Ident "," ;

comment "--" ;
