{-# LANGUAGE GADTs, TypeSynonymInstances, FlexibleInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintRelAlgebra where

-- pretty-printer generated by the BNF converter

import AbsRelAlgebra
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])


instance Print Rels where
  prt i e = case e of
    RRels rels -> prPrec i 0 (concatD [prt 0 rels])

instance Print Rel where
  prt i e = case e of
    RTable id -> prPrec i 3 (concatD [prt 0 id])
    RSelect cond rel -> prPrec i 2 (concatD [doc (showString "\\sigma_{"), prt 0 cond, doc (showString "}"), prt 2 rel])
    RProject projections rel -> prPrec i 2 (concatD [doc (showString "\\pi_{"), prt 0 projections, doc (showString "}"), prt 2 rel])
    RRename renaming rel -> prPrec i 2 (concatD [doc (showString "\\rho_{"), prt 0 renaming, doc (showString "}"), prt 2 rel])
    RGroup ids aggregations rel -> prPrec i 2 (concatD [doc (showString "\\gamma_{"), prt 0 ids, doc (showString ","), prt 0 aggregations, doc (showString "}"), prt 2 rel])
    RSort sortexps rel -> prPrec i 2 (concatD [doc (showString "\\tau_{"), prt 0 sortexps, doc (showString "}"), prt 2 rel])
    RDistinct rel -> prPrec i 2 (concatD [doc (showString "\\delta"), prt 2 rel])
    RUnion rel1 rel2 -> prPrec i 1 (concatD [prt 1 rel1, doc (showString "\\cup"), prt 2 rel2])
    RIntersect rel1 rel2 -> prPrec i 1 (concatD [prt 1 rel1, doc (showString "\\cap"), prt 2 rel2])
    RCartesian rel1 rel2 -> prPrec i 1 (concatD [prt 1 rel1, doc (showString "\\times"), prt 2 rel2])
    RExcept rel1 rel2 -> prPrec i 1 (concatD [prt 1 rel1, doc (showString "\\backslash"), prt 2 rel2])
    RNaturalJoin rel1 rel2 -> prPrec i 1 (concatD [prt 1 rel1, doc (showString "\\bowtie"), prt 2 rel2])
    RThetaJoin rel1 cond rel2 -> prPrec i 1 (concatD [prt 1 rel1, doc (showString "\\bowtie_{"), prt 0 cond, doc (showString "}"), prt 2 rel2])
    RInnerJoin rel1 ids rel2 -> prPrec i 1 (concatD [prt 1 rel1, doc (showString "\\bowtie_{"), prt 0 ids, doc (showString "}"), prt 2 rel2])
    RFullOuterJoin rel1 ids rel2 -> prPrec i 1 (concatD [prt 1 rel1, doc (showString "\\bowtie^{o}_{"), prt 0 ids, doc (showString "}"), prt 2 rel2])
    RLeftOuterJoin rel1 ids rel2 -> prPrec i 1 (concatD [prt 1 rel1, doc (showString "\\bowtie^{oL}_{"), prt 0 ids, doc (showString "}"), prt 2 rel2])
    RRightOuterJoin rel1 ids rel2 -> prPrec i 1 (concatD [prt 1 rel1, doc (showString "\\bowtie^{oR}_{"), prt 0 ids, doc (showString "}"), prt 2 rel2])
    RLet id rel1 rel2 -> prPrec i 0 (concatD [doc (showString "\\mbox{\\textbf{let}}"), prt 0 id, doc (showString "="), prt 1 rel1, doc (showString "\\mbox{\\textbf{\\;in\\;}}"), prt 0 rel2])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Cond where
  prt i e = case e of
    CEq exp1 exp2 -> prPrec i 2 (concatD [prt 0 exp1, doc (showString "="), prt 0 exp2])
    CNEq exp1 exp2 -> prPrec i 2 (concatD [prt 0 exp1, doc (showString "<>"), prt 0 exp2])
    CLt exp1 exp2 -> prPrec i 2 (concatD [prt 0 exp1, doc (showString "<"), prt 0 exp2])
    CGt exp1 exp2 -> prPrec i 2 (concatD [prt 0 exp1, doc (showString ">"), prt 0 exp2])
    CLeq exp1 exp2 -> prPrec i 2 (concatD [prt 0 exp1, doc (showString "<="), prt 0 exp2])
    CGeq exp1 exp2 -> prPrec i 2 (concatD [prt 0 exp1, doc (showString ">="), prt 0 exp2])
    CLike exp1 exp2 -> prPrec i 2 (concatD [prt 0 exp1, doc (showString "LIKE"), prt 0 exp2])
    CNot cond -> prPrec i 2 (concatD [doc (showString "NOT"), prt 3 cond])
    CAnd cond1 cond2 -> prPrec i 1 (concatD [prt 1 cond1, doc (showString "AND"), prt 2 cond2])
    COr cond1 cond2 -> prPrec i 1 (concatD [prt 1 cond1, doc (showString "OR"), prt 2 cond2])

instance Print Exp where
  prt i e = case e of
    EIdent id -> prPrec i 3 (concatD [prt 0 id])
    EQIdent id1 id2 -> prPrec i 3 (concatD [prt 0 id1, doc (showString "."), prt 0 id2])
    EString str -> prPrec i 3 (concatD [prt 0 str])
    EInt n -> prPrec i 3 (concatD [prt 0 n])
    EFloat d -> prPrec i 3 (concatD [prt 0 d])
    EAggr function distinct id -> prPrec i 3 (concatD [prt 0 function, doc (showString "("), prt 0 distinct, prt 0 id, doc (showString ")")])
    EMul exp1 exp2 -> prPrec i 2 (concatD [prt 2 exp1, doc (showString "*"), prt 3 exp2])
    EDiv exp1 exp2 -> prPrec i 2 (concatD [prt 2 exp1, doc (showString "/"), prt 3 exp2])
    ERem exp1 exp2 -> prPrec i 2 (concatD [prt 2 exp1, doc (showString "%"), prt 3 exp2])
    EAdd exp1 exp2 -> prPrec i 1 (concatD [prt 1 exp1, doc (showString "+"), prt 2 exp2])
    ESub exp1 exp2 -> prPrec i 1 (concatD [prt 1 exp1, doc (showString "-"), prt 2 exp2])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Projection where
  prt i e = case e of
    PExp exp -> prPrec i 0 (concatD [prt 0 exp])
    PRename exp id -> prPrec i 0 (concatD [prt 0 exp, doc (showString "\\rightarrow"), prt 0 id])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Renaming where
  prt i e = case e of
    RRelation id -> prPrec i 0 (concatD [prt 0 id])
    RAttributes id ids -> prPrec i 0 (concatD [prt 0 id, doc (showString "("), prt 0 ids, doc (showString ")")])

instance Print Aggregation where
  prt i e = case e of
    AApp function distinct id -> prPrec i 0 (concatD [prt 0 function, doc (showString "("), prt 0 distinct, prt 0 id, doc (showString ")")])
    ARename function distinct id exp -> prPrec i 0 (concatD [prt 0 function, doc (showString "("), prt 0 distinct, prt 0 id, doc (showString ")"), doc (showString "\\rightarrow"), prt 0 exp])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Function where
  prt i e = case e of
    FAvg -> prPrec i 0 (concatD [doc (showString "AVG")])
    FSum -> prPrec i 0 (concatD [doc (showString "SUM")])
    FMax -> prPrec i 0 (concatD [doc (showString "MAX")])
    FMin -> prPrec i 0 (concatD [doc (showString "MIN")])
    FCount -> prPrec i 0 (concatD [doc (showString "COUNT")])

instance Print Distinct where
  prt i e = case e of
    DNone -> prPrec i 0 (concatD [])
    DDistinct -> prPrec i 0 (concatD [doc (showString "\\delta")])

instance Print SortExp where
  prt i e = case e of
    SEAsc exp -> prPrec i 0 (concatD [prt 0 exp])
    SEDesc exp -> prPrec i 0 (concatD [prt 0 exp, doc (showString "\\downarrow")])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])

