-- original source: http://www.w3schools.com/sql/

SStm. Script ::= [Statement] ;

terminator Statement ";" ;

SCreateDatabase.  Statement ::= "CREATE" "DATABASE" Ident ;
SCreateTable.     Statement ::= "CREATE" "TABLE" Ident "(" [Typing] ")" ;
SDropTable.       Statement ::= "DROP" "TABLE" Ident "(" [Typing] ")" ;
SInsert.          Statement ::= "INSERT" "INTO" Ident TablePlaces InsertValues ;
SDelete.          Statement ::= "DELETE" "FROM" Ident Where ;
SUpdate.          Statement ::= "UPDATE" Ident "SET" [Setting] Where ;
SCreateView.      Statement ::= "CREATE" "VIEW" Ident "AS" Query ;
SAlterTable.      Statement ::= "ALTER" "TABLE" Ident [Alteration] ;
SCreateAssertion. Statement ::= "CREATE" "ASSERTION" Ident "CHECK" "(" Condition ")" ;
SCreateTrigger.   Statement ::= "CREATE" "TRIGGER" Ident TriggerTime [TriggerAction] "ON" Ident "FOR" "EACH" TriggerEach TriggerBody ;
SQuery.           Statement ::= Query ;

QSelect.          Query2    ::= "SELECT" Distinct Columns "FROM" [Table] Where Group Having Order ;
QSetOperation.    Query1    ::= Query1 SetOperation All Query2 ;
QWith.            Query     ::= "WITH" [Definition] Query ;

coercions Query 2 ;

TName.            Table1    ::= Ident ;
TTableAs.         Table1    ::= Table1 "AS" Ident ;
TTableAs.         Table1    ::= Table1 Ident ;
TQuery.           Table1    ::= "(" Query ")" "AS" Ident ;
TQuery.           Table1    ::= "(" Query ")" Ident ;
TJoin.            Table     ::= Table JoinType "JOIN" Table1 JoinOn ;
TNaturalJoin.     Table     ::= Table "NATURAL" JoinType "JOIN" Table1 ;

coercions Table 1 ;

separator nonempty Table "," ;

CCAll.     Columns ::= "*" ;
CCExps.    Columns ::= [Column] ;

CExp.      Column  ::= Exp ;
CExpAs.    Column  ::= Exp "AS" Ident ;

separator nonempty Column "," ;

separator nonempty Ident "," ;   -- used in insert column names

WNone.      Where ::= ;
WCondition. Where ::= "WHERE" Condition ;

COper.      Condition3 ::= Exp Oper Compared ;
CNot.       Condition2 ::= "NOT" Condition3 ;
CExists.    Condition2 ::= Not "EXISTS" "(" Query ")" ;
CIsNull.    Condition2 ::= Exp "IS" Not "NULL" ;
CBetween.   Condition2 ::= Exp Not "BETWEEN" Exp "AND" Exp ;
CIn.        Condition2 ::= Exp Not "IN" Values ;
CAnd.       Condition1 ::= Condition1 "AND" Condition2 ;
COr.        Condition  ::= Condition  "OR"  Condition1 ;

coercions Condition 3 ;

NNot.       Not ::= "NOT" ; 
NNone.      Not ::= ;

ComExp.     Compared ::= Exp ;
ComAny.     Compared ::= "ANY" Values ;
ComAll.     Compared ::= "ALL" Values ;

EName.      Exp4 ::= Ident ;
EQual.      Exp4 ::= Ident "." Ident ;
EInt.       Exp4 ::= Integer ;
EFloat.     Exp4 ::= Double ;
EStr.       Exp4 ::= Str ;      -- single quotes
EString.    Exp4 ::= String ;   -- double quotes
ENull.      Exp4 ::= "NULL" ;
EDefault.   Exp4 ::= "DEFAULT" ;
EQuery.     Exp4 ::= "(" Query2 ")" ;
EAggr.      Exp4 ::= AggrOper "(" Distinct Exp ")" ;
EAggrAll.   Exp4 ::= AggrOper "(" Distinct "*" ")" ;
EMul.       Exp2 ::= Exp2 "*" Exp3 ;
EDiv.       Exp2 ::= Exp2 "/" Exp3 ;
ERem.       Exp2 ::= Exp2 "%" Exp3 ;
EAdd.       Exp1 ::= Exp1 "+" Exp2 ;
ESub.       Exp1 ::= Exp1 "-" Exp2 ;

coercions Exp 4 ;

separator nonempty Exp "," ; 

SOUnion.     SetOperation ::= "UNION" ;
SOIntersect. SetOperation ::= "INTERSECT" ;
SOExcept.    SetOperation ::= "EXCEPT" ;

ANone.       All ::= ;
AAll.        All ::= "ALL" ;

JOCondition. JoinOn   ::= "ON" Condition ;
JOUsing.     JoinOn   ::= "USING" "(" [Ident] ")" ;

JTLeft.      JoinType ::= "LEFT"  Outer ;
JTRight.     JoinType ::= "RIGHT" Outer ;
JTFull.      JoinType ::= "FULL"  Outer ;
JTInner.     JoinType ::= "INNER" ;
JTInner.     JoinType ::= ;

OutOuter.    Outer ::= "OUTER" ;
OutNone.     Outer ::= ;

---terminator nonempty Alias "" ;

DNone.      Distinct ::= ;
DDistinct.  Distinct ::= "DISTINCT" ;

GNone.      Group ::= ;
GGroupBy.   Group ::= "GROUP" "BY" [Exp] ; ---- just attributes?

HNone.      Having ::= ;
HCondition. Having ::= "HAVING" Condition ;

ONone.      Order ::= ;
OOrderBy.   Order ::= "ORDER" "BY" [AttributeOrder] ;

AOAsc.      AttributeOrder ::= Exp4 ;  ---- just attribute?
AOAsc.      AttributeOrder ::= Exp4 "ASC" ;
AODesc.     AttributeOrder ::= Exp4 "DESC" ;

separator nonempty AttributeOrder "," ;

SVal.  Setting ::= Ident "=" Exp ;

separator nonempty Setting "," ;

AOMax.   AggrOper ::= "MAX" ;
AOMin.   AggrOper ::= "MIN" ;
AOAvg.   AggrOper ::= "AVG" ;
AOCount. AggrOper ::= "COUNT" ;
AOSum.   AggrOper ::= "SUM" ;

OEq.   Oper ::= "=" ;
ONeq.  Oper ::= "<>" ;
OGt.   Oper ::= ">" ;
OLt.   Oper ::= "<" ;
OGeq.  Oper ::= ">=" ;
OLeq.  Oper ::= "<=" ;
OLike. Oper ::= Not "LIKE" ;

TColumn.          Typing ::= Ident Type [InlineConstraint] ;
TConstraint.      Typing ::= Constraint ;
TNamedConstraint. Typing ::= "CONSTRAINT" Ident Constraint ;

separator nonempty Typing "," ;

ICPrimaryKey. InlineConstraint ::= "PRIMARY" "KEY" ;
ICReferences. InlineConstraint ::= "REFERENCES" Ident "(" Ident ")" [Policy] ;
ICUnique.     InlineConstraint ::= "UNIQUE" ;
ICNotNull.    InlineConstraint ::= "NOT" "NULL" ;
ICCheck.      InlineConstraint ::= "CHECK" "(" Condition ")" ;
ICDefault.    InlineConstraint ::= "DEFAULT" Exp4 ;

terminator InlineConstraint "" ;

CPrimaryKey. Constraint ::= "PRIMARY" "KEY" "(" [Ident] ")" ;
CReferences. Constraint ::= "FOREIGN" "KEY" "(" [Ident] ")" "REFERENCES" Ident "(" [Ident] ")" [Policy] ;
CUnique.     Constraint ::= "UNIQUE" "(" [Ident] ")" ;
CNotNull.    Constraint ::= "NOT" "NULL" ;
CCheck.      Constraint ::= "CHECK" "(" Condition ")" ;

TIdent.      Type ::= Ident ;
TSized.      Type ::= Ident "(" Integer ")" ;

terminator Policy "" ;

PDelete.      Policy ::= "ON" "DELETE" Action ;
PUpdate.      Policy ::= "ON" "UPDATE" Action ;

ACascade.     Action ::= "CASCADE" ;
ASetNull.     Action ::= "SET" "NULL" ;

TPNone.       TablePlaces ::= ;
TPAttributes. TablePlaces ::= "(" [Ident] ")" ;

VValues.      Values ::= "(" [Exp] ")" ;
VQuery.       Values ::= "(" Query ")" ;

IVValues.     InsertValues ::= "VALUES" "(" [Exp] ")" ;
IVQuery.      InsertValues ::= "(" Query ")" ;

DTable. Definition ::= Ident "AS" "(" Query ")" ;

separator nonempty Definition "," ;

AAdd.             Alteration ::= "ADD" Typing ;
ADrop.            Alteration ::= "DROP" "COLUMN" Ident ;
AAlter.           Alteration ::= "MODIFY" "COLUMN" Ident Type ;
AAlter.           Alteration ::= "MODIFY" Ident Type ;
AAlter.           Alteration ::= "ALTER" "COLUMN" Ident Type ;
ADropPrimaryKey.  Alteration ::= "DROP" "PRIMARY" "KEY" ;
ADropConstraint.  Alteration ::= "DROP" "CONSTRAINT" Ident ;

separator nonempty Alteration "," ;

TTBefore.  TriggerTime ::= "BEFORE" ;
TTAfter.   TriggerTime ::= "AFTER" ;
TTInstead. TriggerTime ::= "INSTEAD" "OF" ;

TAUpdate.  TriggerAction ::= "UPDATE" ;
TAInsert.  TriggerAction ::= "INSERT" ;
TADelete.  TriggerAction ::= "DELETE" ;

separator nonempty TriggerAction "OR" ;

TERow.       TriggerEach ::= "ROW" ;
TEStatement. TriggerEach ::= "STATEMENT" ;

TBStatements. TriggerBody ::= "BEGIN" [TriggerStatement] "END" ;
TBProcedure.  TriggerBody ::= "EXECUTE" "PROCEDURE" Ident ;

TSStatement.  TriggerStatement ::= Statement ;
TSIfThen.     TriggerStatement ::= "IF" "(" Condition ")" "THEN" [TriggerStatement] [TriggerElse] "END" "IF" ;
TSException.  TriggerStatement ::= "RAISE" "EXCEPTION" Str ;

terminator TriggerStatement ";" ;

TEElseIf.     TriggerElse ::= "ELSE" "IF" "(" Condition ")" "THEN" [TriggerStatement] ;

terminator TriggerElse ";" ;

token Str '\'' (char-('\''))+ '\'' ;

comment "--" ;
comment "/*" "*/" ;

