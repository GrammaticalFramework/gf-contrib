

module AbsMinSQL where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq,Ord,Show,Read)
newtype Str = Str String deriving (Eq,Ord,Show,Read)
data Script =
   SStm [Statement]
  deriving (Eq,Ord,Show,Read)

data Statement =
   SCreateDatabase Ident
 | SCreateTable Ident [Typing]
 | SDropTable Ident [Typing]
 | SInsert Ident TablePlaces InsertValues
 | SDelete Ident Where
 | SUpdate Ident [Setting] Where
 | SCreateView Ident Query
 | SAlterTable Ident [Alteration]
 | SCreateAssertion Ident Condition
 | SCreateTrigger Ident TriggerTime [TriggerAction] Ident TriggerEach TriggerBody
 | SQuery Query
  deriving (Eq,Ord,Show,Read)

data Query =
   QSelect Distinct Columns [Table] Where Group Having Order
 | QSetOperation Query SetOperation All Query
 | QWith [Definition] Query
  deriving (Eq,Ord,Show,Read)

data Table =
   TName Ident
 | TTableAs Table Ident
 | TQuery Query Ident
 | TJoin Table JoinType Table JoinOn
 | TNaturalJoin Table JoinType Table
  deriving (Eq,Ord,Show,Read)

data Columns =
   CCAll
 | CCExps [Column]
  deriving (Eq,Ord,Show,Read)

data Column =
   CExp Exp
 | CExpAs Exp Ident
  deriving (Eq,Ord,Show,Read)

data Where =
   WNone
 | WCondition Condition
  deriving (Eq,Ord,Show,Read)

data Condition =
   COper Exp Oper Compared
 | CNot Condition
 | CExists Not Query
 | CIsNull Exp Not
 | CBetween Exp Not Exp Exp
 | CIn Exp Not Values
 | CAnd Condition Condition
 | COr Condition Condition
  deriving (Eq,Ord,Show,Read)

data Not =
   NNot
 | NNone
  deriving (Eq,Ord,Show,Read)

data Compared =
   ComExp Exp
 | ComAny Values
 | ComAll Values
  deriving (Eq,Ord,Show,Read)

data Exp =
   EName Ident
 | EQual Ident Ident
 | EInt Integer
 | EFloat Double
 | EStr Str
 | EString String
 | ENull
 | EDefault
 | EQuery Query
 | EAggr AggrOper Distinct Exp
 | EAggrAll AggrOper Distinct
 | EMul Exp Exp
 | EDiv Exp Exp
 | ERem Exp Exp
 | EAdd Exp Exp
 | ESub Exp Exp
  deriving (Eq,Ord,Show,Read)

data SetOperation =
   SOUnion
 | SOIntersect
 | SOExcept
  deriving (Eq,Ord,Show,Read)

data All =
   ANone
 | AAll
  deriving (Eq,Ord,Show,Read)

data JoinOn =
   JOCondition Condition
 | JOUsing [Ident]
  deriving (Eq,Ord,Show,Read)

data JoinType =
   JTLeft Outer
 | JTRight Outer
 | JTFull Outer
 | JTInner
  deriving (Eq,Ord,Show,Read)

data Outer =
   OutOuter
 | OutNone
  deriving (Eq,Ord,Show,Read)

data Distinct =
   DNone
 | DDistinct
  deriving (Eq,Ord,Show,Read)

data Group =
   GNone
 | GGroupBy [Exp]
  deriving (Eq,Ord,Show,Read)

data Having =
   HNone
 | HCondition Condition
  deriving (Eq,Ord,Show,Read)

data Order =
   ONone
 | OOrderBy [AttributeOrder]
  deriving (Eq,Ord,Show,Read)

data AttributeOrder =
   AOAsc Exp
 | AODesc Exp
  deriving (Eq,Ord,Show,Read)

data Setting =
   SVal Ident Exp
  deriving (Eq,Ord,Show,Read)

data AggrOper =
   AOMax
 | AOMin
 | AOAvg
 | AOCount
 | AOSum
  deriving (Eq,Ord,Show,Read)

data Oper =
   OEq
 | ONeq
 | OGt
 | OLt
 | OGeq
 | OLeq
 | OLike Not
  deriving (Eq,Ord,Show,Read)

data Typing =
   TColumn Ident Type [InlineConstraint]
 | TConstraint Constraint
 | TNamedConstraint Ident Constraint
  deriving (Eq,Ord,Show,Read)

data InlineConstraint =
   ICPrimaryKey
 | ICReferences Ident Ident [Policy]
 | ICUnique
 | ICNotNull
 | ICCheck Condition
 | ICDefault Exp
  deriving (Eq,Ord,Show,Read)

data Constraint =
   CPrimaryKey [Ident]
 | CReferences [Ident] Ident [Ident] [Policy]
 | CUnique [Ident]
 | CNotNull
 | CCheck Condition
  deriving (Eq,Ord,Show,Read)

data Type =
   TIdent Ident
 | TSized Ident Integer
  deriving (Eq,Ord,Show,Read)

data Policy =
   PDelete Action
 | PUpdate Action
  deriving (Eq,Ord,Show,Read)

data Action =
   ACascade
 | ASetNull
  deriving (Eq,Ord,Show,Read)

data TablePlaces =
   TPNone
 | TPAttributes [Ident]
  deriving (Eq,Ord,Show,Read)

data Values =
   VValues [Exp]
 | VQuery Query
  deriving (Eq,Ord,Show,Read)

data InsertValues =
   IVValues [Exp]
 | IVQuery Query
  deriving (Eq,Ord,Show,Read)

data Definition =
   DTable Ident Query
  deriving (Eq,Ord,Show,Read)

data Alteration =
   AAdd Typing
 | ADrop Ident
 | AAlter Ident Type
 | ADropPrimaryKey
 | ADropConstraint Ident
  deriving (Eq,Ord,Show,Read)

data TriggerTime =
   TTBefore
 | TTAfter
 | TTInstead
  deriving (Eq,Ord,Show,Read)

data TriggerAction =
   TAUpdate
 | TAInsert
 | TADelete
  deriving (Eq,Ord,Show,Read)

data TriggerEach =
   TERow
 | TEStatement
  deriving (Eq,Ord,Show,Read)

data TriggerBody =
   TBStatements [TriggerStatement]
 | TBProcedure Ident
  deriving (Eq,Ord,Show,Read)

data TriggerStatement =
   TSStatement Statement
 | TSIfThen Condition [TriggerStatement] [TriggerElse]
 | TSException Str
  deriving (Eq,Ord,Show,Read)

data TriggerElse =
   TEElseIf Condition [TriggerStatement]
  deriving (Eq,Ord,Show,Read)

