

module AbsMinSQL where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq,Ord,Show,Read)
newtype Str = Str String deriving (Eq,Ord,Show,Read)
data Script =
   SStm [Command]
  deriving (Eq,Ord,Show,Read)

data Command =
   CQuery Table
 | CInsert Ident VALUES
 | CUpdate Ident [Setting] WHERE
 | CDelete STAR Ident WHERE
 | CCreateDatabase Ident
 | CCreateTable Ident [Typing]
 | CAlterTable Ident Alter
 | CCreateView Ident Table
 | CCreateAssertion Ident Condition
 | CDescribe Ident
  deriving (Eq,Ord,Show,Read)

data Query =
   QSelect TOP DISTINCT Columns Table WHERE GROUP HAVING ORDER
 | QSelectWith [Definition] Query
  deriving (Eq,Ord,Show,Read)

data Columns =
   CCAll
 | CCExps [Exp]
  deriving (Eq,Ord,Show,Read)

data WHERE =
   WNone
 | WCondition Condition
  deriving (Eq,Ord,Show,Read)

data Table =
   TName Ident
 | TNameAlias Table Ident
 | TProduct Table Table
 | TUnion Table ALL Table
 | TIntersect Table ALL Table
 | TExcept Table ALL Table
 | TJoin Table Table ON
 | TNatJoin Table Table
 | TNatFullJoin Table Table
 | TLeftJoin Table Table ON
 | TRightJoin Table Table ON
 | TQuery Query
  deriving (Eq,Ord,Show,Read)

data Exp =
   EName Ident
 | EQual Ident Ident
 | ENameAlias Exp Ident
 | EQuery Query
 | EInt Integer
 | EFloat Double
 | EStr Str
 | EString String
 | ENull
 | EList Exp [Exp]
 | EAggr AggrOper DISTINCT Exp
 | EAggrAll AggrOper DISTINCT
 | EDef
 | EAny Exp
 | EAll Exp
 | EMul Exp Exp
 | EDiv Exp Exp
 | EAdd Exp Exp
 | ESub Exp Exp
  deriving (Eq,Ord,Show,Read)

data ON =
   OnNone
 | OnCondition Condition
  deriving (Eq,Ord,Show,Read)

data ALL =
   ANone
 | AAll
  deriving (Eq,Ord,Show,Read)

data DISTINCT =
   DNone
 | DDISTINCT
  deriving (Eq,Ord,Show,Read)

data TOP =
   TNone
 | TNumber Integer
 | TPercent Integer
  deriving (Eq,Ord,Show,Read)

data GROUP =
   GNone
 | GGroupBy [Exp]
  deriving (Eq,Ord,Show,Read)

data HAVING =
   HNone
 | HCondition Condition
  deriving (Eq,Ord,Show,Read)

data ORDER =
   ONone
 | OOrderBy [Exp] DESC
  deriving (Eq,Ord,Show,Read)

data DESC =
   DAsc
 | DDesc
  deriving (Eq,Ord,Show,Read)

data VALUES =
   VColVal [Ident] [Exp]
 | VVal [Exp]
 | VTable Table
 | VColTable Ident [Ident] Table
  deriving (Eq,Ord,Show,Read)

data Setting =
   SVal Ident Exp
  deriving (Eq,Ord,Show,Read)

data STAR =
   StNone
 | StStar
  deriving (Eq,Ord,Show,Read)

data AggrOper =
   AOMax
 | AOMin
 | AOAvg
 | AOCount
 | AOSum
  deriving (Eq,Ord,Show,Read)

data Condition =
   COper Exp Oper Exp
 | CAnd Condition Condition
 | COr Condition Condition
 | CNot Condition
 | CExists Exp
 | CIsNotNull Exp
 | CBetween Exp Exp Exp
 | CNotBetween Exp Exp Exp
  deriving (Eq,Ord,Show,Read)

data Oper =
   OEq
 | ONeq
 | OGt
 | OLt
 | OGeq
 | OLeq
 | OLike
 | ONotLike
 | OIn
 | ONotIn
  deriving (Eq,Ord,Show,Read)

data Typing =
   TColumn Ident Type [Constraint] DEFAULT
 | TConstraint Constraint [Ident]
 | TForeignKey Exp Ident [Ident] [Policy]
 | TReferences Ident Ident [Ident] [Policy]
 | TNamedConstraint Ident Constraint
  deriving (Eq,Ord,Show,Read)

data Type =
   TIdent Ident
 | TSized Ident Integer
  deriving (Eq,Ord,Show,Read)

data DEFAULT =
   DefNone
 | DefExp Exp
  deriving (Eq,Ord,Show,Read)

data Constraint =
   CNotNull
 | CUnique
 | CPrimaryKey
 | CForeignKey Exp Ident [Ident] [Policy]
 | CReferences Ident [Ident] [Policy]
 | CCheck Condition
 | CNamed Ident Constraint
  deriving (Eq,Ord,Show,Read)

data Policy =
   PDelete Action
 | PUpdate Action
  deriving (Eq,Ord,Show,Read)

data Action =
   ACascade
 | ASetNull
  deriving (Eq,Ord,Show,Read)

data Definition =
   DTable Ident Table Query
  deriving (Eq,Ord,Show,Read)

data Alter =
   AAdd Typing
 | ADrop Ident
 | AAlter Ident Type
 | ADropPrimaryKey
 | ADropConstraint Ident
  deriving (Eq,Ord,Show,Read)

