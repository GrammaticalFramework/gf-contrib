{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintMinSQL where

-- pretty-printer generated by the BNF converter

import AbsMinSQL
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: [a] -> Doc
  prtList = concatD . map (prt 0)

instance Print a => Print [a] where
  prt _ = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))
  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])


instance Print Str where
  prt _ (Str i) = doc (showString ( i))



instance Print Script where
  prt i e = case e of
   SStm commands -> prPrec i 0 (concatD [prt 0 commands])


instance Print Command where
  prt i e = case e of
   CQuery table -> prPrec i 0 (concatD [prt 0 table])
   CInsert id values -> prPrec i 0 (concatD [doc (showString "INSERT") , doc (showString "INTO") , prt 0 id , prt 0 values])
   CUpdate id settings where' -> prPrec i 0 (concatD [doc (showString "UPDATE") , prt 0 id , doc (showString "SET") , prt 0 settings , prt 0 where'])
   CDelete star id where' -> prPrec i 0 (concatD [doc (showString "DELETE") , prt 0 star , doc (showString "FROM") , prt 0 id , prt 0 where'])
   CCreateDatabase id -> prPrec i 0 (concatD [doc (showString "CREATE") , doc (showString "DATABASE") , prt 0 id])
   CCreateTable id typings -> prPrec i 0 (concatD [doc (showString "CREATE") , doc (showString "TABLE") , prt 0 id , doc (showString "(") , prt 0 typings , doc (showString ")")])
   CAlterTable id alter -> prPrec i 0 (concatD [doc (showString "ALTER") , doc (showString "TABLE") , prt 0 id , prt 0 alter])
   CCreateView id table -> prPrec i 0 (concatD [doc (showString "CREATE") , doc (showString "VIEW") , prt 0 id , doc (showString "AS") , prt 0 table])
   CCreateAssertion id condition -> prPrec i 0 (concatD [doc (showString "CREATE") , doc (showString "ASSERTION") , prt 0 id , doc (showString "CHECK") , doc (showString "(") , prt 0 condition , doc (showString ")")])
   CDescribe id -> prPrec i 0 (concatD [doc (showString "DESCRIBE") , prt 0 id])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , doc (showString ";") , prt 0 xs])

instance Print Query where
  prt i e = case e of
   QSelect top distinct columns table where' group having order -> prPrec i 0 (concatD [doc (showString "SELECT") , prt 0 top , prt 0 distinct , prt 0 columns , doc (showString "FROM") , prt 1 table , prt 0 where' , prt 0 group , prt 0 having , prt 0 order])
   QSelectWith definitions query -> prPrec i 0 (concatD [doc (showString "WITH") , prt 0 definitions , prt 0 query])


instance Print Columns where
  prt i e = case e of
   CCAll  -> prPrec i 0 (concatD [doc (showString "*")])
   CCExps exps -> prPrec i 0 (concatD [prt 0 exps])


instance Print WHERE where
  prt i e = case e of
   WNone  -> prPrec i 0 (concatD [])
   WCondition condition -> prPrec i 0 (concatD [doc (showString "WHERE") , prt 0 condition])


instance Print Table where
  prt i e = case e of
   TName id -> prPrec i 2 (concatD [prt 0 id])
   TNameAlias table id -> prPrec i 2 (concatD [prt 2 table , doc (showString "AS") , prt 0 id])
   TProduct table0 table -> prPrec i 1 (concatD [prt 1 table0 , doc (showString ",") , prt 2 table])
   TUnion table0 all table -> prPrec i 1 (concatD [prt 1 table0 , doc (showString "UNION") , prt 0 all , prt 2 table])
   TIntersect table0 all table -> prPrec i 1 (concatD [prt 1 table0 , doc (showString "INTERSECT") , prt 0 all , prt 2 table])
   TExcept table0 all table -> prPrec i 1 (concatD [prt 1 table0 , doc (showString "EXCEPT") , prt 0 all , prt 2 table])
   TJoin table0 table on -> prPrec i 1 (concatD [prt 1 table0 , doc (showString "JOIN") , prt 2 table , prt 0 on])
   TNatJoin table0 table -> prPrec i 1 (concatD [prt 1 table0 , doc (showString "NATURAL") , doc (showString "JOIN") , prt 2 table])
   TNatFullJoin table0 table -> prPrec i 1 (concatD [prt 1 table0 , doc (showString "NATURAL") , doc (showString "FULL") , doc (showString "OUTER") , doc (showString "JOIN") , prt 2 table])
   TLeftJoin table0 table on -> prPrec i 1 (concatD [prt 1 table0 , doc (showString "LEFT") , doc (showString "OUTER") , doc (showString "JOIN") , prt 2 table , prt 0 on])
   TRightJoin table0 table on -> prPrec i 1 (concatD [prt 1 table0 , doc (showString "RIGHT") , doc (showString "OUTER") , doc (showString "JOIN") , prt 2 table , prt 0 on])
   TQuery query -> prPrec i 0 (concatD [prt 0 query])


instance Print Exp where
  prt i e = case e of
   EName id -> prPrec i 8 (concatD [prt 0 id])
   EQual id0 id -> prPrec i 8 (concatD [prt 0 id0 , doc (showString ".") , prt 0 id])
   ENameAlias exp id -> prPrec i 8 (concatD [prt 8 exp , doc (showString "AS") , prt 0 id])
   EQuery query -> prPrec i 8 (concatD [doc (showString "(") , prt 0 query , doc (showString ")")])
   EInt n -> prPrec i 8 (concatD [prt 0 n])
   EFloat d -> prPrec i 8 (concatD [prt 0 d])
   EStr str -> prPrec i 8 (concatD [prt 0 str])
   EString str -> prPrec i 8 (concatD [prt 0 str])
   ENull  -> prPrec i 8 (concatD [doc (showString "NULL")])
   EList exp exps -> prPrec i 8 (concatD [doc (showString "(") , prt 0 exp , doc (showString ",") , prt 0 exps , doc (showString ")")])
   EAggr aggroper distinct exp -> prPrec i 8 (concatD [prt 0 aggroper , doc (showString "(") , prt 0 distinct , prt 0 exp , doc (showString ")")])
   EAggrAll aggroper distinct -> prPrec i 8 (concatD [prt 0 aggroper , doc (showString "(") , prt 0 distinct , doc (showString "*") , doc (showString ")")])
   EDef  -> prPrec i 8 (concatD [doc (showString "DEFAULT")])
   EAny exp -> prPrec i 7 (concatD [doc (showString "ANY") , prt 8 exp])
   EAll exp -> prPrec i 7 (concatD [doc (showString "ALL") , prt 8 exp])
   EMul exp0 exp -> prPrec i 6 (concatD [prt 6 exp0 , doc (showString "*") , prt 7 exp])
   EDiv exp0 exp -> prPrec i 6 (concatD [prt 6 exp0 , doc (showString "/") , prt 7 exp])
   EAdd exp0 exp -> prPrec i 5 (concatD [prt 5 exp0 , doc (showString "+") , prt 6 exp])
   ESub exp0 exp -> prPrec i 5 (concatD [prt 5 exp0 , doc (showString "-") , prt 6 exp])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print ON where
  prt i e = case e of
   OnNone  -> prPrec i 0 (concatD [])
   OnCondition condition -> prPrec i 0 (concatD [doc (showString "ON") , prt 0 condition])


instance Print ALL where
  prt i e = case e of
   ANone  -> prPrec i 0 (concatD [])
   AAll  -> prPrec i 0 (concatD [doc (showString "ALL")])


instance Print DISTINCT where
  prt i e = case e of
   DNone  -> prPrec i 0 (concatD [])
   DDISTINCT  -> prPrec i 0 (concatD [doc (showString "DISTINCT")])


instance Print TOP where
  prt i e = case e of
   TNone  -> prPrec i 0 (concatD [])
   TNumber n -> prPrec i 0 (concatD [doc (showString "TOP") , prt 0 n])
   TPercent n -> prPrec i 0 (concatD [doc (showString "TOP") , prt 0 n , doc (showString "PERCENT")])


instance Print GROUP where
  prt i e = case e of
   GNone  -> prPrec i 0 (concatD [])
   GGroupBy exps -> prPrec i 0 (concatD [doc (showString "GROUP") , doc (showString "BY") , prt 0 exps])


instance Print HAVING where
  prt i e = case e of
   HNone  -> prPrec i 0 (concatD [])
   HCondition condition -> prPrec i 0 (concatD [doc (showString "HAVING") , prt 0 condition])


instance Print ORDER where
  prt i e = case e of
   ONone  -> prPrec i 0 (concatD [])
   OOrderBy exps desc -> prPrec i 0 (concatD [doc (showString "ORDER") , doc (showString "BY") , prt 0 exps , prt 0 desc])


instance Print DESC where
  prt i e = case e of
   DAsc  -> prPrec i 0 (concatD [])
   DDesc  -> prPrec i 0 (concatD [doc (showString "DESC")])


instance Print VALUES where
  prt i e = case e of
   VColVal ids exps -> prPrec i 0 (concatD [doc (showString "(") , prt 0 ids , doc (showString ")") , doc (showString "VALUES") , doc (showString "(") , prt 0 exps , doc (showString ")")])
   VVal exps -> prPrec i 0 (concatD [doc (showString "VALUES") , doc (showString "(") , prt 0 exps , doc (showString ")")])
   VTable table -> prPrec i 0 (concatD [doc (showString "(") , prt 0 table , doc (showString ")")])
   VColTable id ids table -> prPrec i 0 (concatD [prt 0 id , doc (showString "(") , prt 0 ids , doc (showString ")") , doc (showString "(") , prt 0 table , doc (showString ")")])


instance Print Setting where
  prt i e = case e of
   SVal id exp -> prPrec i 0 (concatD [prt 0 id , doc (showString "=") , prt 0 exp])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print STAR where
  prt i e = case e of
   StNone  -> prPrec i 0 (concatD [])
   StStar  -> prPrec i 0 (concatD [doc (showString "*")])


instance Print AggrOper where
  prt i e = case e of
   AOMax  -> prPrec i 0 (concatD [doc (showString "MAX")])
   AOMin  -> prPrec i 0 (concatD [doc (showString "MIN")])
   AOAvg  -> prPrec i 0 (concatD [doc (showString "AVG")])
   AOCount  -> prPrec i 0 (concatD [doc (showString "COUNT")])
   AOSum  -> prPrec i 0 (concatD [doc (showString "SUM")])


instance Print Condition where
  prt i e = case e of
   COper exp0 oper exp -> prPrec i 3 (concatD [prt 0 exp0 , prt 0 oper , prt 0 exp])
   CAnd condition0 condition -> prPrec i 2 (concatD [prt 2 condition0 , doc (showString "AND") , prt 3 condition])
   COr condition0 condition -> prPrec i 1 (concatD [prt 1 condition0 , doc (showString "OR") , prt 2 condition])
   CNot condition -> prPrec i 3 (concatD [doc (showString "NOT") , prt 3 condition])
   CExists exp -> prPrec i 3 (concatD [doc (showString "EXISTS") , prt 0 exp])
   CIsNotNull exp -> prPrec i 3 (concatD [prt 0 exp , doc (showString "IS") , doc (showString "NOT") , doc (showString "NULL")])
   CBetween exp0 exp1 exp -> prPrec i 2 (concatD [prt 0 exp0 , doc (showString "BETWEEN") , prt 0 exp1 , doc (showString "AND") , prt 0 exp])
   CNotBetween exp0 exp1 exp -> prPrec i 2 (concatD [prt 0 exp0 , doc (showString "NOT") , doc (showString "BETWEEN") , prt 0 exp1 , doc (showString "AND") , prt 0 exp])


instance Print Oper where
  prt i e = case e of
   OEq  -> prPrec i 0 (concatD [doc (showString "=")])
   ONeq  -> prPrec i 0 (concatD [doc (showString "<>")])
   OGt  -> prPrec i 0 (concatD [doc (showString ">")])
   OLt  -> prPrec i 0 (concatD [doc (showString "<")])
   OGeq  -> prPrec i 0 (concatD [doc (showString ">=")])
   OLeq  -> prPrec i 0 (concatD [doc (showString "<=")])
   OLike  -> prPrec i 0 (concatD [doc (showString "LIKE")])
   ONotLike  -> prPrec i 0 (concatD [doc (showString "NOT") , doc (showString "LIKE")])
   OIn  -> prPrec i 0 (concatD [doc (showString "IN")])
   ONotIn  -> prPrec i 0 (concatD [doc (showString "NOT") , doc (showString "IN")])


instance Print Typing where
  prt i e = case e of
   TColumn id type' constraints default' -> prPrec i 0 (concatD [prt 0 id , prt 0 type' , prt 0 constraints , prt 0 default'])
   TConstraint constraint ids -> prPrec i 0 (concatD [prt 0 constraint , doc (showString "(") , prt 0 ids , doc (showString ")")])
   TForeignKey exp id ids policys -> prPrec i 0 (concatD [doc (showString "FOREIGN") , doc (showString "KEY") , prt 0 exp , doc (showString "REFERENCES") , prt 0 id , doc (showString "(") , prt 0 ids , doc (showString ")") , prt 0 policys])
   TReferences id0 id ids policys -> prPrec i 0 (concatD [prt 0 id0 , doc (showString "REFERENCES") , prt 0 id , doc (showString "(") , prt 0 ids , doc (showString ")") , prt 0 policys])
   TNamedConstraint id constraint -> prPrec i 0 (concatD [doc (showString "CONSTRAINT") , prt 0 id , prt 0 constraint])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print Type where
  prt i e = case e of
   TIdent id -> prPrec i 0 (concatD [prt 0 id])
   TSized id n -> prPrec i 0 (concatD [prt 0 id , doc (showString "(") , prt 0 n , doc (showString ")")])


instance Print DEFAULT where
  prt i e = case e of
   DefNone  -> prPrec i 0 (concatD [])
   DefExp exp -> prPrec i 0 (concatD [doc (showString "DEFAULT") , prt 0 exp])


instance Print Constraint where
  prt i e = case e of
   CNotNull  -> prPrec i 0 (concatD [doc (showString "NOT") , doc (showString "NULL")])
   CUnique  -> prPrec i 0 (concatD [doc (showString "UNIQUE")])
   CPrimaryKey  -> prPrec i 0 (concatD [doc (showString "PRIMARY") , doc (showString "KEY")])
   CForeignKey exp id ids policys -> prPrec i 0 (concatD [doc (showString "FOREIGN") , doc (showString "KEY") , prt 0 exp , doc (showString "REFERENCES") , prt 0 id , doc (showString "(") , prt 0 ids , doc (showString ")") , prt 0 policys])
   CReferences id ids policys -> prPrec i 0 (concatD [doc (showString "REFERENCES") , prt 0 id , doc (showString "(") , prt 0 ids , doc (showString ")") , prt 0 policys])
   CCheck condition -> prPrec i 0 (concatD [doc (showString "CHECK") , doc (showString "(") , prt 0 condition , doc (showString ")")])
   CNamed id constraint -> prPrec i 0 (concatD [doc (showString "CONSTRAINT") , prt 0 id , prt 0 constraint])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print Policy where
  prt i e = case e of
   PDelete action -> prPrec i 0 (concatD [doc (showString "ON") , doc (showString "DELETE") , prt 0 action])
   PUpdate action -> prPrec i 0 (concatD [doc (showString "ON") , doc (showString "UPDATE") , prt 0 action])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print Action where
  prt i e = case e of
   ACascade  -> prPrec i 0 (concatD [doc (showString "CASCADE")])
   ASetNull  -> prPrec i 0 (concatD [doc (showString "SET") , doc (showString "NULL")])


instance Print Definition where
  prt i e = case e of
   DTable id table query -> prPrec i 0 (concatD [prt 0 id , doc (showString "AS") , prt 1 table , prt 0 query])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print Alter where
  prt i e = case e of
   AAdd typing -> prPrec i 0 (concatD [doc (showString "ADD") , prt 0 typing])
   ADrop id -> prPrec i 0 (concatD [doc (showString "DROP") , doc (showString "COLUMN") , prt 0 id])
   AAlter id type' -> prPrec i 0 (concatD [doc (showString "MODIFY") , doc (showString "COLUMN") , prt 0 id , prt 0 type'])
   ADropPrimaryKey  -> prPrec i 0 (concatD [doc (showString "DROP") , doc (showString "PRIMARY") , doc (showString "KEY")])
   ADropConstraint id -> prPrec i 0 (concatD [doc (showString "DROP") , doc (showString "CONSTRAINT") , prt 0 id])



