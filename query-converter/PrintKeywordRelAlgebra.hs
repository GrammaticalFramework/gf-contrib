{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintKeywordRelAlgebra where

-- pretty-printer generated by the BNF converter

import AbsKeywordRelAlgebra
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: [a] -> Doc
  prtList = concatD . map (prt 0)

instance Print a => Print [a] where
  prt _ = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))
  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])



instance Print Rels where
  prt i e = case e of
   RRels rels -> prPrec i 0 (concatD [prt 0 rels])


instance Print Rel where
  prt i e = case e of
   RTable id -> prPrec i 3 (concatD [prt 0 id])
   RSelect cond rel -> prPrec i 2 (concatD [doc (showString "FILTER") , doc (showString "[") , prt 0 cond , doc (showString "]") , prt 2 rel])
   RProject projections rel -> prPrec i 2 (concatD [doc (showString "PROJECT") , doc (showString "[") , prt 0 projections , doc (showString "]") , prt 2 rel])
   RRename renaming rel -> prPrec i 2 (concatD [doc (showString "RENAME") , doc (showString "[") , prt 0 renaming , doc (showString "]") , prt 2 rel])
   RGroup ids aggregations rel -> prPrec i 2 (concatD [doc (showString "GROUP") , doc (showString "[") , prt 0 ids , doc (showString ",") , prt 0 aggregations , doc (showString "]") , prt 2 rel])
   RSort sortexps rel -> prPrec i 2 (concatD [doc (showString "ORDER") , doc (showString "[") , prt 0 sortexps , doc (showString "]") , prt 2 rel])
   RDistinct rel -> prPrec i 2 (concatD [doc (showString "DISTINCT") , prt 2 rel])
   RUnion rel0 rel -> prPrec i 1 (concatD [prt 1 rel0 , doc (showString "UNION") , prt 2 rel])
   RCartesian rel0 rel -> prPrec i 1 (concatD [prt 1 rel0 , doc (showString ",") , prt 2 rel])
   RExcept rel0 rel -> prPrec i 1 (concatD [prt 1 rel0 , doc (showString "EXCEPT") , prt 2 rel])
   RIntersect rel0 rel -> prPrec i 1 (concatD [prt 1 rel0 , doc (showString "INTERSECT") , prt 2 rel])
   RNaturalJoin rel0 rel -> prPrec i 1 (concatD [prt 1 rel0 , doc (showString "NATURAL") , doc (showString "JOIN") , prt 2 rel])
   RThetaJoin rel0 cond rel -> prPrec i 1 (concatD [prt 1 rel0 , doc (showString "JOIN") , doc (showString "[") , prt 0 cond , doc (showString "]") , prt 2 rel])
   RInnerJoin rel0 ids rel -> prPrec i 1 (concatD [prt 1 rel0 , doc (showString "INNER") , doc (showString "JOIN") , doc (showString "[") , prt 0 ids , doc (showString "]") , prt 2 rel])
   RFullOuterJoin rel0 ids rel -> prPrec i 1 (concatD [prt 1 rel0 , doc (showString "FULL") , doc (showString "OUTER") , doc (showString "JOIN") , doc (showString "[") , prt 0 ids , doc (showString "]") , prt 2 rel])
   RLeftOuterJoin rel0 ids rel -> prPrec i 1 (concatD [prt 1 rel0 , doc (showString "LEFT") , doc (showString "OUTER") , doc (showString "JOIN") , doc (showString "[") , prt 0 ids , doc (showString "]") , prt 2 rel])
   RRightOuterJoin rel0 ids rel -> prPrec i 1 (concatD [prt 1 rel0 , doc (showString "RIGHT") , doc (showString "OUTER") , doc (showString "JOIN") , doc (showString "[") , prt 0 ids , doc (showString "]") , prt 2 rel])
   RLet id rel0 rel -> prPrec i 0 (concatD [doc (showString "LET") , prt 0 id , doc (showString "=") , prt 1 rel0 , doc (showString "IN") , prt 0 rel])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print Cond where
  prt i e = case e of
   CEq exp0 exp -> prPrec i 2 (concatD [prt 0 exp0 , doc (showString "=") , prt 0 exp])
   CNEq exp0 exp -> prPrec i 2 (concatD [prt 0 exp0 , doc (showString "<>") , prt 0 exp])
   CLt exp0 exp -> prPrec i 2 (concatD [prt 0 exp0 , doc (showString "<") , prt 0 exp])
   CGt exp0 exp -> prPrec i 2 (concatD [prt 0 exp0 , doc (showString ">") , prt 0 exp])
   CLeq exp0 exp -> prPrec i 2 (concatD [prt 0 exp0 , doc (showString "<=") , prt 0 exp])
   CGeq exp0 exp -> prPrec i 2 (concatD [prt 0 exp0 , doc (showString ">=") , prt 0 exp])
   CLike exp0 exp -> prPrec i 2 (concatD [prt 0 exp0 , doc (showString "LIKE") , prt 0 exp])
   CNot cond -> prPrec i 2 (concatD [doc (showString "NOT") , prt 3 cond])
   CAnd cond0 cond -> prPrec i 1 (concatD [prt 1 cond0 , doc (showString "AND") , prt 2 cond])
   COr cond0 cond -> prPrec i 1 (concatD [prt 1 cond0 , doc (showString "OR") , prt 2 cond])


instance Print Exp where
  prt i e = case e of
   EIdent id -> prPrec i 3 (concatD [prt 0 id])
   EQIdent id0 id -> prPrec i 3 (concatD [prt 0 id0 , doc (showString ".") , prt 0 id])
   EString str -> prPrec i 3 (concatD [prt 0 str])
   EInt n -> prPrec i 3 (concatD [prt 0 n])
   EFloat d -> prPrec i 3 (concatD [prt 0 d])
   EAggr function distinct id -> prPrec i 3 (concatD [prt 0 function , doc (showString "(") , prt 0 distinct , prt 0 id , doc (showString ")")])
   EMul exp0 exp -> prPrec i 2 (concatD [prt 2 exp0 , doc (showString "*") , prt 3 exp])
   EDiv exp0 exp -> prPrec i 2 (concatD [prt 2 exp0 , doc (showString "/") , prt 3 exp])
   ERem exp0 exp -> prPrec i 2 (concatD [prt 2 exp0 , doc (showString "%") , prt 3 exp])
   EAdd exp0 exp -> prPrec i 1 (concatD [prt 1 exp0 , doc (showString "+") , prt 2 exp])
   ESub exp0 exp -> prPrec i 1 (concatD [prt 1 exp0 , doc (showString "-") , prt 2 exp])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print Projection where
  prt i e = case e of
   PExp exp -> prPrec i 0 (concatD [prt 0 exp])
   PRename exp id -> prPrec i 0 (concatD [prt 0 exp , doc (showString "AS") , prt 0 id])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print Renaming where
  prt i e = case e of
   RRelation id -> prPrec i 0 (concatD [prt 0 id])
   RAttributes id ids -> prPrec i 0 (concatD [prt 0 id , doc (showString "(") , prt 0 ids , doc (showString ")")])


instance Print Aggregation where
  prt i e = case e of
   AApp function distinct id -> prPrec i 0 (concatD [prt 0 function , doc (showString "(") , prt 0 distinct , prt 0 id , doc (showString ")")])
   ARename function distinct id exp -> prPrec i 0 (concatD [prt 0 function , doc (showString "(") , prt 0 distinct , prt 0 id , doc (showString ")") , doc (showString "AS") , prt 0 exp])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print Function where
  prt i e = case e of
   FAvg  -> prPrec i 0 (concatD [doc (showString "AVG")])
   FSum  -> prPrec i 0 (concatD [doc (showString "SUM")])
   FMax  -> prPrec i 0 (concatD [doc (showString "MAX")])
   FMin  -> prPrec i 0 (concatD [doc (showString "MIN")])
   FCount  -> prPrec i 0 (concatD [doc (showString "COUNT")])


instance Print Distinct where
  prt i e = case e of
   DNone  -> prPrec i 0 (concatD [])
   DDistinct  -> prPrec i 0 (concatD [doc (showString "DISTINCT")])


instance Print SortExp where
  prt i e = case e of
   SEAsc exp -> prPrec i 0 (concatD [prt 0 exp])
   SEDesc exp -> prPrec i 0 (concatD [prt 0 exp , doc (showString "DESC")])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])


