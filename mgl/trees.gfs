l -treebank -bind mkProp (subset (range exp) (domain ln))
l -treebank -bind mkProp (subset (domain (Var2Fun f)) (range (inverse (Var2Fun f))))
l -treebank -bind mkProp (subset (intersect (BaseValSet (Var2Set A) (Var2Set B))) (Var2Set A))
l -treebank -bind mkProp (subset (Var2Set B) (union (ConsValSet (Var2Set A) (BaseValSet (Var2Set B) (Var2Set C)))))
l -treebank -bind not (mkProp (prsubset (Var2Set A) (Var2Set A)))
l -treebank -bind mkProp (subset (intersect (BaseValSet (Var2Set A) (cartesian_product (BaseValSet (Var2Set A) (Var2Set B))))) emptyset)
l -treebank -bind forall (BaseVarNum x) (mkProp (subset (set (BaseValNum (Var2Num x) (Var2Num x))) (set_base (Var2Num x))))
l -treebank -bind forall (BaseVarNum x) (mkProp (prsubset emptyset (set_base (Var2Num x))))
l -treebank -bind forall (ConsVarNum x (BaseVarNum y)) (mkProp (prsubset (set_base (Var2Num x)) (set (BaseValNum (Var2Num x) (Var2Num y)))))
l -treebank -bind forall (ConsVarNum x (BaseVarNum y)) (mkProp (prsubset (interval_oo (Var2Num x) (Var2Num y)) (interval_cc (Var2Num x) (Var2Num y))))
l -treebank -bind mkProp (eq_num (At exp (int2num 0)) (int2num 1))
l -treebank -bind mkProp (eq_num (At (diff exp) (int2num 0)) (int2num 1))
l -treebank -bind mkProp (eq_num (At (nthdiff four sin) nums1_pi) (int2num 0))
l -treebank -bind mkProp (eq_num (At (diff (inverse (Var2Fun f))) (Var2Num x)) (bin_over (int2num 1) (At (left_compose (diff (Var2Fun f)) (Var2Fun f)) (Var2Num x))))
l -treebank -bind mkProp (eq_num (At (int (diff (Var2Fun f))) (Var2Num x)) (At (Var2Fun f) (Var2Num x)))
l -treebank -bind mkProp (eq_num (At (partialdiff one (partialdiff two (Var2Fun f))) (Var2Num x)) (At (partialdiff two (partialdiff one (Var2Fun f))) (Var2Num x)))
l -treebank -bind mkProp (eq_num (defint_interval (diff (Var2Fun f)) (int2num 0) (int2num 1)) (minus (At (Var2Fun f) (int2num 1)) (At (Var2Fun f) (int2num 0))))
l -treebank -bind mkProp (eq_num (defint_interval (lambda x (bin_over (int2num 1) (power2 (Var2Num x)))) (int2num 1) nums1_infinity) (int2num 1))
l -treebank -bind mkProp (eq_num (sum_range x (int2num 1) nums1_infinity (bin_over (int2num 1) (Var2Num x))) nums1_infinity)
l -treebank -bind mkProp (eq_num (sum_range x (int2num 1) nums1_infinity (bin_over (int2num 1) (power2 (Var2Num x)))) (power2 (bin_over nums1_pi (int2num 6))))
l -treebank -bind mkProp (eq_num (sum_range x (int2num 0) nums1_infinity (bin_over (int2num 1) (factorial (Var2Num x)))) nums1_e)
l -treebank -bind mkProp (eq_num (sum_range x (int2num 0) nums1_infinity (power (int2num 2) (unary_minus (Var2Num x)))) (int2num 2))
l -treebank -bind mkProp (eq_num (based_integer8 "20") (based_integer10 "16"))
l -treebank -bind mkProp (lt_num (based_integer8 "30") (based_integer16 "30"))
l -treebank -bind mkProp (eq_num (At ln (int2num 1)) (int2num 0))
l -treebank -bind mkProp (eq_num (defint (domain ln) (lambda x (a_inverse (Var2Num x)))) nums1_infinity)
l -treebank -bind forall (BaseVarNum x) (mkProp (lt_num (At ln (Var2Num x)) (Var2Num x)))
l -treebank -bind forall_set (BaseVarNum x) (domain ln) (mkProp (lt_num (At sin (Var2Num x)) (Var2Num x)))
l -treebank -bind exist (BaseVarNum x) (interval (int2num 0) (int2num 1)) (mkProp (eq_num (At exp (Var2Num x)) (Var2Num x)))
l -treebank -bind mkProp (eq_num (factorial (int2num 4)) (times (ConsValNum (int2num 1) (ConsValNum (int2num 2) (BaseValNum (int2num 3) (int2num 4))))))
l -treebank -bind mkProp (eq_num (sum_range x (int2num 1) (Var2Num y) (Var2Num x)) (bin_over (bin_plus (bin_times (Var2Num y) (Var2Num y)) (int2num 1)) (int2num 2)))
l -treebank -bind forall (BaseVarNum x) (mkProp (lt_num (power2 (Var2Num x)) (power (int2num 2) (Var2Num x))))
l -treebank -bind mkProp (eq_num (determinant (matrix (BaseMatrixRow (matrixrow (BaseValNum (int2num 1) (int2num 0))) (matrixrow (BaseValNum (int2num 0) (int2num 1)))))) (int2num 1))
l -treebank -bind mkProp (eq_num (determinant (Var2Tensor M)) (determinant (transpose (Var2Tensor M))))
l -treebank -bind mkProp (gt_num (scalarproduct (Var2Tensor u) (Var2Tensor u)) (vector_selector one (Var2Tensor u)))
l -treebank -bind mkProp (eq_num (vector_selector three (vectorproduct (Var2Tensor v) (Var2Tensor v))) (int2num 0))
l -treebank -bind mkProp (eq_num (matrix_selector two three (Var2Tensor M)) (matrix_selector three two (transpose (Var2Tensor M))))
l -treebank -bind mkProp (eq_num (At (int identity) (int2num 1)) (bin_over (int2num 1) (int2num 2)))
l -treebank -bind mkProp (eq_num (At (right_compose identity (Var2Fun f)) (Var2Num x)) (At (Var2Fun f) (Var2Num x)))
l -treebank -bind mkProp (eq_num (max (intersect (BaseValSet (domain ln) (interval (unary_minus (int2num 5)) (int2num 4))))) (int2num 4))
l -treebank -bind mkProp (eq_num (size (intersect (BaseValSet (interval (int2num 0) (int2num 3)) (interval (int2num 4) (int2num 6))))) (int2num 0))
l -treebank -bind mkProp (prsubset (interval (int2num 2) (int2num 3)) (interval (int2num 0) (int2num 5)))
l -treebank -bind mkProp (approx (At exp (int2num 1)) (int2num 3))
l -treebank -bind forall (BaseVarNum x) (implies (mkProp (gt_num (Var2Num x) (Var2Num x))) (mkProp (lt_num (a_inverse (Var2Num x)) (Var2Num x))))
l -treebank -bind mkProp (gt_num (times (BaseValNum (Var2Num z) (conjugate (Var2Num z)))) (int2num 0))
l -treebank -bind mkProp (eq_num (real (At exp (times (BaseValNum nums1_pi nums1_i)))) (unary_minus (int2num 1)))
l -treebank -bind mkProp (eq_num (imaginary (At exp (times (BaseValNum nums1_pi nums1_i)))) (int2num 0))
l -treebank -bind mkProp (eq_num (argument nums1_i) (bin_over nums1_pi (int2num 2)))
l -treebank -bind mkProp (eq_num (complex_cartesian (int2num 0) (Var2Num y)) (bin_times nums1_i (Var2Num y)))
l -treebank -bind mkProp (eq_num (complex_polar (int2num 1) nums1_pi) (unary_minus (int2num 1)))
l -treebank -bind forall (ConsVarNum x (BaseVarNum y)) (mkProp (eq_num (remainder (gcd (BaseValNum (Var2Num x) (Var2Num y))) (Var2Num x)) (int2num 0)))
l -treebank -bind forall (ConsVarNum x (BaseVarNum y)) (implies (bin_and (mkProp (divides (Var2Num x) (Var2Num y))) (mkProp (divides (Var2Num y) (Var2Num x)))) (bin_or (mkProp (eq_num (Var2Num x) (int2num 0))) (mkProp (eq_num (Var2Num x) (Var2Num y)))))
l -treebank -bind forall_set (BaseVarNum x) (domain ln) (mkProp (eq_num (floor (Var2Num x)) (trunc (Var2Num x))))
l -treebank -bind mkProp (gt_num (mean (BaseValNum (bin_plus (Var2Num x) (int2num 1)) (Var2Num x))) (Var2Num x))
l -treebank -bind mkProp (eq_num (sdev (ConsValNum (Var2Num x) (ConsValNum (Var2Num x) (BaseValNum (Var2Num x) (Var2Num x))))) (int2num 0))
l -treebank -bind mkProp (subset (map x (bin_over (At sin (Var2Num x)) (Var2Num x)) (Var2Set A)) (interval (unary_minus (int2num 1)) (int2num 1)))
