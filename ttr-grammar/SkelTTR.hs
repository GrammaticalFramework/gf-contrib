module SkelTTR where

-- Haskell module generated by the BNF converter

import AbsTTR
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transId :: Id -> Result
transId x = case x of
  Id str  -> failure x


transText :: Text -> Result
transText x = case x of
  TJments jments  -> failure x


transJment :: Jment -> Result
transJment x = case x of
  JIn exp1 exp2  -> failure x
  JEq exp1 exp2  -> failure x
  JEqIn exp1 exp2 exp3  -> failure x
  JSub exp1 exp2  -> failure x
  JSubIn exp1 exp2 exp3  -> failure x


transExp :: Exp -> Result
transExp x = case x of
  EId id  -> failure x
  EStr str  -> failure x
  EInt n  -> failure x
  EFloat d  -> failure x
  ERecTyp  -> failure x
  ERecord fields  -> failure x
  ESetTy exp  -> failure x
  EListTy exp  -> failure x
  ELamApp lambdas exp exps  -> failure x
  EProj exp id  -> failure x
  EApps exp exps  -> failure x
  ECompl exp  -> failure x
  EJoin exp1 id2 exp3  -> failure x
  EUnion exp1 exp2  -> failure x
  EInters exp1 exp2  -> failure x
  EMerge exp1 exp2  -> failure x
  EConcat exp1 exp2  -> failure x
  ELambs lambdas exp  -> failure x
  EProd id exp1 exp2  -> failure x
  EFun exp1 exp2  -> failure x
  ECFun exp1 exp2  -> failure x


transField :: Field -> Result
transField x = case x of
  FIn id exp  -> failure x
  FEq id exp  -> failure x
  FEqIn id exp1 exp2  -> failure x


transLambda :: Lambda -> Result
transLambda x = case x of
  LAbs id exp  -> failure x



