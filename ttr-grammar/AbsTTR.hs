module AbsTTR where

-- Haskell module generated by the BNF converter


newtype Id = Id String deriving (Eq,Ord,Show)
data Text =
   TJments [Jment]
  deriving (Eq,Ord,Show)

data Jment =
   JIn Exp Exp
 | JEq Exp Exp
 | JEqIn Exp Exp Exp
 | JSub Exp Exp
 | JSubIn Exp Exp Exp
  deriving (Eq,Ord,Show)

data Exp =
   EId Id
 | EStr String
 | EInt Integer
 | EFloat Double
 | ERecTyp
 | ERecord [Field]
 | ESetTy Exp
 | EListTy Exp
 | ELamApp [Lambda] Exp [Exp]
 | EProj Exp Id
 | EApps Exp [Exp]
 | ECompl Exp
 | EJoin Exp Id Exp
 | EUnion Exp Exp
 | EInters Exp Exp
 | EMerge Exp Exp
 | EConcat Exp Exp
 | ELambs [Lambda] Exp
 | EProd Id Exp Exp
 | EFun Exp Exp
 | ECFun Exp Exp
  deriving (Eq,Ord,Show)

data Field =
   FIn Id Exp
 | FEq Id Exp
 | FEqIn Id Exp Exp
  deriving (Eq,Ord,Show)

data Lambda =
   LAbs Id Exp
  deriving (Eq,Ord,Show)

