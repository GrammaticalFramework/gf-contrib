{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintTTR where

-- pretty-printer generated by the BNF converter

import AbsTTR
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: [a] -> Doc
  prtList = concatD . map (prt 0)

instance Print a => Print [a] where
  prt _ = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)



instance Print Id where
  prt _ (Id i) = doc (showString ( i))



instance Print Text where
  prt i e = case e of
   TJments jments -> prPrec i 0 (concatD [prt 0 jments])


instance Print Jment where
  prt i e = case e of
   JIn exp0 exp -> prPrec i 0 (concatD [prt 0 exp0 , doc (showString ":") , prt 0 exp])
   JEq exp0 exp -> prPrec i 0 (concatD [prt 0 exp0 , doc (showString "=") , prt 0 exp])
   JEqIn exp0 exp1 exp -> prPrec i 0 (concatD [prt 0 exp0 , doc (showString "=") , prt 0 exp1 , doc (showString ":") , prt 0 exp])
   JSub exp0 exp -> prPrec i 0 (concatD [prt 0 exp0 , doc (showString "<") , prt 0 exp])
   JSubIn exp0 exp1 exp -> prPrec i 0 (concatD [prt 0 exp0 , doc (showString "<") , prt 0 exp1 , doc (showString ":") , prt 0 exp])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , doc (showString ";") , prt 0 xs])

instance Print Exp where
  prt i e = case e of
   EId id -> prPrec i 5 (concatD [prt 0 id])
   EStr str -> prPrec i 5 (concatD [prt 0 str])
   EInt n -> prPrec i 5 (concatD [prt 0 n])
   EFloat d -> prPrec i 5 (concatD [prt 0 d])
   ERecTyp  -> prPrec i 5 (concatD [doc (showString "RecType")])
   ERecord fields -> prPrec i 5 (concatD [doc (showString "{") , prt 0 fields , doc (showString "}")])
   ESetTy exp -> prPrec i 5 (concatD [doc (showString "{") , prt 0 exp , doc (showString "}")])
   EListTy exp -> prPrec i 5 (concatD [doc (showString "[") , prt 0 exp , doc (showString "]")])
   ELamApp lambdas exp exps -> prPrec i 4 (concatD [doc (showString "<") , prt 0 lambdas , doc (showString ".") , prt 4 exp , doc (showString ",") , doc (showString "<") , prt 0 exps , doc (showString ">") , doc (showString ">")])
   EProj exp id -> prPrec i 4 (concatD [prt 4 exp , doc (showString ".") , prt 0 id])
   EApps exp exps -> prPrec i 4 (concatD [prt 4 exp , doc (showString "(") , prt 0 exps , doc (showString ")")])
   ECompl exp -> prPrec i 3 (concatD [doc (showString "~") , prt 3 exp])
   EJoin exp0 id exp -> prPrec i 3 (concatD [doc (showString "JOIN") , doc (showString "[") , prt 0 exp0 , doc (showString "]") , doc (showString "(") , prt 0 id , doc (showString "->") , prt 0 exp , doc (showString ")")])
   EUnion exp0 exp -> prPrec i 2 (concatD [prt 2 exp0 , doc (showString "||") , prt 3 exp])
   EInters exp0 exp -> prPrec i 2 (concatD [prt 2 exp0 , doc (showString "&&") , prt 3 exp])
   EMerge exp0 exp -> prPrec i 2 (concatD [prt 2 exp0 , doc (showString "&.&") , prt 3 exp])
   EConcat exp0 exp -> prPrec i 2 (concatD [prt 2 exp0 , doc (showString "^") , prt 3 exp])
   ELambs lambdas exp -> prPrec i 1 (concatD [prt 0 lambdas , doc (showString ".") , prt 1 exp])
   EProd id exp0 exp -> prPrec i 1 (concatD [doc (showString "(") , prt 0 id , doc (showString ":") , prt 0 exp0 , doc (showString ")") , doc (showString "->") , prt 1 exp])
   EFun exp0 exp -> prPrec i 1 (concatD [prt 2 exp0 , doc (showString "->") , prt 1 exp])
   ECFun exp0 exp -> prPrec i 1 (concatD [prt 2 exp0 , doc (showString "->_c") , prt 1 exp])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print Field where
  prt i e = case e of
   FIn id exp -> prPrec i 0 (concatD [prt 0 id , doc (showString ":") , prt 0 exp])
   FEq id exp -> prPrec i 0 (concatD [prt 0 id , doc (showString "=") , prt 0 exp])
   FEqIn id exp0 exp -> prPrec i 0 (concatD [prt 0 id , doc (showString "=") , prt 0 exp0 , doc (showString ":") , prt 0 exp])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ";") , prt 0 xs])

instance Print Lambda where
  prt i e = case e of
   LAbs id exp -> prPrec i 0 (concatD [doc (showString "\\") , prt 0 id , doc (showString ":") , prt 5 exp])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , prt 0 xs])


