# UDTranslate
------------------------------------
------- dependency configurations for UDTranslate.gf
------------------------------------

-- regular functions from the grammar

AdAP     : AdA -> AP -> AP ;   advmod head
AdAdv    : AdA -> Adv -> Adv ; advmod head
AdNum 	; advmod head
AdVVP    : AdV -> VP -> VP ;   advmod head
AdjCN    : AP -> CN -> CN ;    amod head
AdvAP    : AP -> Adv -> AP ;   head advmod
AdvCN 	; head nmod
AdvNP 	; head advmod
AdvNP 	; head nmod
AdvNP    : NP -> Adv -> NP ;   head advmod
AdvNP    : NP -> Adv -> NP ;   head advmod
AdvS ;	advmod head
AdvS  : Adv -> S -> S ; advmod head
AdvVP    : VP -> Adv -> VP ;   head advmod
AdvVP    : VP -> Adv -> VP ;   head nmod
----ApposCN ; 	head appos
ApposNP ;	head appos
CompAP   : AP -> Comp ;
CompAdv  : Adv -> Comp ;
CompIAdv : IAdv -> IComp ;
CompIP   : IP -> IComp ;
CompNP   : NP -> Comp ;
----ComparA ;	amod head
ComplSlash ; 	head dobj
----ComplSlashIP ; 	head dobj
ComplVA ; 	head xcomp
ComplVQ ;	head ccomp
ComplVS  : VS -> S -> VP ;     head ccomp

ComplVV  : VV -> VP -> VP ;    head xcomp
ComplVV  : VV -> VP -> VP ;    aux head
----CompoundAP ;	head amod
CompoundN  ;	compound head
----CountNP ; 	det head
DetCN    : Det -> CN -> NP ;   det head
DetNP    : Det -> NP ;
----ExistIPAdv 	head advmod
ExtAdvS ; 	advmod head
----MkVPS 	empty empty head
----PartNP 	nmod head
PositA   : A -> AP ;       
----PossNP 	; nmod head
PredSCVP ;	csubj head
PredVP   : NP -> VP -> Cl ;    nsubj head
PredVP   : NP -> VP -> Cl ;    nsubj:cop head
PredetNP : Predet -> NP -> NP ; det head
PredetNP : Predet -> NP -> NP ; det:predet head
PrefixPN : PN -> PN -> PN ; name head
PrepIP ; 	case head
PrepNP   : Prep -> NP -> Adv ; case head
QuestIAdv ; 	advmod head
QuestIComp ;	head nsubj
QuestIComp ;	head nsubj:cop
QuestSlash ; 	dobj head
QuestVP  : IP -> VP -> QCl ;  nsubj head
QuestVP  : IP -> VP -> QCl ;  nsubj:cop head
----RelCN ;	head acl
RelNP ;	head acl
RelS ; 	head advcl
RelSlash ; 	mark head
RelVP ;	mark head
SSubjS ;	head mark advcl
SentAP   : AP -> SC -> AP ; head acl
SentCN   : CN -> SC -> CN ; head acl
SlashV2a : V2 -> VPSlash ; 
Slash2V3 ; 	head iobj
Slash3V3 ;	head dobj
----SlashPrep ; 	head case
SlashV2A ; 	head xcomp
SlashV2Q ;	head ccomp
SlashV2S ;	head ccomp
SlashV2V ;	head xcomp
----SlashV2VNP ; 	head dobj xcomp
SlashVP ; 	nsubj head
StringCard  : String -> Card ;
StringPN    : String -> PN ;
StringPunct : String -> Punct ;
SubjS    : Subj -> S -> Adv ;  mark head
TopUtt   : Utt -> Top ;    
TopUttPunct : Utt -> Punct -> Top ; head punct
UseN     : N -> CN ;       
UsePN    : PN -> NP ;      
UsePron  : Pron -> NP ;    
UseV     : V -> VP ;       
UttAP    : AP -> Utt ;
UttAdv   : Adv -> Utt ;
UttInterj : Interj -> Utt ;
UttNP    : NP -> Utt ;
UttS     : S -> Utt ;      
----VPSlashPrep ; 	head case


-- helper functions

ComplV2_ : V2 -> NP -> VP ; head dobj
ComplV2_ : V2 -> NP -> VP ; head nmod
ComplV2_ v np = ComplSlash (SlashV2a v) np
ConjAdv_ : Conj -> Adv  -> Adv -> Adv ;  cc head conj
ConjAdv_ c x y = ConjAdv c (BaseAdv x y)
ConjAP_  : Conj -> AP -> AP -> AP ; cc head conj
ConjAP_ c x y = ConjAP c (BaseAP x y)
ConjAP3_  : AP -> Punct -> AP -> Conj -> AP -> AP ; head punct conj cc conj
ConjAP3_ x p y c z = ConjAP c (ConsAP x (BaseAP y z))
ConjNP_  : Conj -> NP -> NP -> NP ; cc head conj
ConjNP_ c x y = ConjNP c (BaseNP x y)
ConjNP3_  : NP -> Punct -> NP -> Conj -> NP -> NP ; head punct conj cc conj
ConjNP3_ x p y c z = ConjNP c (ConsNP x (BaseNP y z))
ConjRS_  : Conj -> RS  -> RS  -> RS ;  cc head conj
ConjS_   : Conj -> S  -> S  -> S ;  cc head conj
ConjS_ c x y = ConjS c (BaseS x y)
ConjS3_  : S -> Punct -> S -> Conj -> S -> S ; head punct conj cc conj
ConjS3_ x p y c z = ConjS c (ConsS x (BaseS y z))
ConjVPS_   : Conj -> VPS  -> VPS  -> VPS ;  cc head conj
ConjVPS_ c x y = ConjVPS c (BaseVPS x y)
ConjVPS3_  : VPS -> Punct -> VPS -> Conj -> VPS -> VPS ; head punct conj cc conj
ConjVPS3_ x p y c z = ConjVPS c (ConsVPS x (BaseVPS y z))
DetGenNP_ : NP -> CN -> NP ; nmod:poss head  Number=Sing
DetGenNP_ np cn = DetCN (DetQuant (GenNP np) NumSg) cn 
DetGenNPPl_ : NP -> CN -> NP ; nmod:poss head  Number=Plur
DetGenNPPl_ np cn = DetCN (DetQuant (GenNP np) NumPl) cn 
EmbedS_  : ThatMark_ -> S -> SC ;  mark head
EmbedS_ m s = EmbedS s
EmbedVP_ : InfMark_  -> VP -> SC ; mark head
EmbedVP_ m vp = EmbedVP vp
ExistNP_ : Cop_ -> Expl_ -> NP -> Cl ; head expl nsubj
ExistNP_ cop expl np = ExistNP np
MarkS_ : ThatMark_ -> S -> S ; mark head
MarkS_ m s = s
MarkVP_ : InfMark_ -> VP -> VP ; mark head
MarkVP_ m vp = vp
MkVPS_   : VP -> VPS ;  Tense=Pres
MkVPS_ vp = MkVPS (TTAnt TPres ASimul) PPos vp
NegCl_   : Cl -> Neg_ -> S ;  head  neg Tense=Pres
NegCl_ cl p = UseCl (TTAnt TPres ASimul) PNeg cl
NegNotenseCl_   : Cl -> Neg_ -> S ;  head neg -- ---- TODO: find tense from the copula
NegNotenseCl_ cl p = UseCl (TTAnt TPres ASimul) PNeg cl
NegPastCl_  : Cl -> Neg_ -> S ;  head  neg Tense=Past       
NegPastCl_ cl p = UseCl (TTAnt TPast ASimul) PNeg cl
NegPastQCl_  : QCl -> Neg_ -> QS ;  head  neg Tense=Past       
NegPastQCl_ cl p = UseQCl (TTAnt TPast ASimul) PNeg cl
NegPastRCl_  : RCl -> Neg_ -> RS ;  head  neg Tense=Past       
NegPastRCl_ cl p = UseRCl (TTAnt TPast ASimul) PNeg cl
NegQCl_   : QCl -> Neg_ -> QS ; head  neg Tense=Pres
NegQCl_ cl p = UseQCl (TTAnt TPres ASimul) PNeg cl
NegRCl_   : RCl -> Neg_ -> RS ; head  neg Tense=Pres
NegRCl_ cl p = UseRCl (TTAnt TPres ASimul) PNeg cl
PosCondCl_ : Cond_ -> Cl -> S ; aux head
PosCondCl_ cond cl = UseCl (TTAnt TCond ASimul) PPos cl
PosFutCl_ : Fut_ -> Cl -> S ; aux head
PosFutCl_ fut cl = UseCl (TTAnt TFut ASimul) PPos cl
PosPerfCl_ : Perf_ -> Cl -> S ; aux head
PosPerfCl_ perf cl = UseCl (TTAnt TPres AAnter) PPos cl
PosCl_   : Cl -> S ;  Tense=Pres
PosCl_ cl = UseCl (TTAnt TPres ASimul) PPos cl
PosNotenseCl_   : Cl -> S ;   -- ---- TODO: find tense from the copula
PosNotenseCl_ cl = UseCl (TTAnt TPres ASimul) PPos cl
PosNotenseQCl_   : QCl -> QS ;   -- ---- TODO: find tense from the copula
PosNotenseQCl_ cl = UseQCl (TTAnt TPres ASimul) PPos cl
PosPastCl_   : Cl -> S ;  Tense=Past       
PosPastCl_ cl = UseCl (TTAnt TPast ASimul) PPos cl
PosPastQCl_   : QCl -> QS ;  Tense=Past       
PosPastQCl_ cl = UseQCl (TTAnt TPast ASimul) PPos cl
PosPastRCl_   : RCl -> RS ;  Tense=Past
PosPastRCl_ cl = UseRCl (TTAnt TPast ASimul) PPos cl
PosQCl_   : QCl -> QS ;  Tense=Pres
PosQCl_ cl = UseQCl (TTAnt TPres ASimul) PPos cl
PosRCl_   : RCl -> RS ;  Tense=Pres
PosRCl_ cl = UseRCl (TTAnt TPres ASimul) PPos cl
PossCN_   : Pron -> CN -> NP ;   nmod:poss head   Number=Sing
PossCN_ pron cn = DetCN (DetQuant (PossPron pron) NumSg) cn
PossPlCN_ : Pron -> CN -> NP ;   nmod:poss head   Number=Plur
PossPlCN_ pron cn = DetCN (DetQuant (PossPron pron) NumPl) cn
PredPassAgentV2_ : NP -> AuxPass_ -> V2 -> NP -> Cl ; nsubjpass auxpass head nmod
PredPassAgentV2_ np aux v2 ag = PredVP np (PassAgentVPSlash (SlashV2a v2) ag)
PredPassV2_ : NP -> AuxPass_ -> V2 -> Cl ; nsubjpass auxpass head
PredPassV2_ np aux v2 = PredVP np (PassVPSlash (SlashV2a v2))
QuantCN_   : Quant -> CN -> NP ;   det head   Number=Sing
QuantCN_ qu cn = DetCN (DetQuant qu NumSg) cn
QuantPlCN_ : Quant -> CN -> NP ;   det head   Number=Plur
QuantPlCN_ qu cn = DetCN (DetQuant qu NumPl) cn
QuestIComp_ : Cop_ -> IComp -> NP -> QCl ;  cop head nsubj
QuestIComp_ : Cop_ -> IComp -> NP -> QCl ;  cop head nsubj:cop
QuestIComp_ v c np = QuestIComp c np
UseComp_ : Cop_ -> Comp -> VP ;  cop head
UseComp_ v c = UseComp c
UttImpVP_ : VP -> Utt ;  Mood=Imp
UttImpVP_ vp = UttImpSg PPos (ImpVP vp) 
UttNegImpVP_ : VP -> Neg_ -> Utt ; head neg  Mood=Imp
UttNegImpVP_ vp p = UttImpSg PNeg (ImpVP vp) 

-- backup construction functions

*  APBackup : AP -> Backup ;
*  AdvBackup : Adv -> Backup ;
*  ConjBackup : Conj -> Backup ;
*  DetBackup : Det -> Backup ;
*  InterjBackup : Interj -> Backup ;
*  NPBackup : NP -> Backup ;
*  OrdBackup : Ord -> Backup ;
*  PNBackup : PN -> Backup ;
*  PunctBackup : Punct -> Backup ;
*  SBackup : S -> Backup ;
*  SubjBackup : Subj -> Backup ;
*  SymbBackup : Symb -> Backup ;
*  UttBackup : Utt -> Backup ;


-- eliminated backup application functions
--- other backup application functions are built-in

BackupA c b = c -- BackupAP (PositA c) b
BackupCop_ c b = b --
BackupN c b = c -- BackupNP (MassNP (UseN c)) b


-------------------------------------
-- categories
--------------------------------------
A     ADJ
AdA   ADV
AdV   ADV
Adv   ADV
Card  NUM NumType=Card
Conj  CONJ
Det   DET
IAdv  ADV
Interj  INTJ
IP    PRON PronType=Int
IQuant DET PronType=Int
N     NOUN
NP    PRON PronType=Dem
PN    PROPN
Prep   ADP
Pron  PRON PronType=Prs
Punct  PUNCT
Quant DET
RP    PRON PronType=Rel
String  PROPN SYM PUNCT
String  NUM NumType=Card
Subj  SCONJ
V     VERB
V2    VERB
V2V   VERB
VA    VERB
VS    VERB
VV    VERB AUX

