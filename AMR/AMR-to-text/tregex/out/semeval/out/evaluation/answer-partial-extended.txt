SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.royal_A L.person_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "Spain"))))) (mkVP L.holiday_V2 (mkNP (P.mkPN "Majorca")))))) fullStopPunct)
TXT: [unknown qualified constant L.holiday_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "AFP")) (mkVP (mkVP (mkVP L.byline_V) (dayMonthYearAdv (intMonthday (ss "2")) august_Month (intYear (ss "2009")))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Madrid"))))))) fullStopPunct)
TXT: [unknown qualified constant L.byline_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (mkVP L.travel_V) (weekdayPunctualAdv saturday_Weekday)) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN (mkCN L.residence_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Majorca")))))))))) fullStopPunct)
TXT: [it travels on Saturday to a residence in Majorca .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.contrast_V2) (E.PurposeVP (mkVP say-01))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (P.mkPN "Juan Carlos")) (mkVP L.say_VS (mkS (mkCl (mkVP L.feel_VS (mkS S.and_Conj (mkListS (mkS (mkCl (passiveVP L.happy_V2))) (mkS (mkCl S.it_NP (mkAP L.safe_A)))))))))))))))) fullStopPunct)
TXT: [constant not found: say]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.he_NP (mkVP (mkVP (mkVP (mkVP L.tell_VS (mkS (mkCl S.we_NP (passiveVP L.obligate_V2)))) (weekdayPunctualAdv saturday_Weekday)) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.report_V))))))) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.airport_N))))))) fullStopPunct)
TXT: [he tells on Saturday to a person that reports in an airport that we are obligated .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.royal_A L.couple_N)) (mkVP (mkVP (P.mkAdV "then") (mkVP (mkVP L.travel_V) (E.PurposeVP (mkVP L.start_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.royal_A L.family_N)) (mkVP L.holiday_V))))))) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "Marivent Palace"))))))) fullStopPunct)
TXT: [unknown qualified constant L.start_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkNum (mkDigits "2")) (mkCN L.policemen_N)) (mkVP (passiveVP L.kill_V2) (weekdayPunctualAdv thursday_Weekday))))) fullStopPunct)
TXT: [unknown qualified constant L.policemen_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (E.CompoundCN L.car_N L.massive_A L.bomb_N)) (passiveVP L.explode_V2)))) fullStopPunct)
TXT: [missing record fields: s, g type of massive_A]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.authority_N)) (mkVP L.blame_V2 (mkNP (P.mkPN "ETA")))))) fullStopPunct)
TXT: [an authority blames ETA .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.police_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "Spain"))))) (mkVP (P.mkAdV "past") (mkVP L.foil_VV (mkVP attempt-01) (mkNP (P.mkPN "ETA"))))))) fullStopPunct)
TXT: [unknown qualified constant L.foil_VV]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (E.CompoundCN L.region_N L.newspaper_N)) (mkVP L.report_VS (mkS (mkCl (mkNP (P.mkPN "ETA")) (mkVP L.plot_VS (mkS (mkCl (mkNP (S.or_Conj (mkRS (mkRCl S.which_RP (mkVP carry-01 (have-org-role-91 (P.mkN2 L.king_N L.of_Prep)))))) (mkListNP (mkNP S.a_Quant (mkCN L.helicopter_N)) (mkNP S.a_Quant (mkCN L.airplane_N)))) (mkVP (passiveVP L.blow_up_V2) (S.mkAdv L.PPT_Prep (mkNP S.a_Quant (mkCN L.missile_N))))))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (E.CompoundCN L.region_N L.newspaper_N)) (mkVP L.report_VS (mkS (mkCl (mkNP (P.mkPN "ETA")) (mkVP L.plot_VS (mkS (mkCl (mkNP (S.or_Conj (mkRS (mkRCl S.which_RP (mkVP carry-01 (have-org-role-91 (P.mkN2 L.king_N L.of_Prep)))))) (mkListNP (mkNP S.a_Quant (mkCN L.helicopter_N)) (mkNP S.a_Quant (mkCN L.airplane_N)))) (mkVP (passiveVP L.blow_up_V2) (S.mkAdv L.PPT_Prep (mkNP S.a_Quant (mkCN L.missile_N))))))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "ETA")) (mkVP (passiveVP L.blame_V2) (E.PurposeVP (mkVP (mkVP L.die_V2 (mkNP S.a_Quant (mkNum (mkDigits "828")) (mkCN L.person_N))) (S.mkAdv S.when_Subj (mkS (mkCl (mkVP L.campaign_VS (mkS negativePol (mkCl (mkNP S.a_Quant (mkCN (E.CompoundCN L.region_N L.homeland_N) (mkRS (mkRCl S.which_RP (mkVP L.encompass_V2 (mkNP S.a_Quant (mkCN (mkCN L.part_N) (S.mkAdv L.part_Prep (mkNP S.and_Conj (mkListNP (mkNP S.the_Quant (mkCN (mkCN L.north_N) (S.mkAdv L.part_Prep (mkNP (P.mkPN "Spain"))))) (mkNP S.a_Quant (mkCN (mkCN L.southwest_N) (S.mkAdv L.part_Prep (mkNP (P.mkPN "France"))))))))))))))) (mkVP L.depend_V))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.die_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (ss "historic") (mkNP (P.mkPN "Sotomayor"))) (mkVP L.face_VS (mkS (mkCl (mkVP (P.mkAdV "final") (mkVP L.vote_V)))))))) fullStopPunct)
TXT: [unknown qualified constant L.face_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "AFP")) (mkVP (mkVP (mkVP L.byline_V) (dayMonthYearAdv (intMonthday (ss "5")) august_Month (intYear (ss "2009")))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Washington"))))))) fullStopPunct)
TXT: [unknown qualified constant L.byline_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.expect_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (P.mkPN "Sonia Sotomayor")) (mkVP (mkVP L.win_VS (mkS (mkCl (mkNP (P.mkPN "Senate")) (mkVP L.confirm_V2 (mkNP S.a_Quant (E.CompoundCN L.group_N (L.justice_N (S.mkOrd (mkDigits "1"))))))))) (weekdayPunctualAdv thursday_Weekday))))))))) fullStopPunct)
TXT: [unknown qualified constant L.win_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (have-org-role-91 (mkNP S.a_Quant (mkCN L.court_N))) (mkVP (passiveVP L.become_V2) (S.mkAdv L.PRD_Prep (mkNP S.a_Quant (mkCN (mkCN (L.woman_N (S.mkOrd (mkDigits "3")))) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.sit_V2) (S.mkAdv L.LOC_Prep (mkNP S.a_Quant (mkCN (mkCN (mkCN L.bench_N) (mkRS (mkRCl S.which_RP (passiveVP L.call_upon_V2)))) (mkRS (mkRCl S.which_RP (mkVP L.serve_VS (mkS (mkCl (mkVP (P.mkAdV "final") (mkVP L.arbitrate_V2 (mkNP (P.mkPN "US Constitution")))))))))))))))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (have-org-role-91 (mkNP S.a_Quant (mkCN L.court_N))) (mkVP (passiveVP L.become_V2) (S.mkAdv L.PRD_Prep (mkNP S.a_Quant (mkCN (mkCN (L.woman_N (S.mkOrd (mkDigits "3")))) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.sit_V2) (S.mkAdv L.LOC_Prep (mkNP S.a_Quant (mkCN (mkCN (mkCN L.bench_N) (mkRS (mkRCl S.which_RP (passiveVP L.call_upon_V2)))) (mkRS (mkRCl S.which_RP (mkVP L.serve_VS (mkS (mkCl (mkVP (P.mkAdV "final") (mkVP L.arbitrate_V2 (mkNP (P.mkPN "US Constitution")))))))))))))))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.mean_V2) (E.PurposeVP (mkVP (P.mkAdV "ever") (mkVP L.doubt_V2 (mkNP S.a_Quant (mkCN L.outcome_N)))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.support_V)))))))) fullStopPunct)
TXT: [unknown qualified constant L.support_V]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (have-org-role-91 (P.mkN2 L.senator_N L.of_Prep)) (mkVP L.aim_VV (mkVP (comment-01 (mkNP (P.mkPN "Sotomayor"))))))) (mkS (mkCl (mkVP L.declare_VS (mkS (mkCl (mkVP L.consider_VS (mkS (mkCl (mkAP L.racist_A)))))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (have-org-role-91 (P.mkN2 L.senator_N L.of_Prep)) (mkVP L.aim_VV (mkVP (comment-01 (mkNP (P.mkPN "Sotomayor"))))))) (mkS (mkCl (mkVP L.declare_VS (mkS (mkCl (mkVP L.consider_VS (mkS (mkCl (mkAP L.racist_A)))))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.lead_V2 (mkNP S.a_Quant (mkCN (E.CompoundCN L.group_N L.group_N) (mkRS (mkRCl S.which_RP (mkAP L.major_A)))))))))) (have-org-role-91 (P.mkN2 L.senator_N L.of_Prep)) (mkVP (passiveVP L.join_V2) (E.PurposeVP (mkVP warn-01)))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.lead_V2 (mkNP S.a_Quant (mkCN (E.CompoundCN L.group_N L.group_N) (mkRS (mkRCl S.which_RP (mkAP L.major_A)))))))))) (have-org-role-91 (P.mkN2 L.senator_N L.of_Prep)) (mkVP (passiveVP L.join_V2) (E.PurposeVP (mkVP warn-01)))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Menendez")) (mkVP (mkVP L.say_VS (mkS (mkCl (mkVP L.believe_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.price_N)) (have-org-role-91 (mkNP (P.mkPN "Republican"))) (passiveVP L.pay_V2))))))) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN (E.CompoundCN L.press_N L.conference_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "US Capitol")))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Menendez")) (mkVP (mkVP L.say_VS (mkS (mkCl (mkVP L.believe_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.price_N)) (have-org-role-91 (mkNP (P.mkPN "Republican"))) (passiveVP L.pay_V2))))))) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN (E.CompoundCN L.press_N L.conference_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "US Capitol")))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (E.CompoundCN L.state_N L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.legislate_V))))) (mkVP L.say_VS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (passiveVP L.include_V2))))) (mkVP L.vote_VS (mkS (mkCl (mkVP L.confirm_V2 (mkNP (P.mkPN "Sotomayor")))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.vote_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (have-org-role-91 (mkNP (P.mkPN "Republican"))) (mkVP (passiveVP L.worry_V2) (S.mkAdv S.that_Subj (mkS (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl (mkVP (mkVP (passiveVP L.hurt_V2) (E.PurposeVP (mkVP L.oppose_V2 (mkNP (P.mkPN "Sotomayor"))))) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN (mkCN (E.CompoundCN L.group_N L.person_N) (mkRS (mkRCl S.which_RP (mkVP (P.mkAdV "decisive") (mkVP L.play_VS (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP (mkVP L.elect_V) (yearAdv (intYear (ss "2010")))))) (mkS (mkCl (have-org-role-91 (P.mkN2 L.president_N L.of_Prep)) (mkVP (passiveVP L.vote_V2) (yearAdv (intYear (ss "2012"))))))))))))) (mkRS (mkRCl S.which_RP (mkVP L.vote_V))))))))))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (have-org-role-91 (mkNP (P.mkPN "Republican"))) (mkVP (passiveVP L.worry_V2) (S.mkAdv S.that_Subj (mkS (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl (mkVP (mkVP (passiveVP L.hurt_V2) (E.PurposeVP (mkVP L.oppose_V2 (mkNP (P.mkPN "Sotomayor"))))) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN (mkCN (E.CompoundCN L.group_N L.person_N) (mkRS (mkRCl S.which_RP (mkVP (P.mkAdV "decisive") (mkVP L.play_VS (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP (mkVP L.elect_V) (yearAdv (intYear (ss "2010")))))) (mkS (mkCl (have-org-role-91 (P.mkN2 L.president_N L.of_Prep)) (mkVP (passiveVP L.vote_V2) (yearAdv (intYear (ss "2012"))))))))))))) (mkRS (mkRCl S.which_RP (mkVP L.vote_V))))))))))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.road_N)) (mkVP (mkVP (mkVP (passiveVP L.come_V2) (S.mkAdv S.when_Subj (mkS (mkCl (mkVP L.elect_V))))) (S.mkAdv L.MNR_Prep (mkNP S.a_Quant (E.CompoundCN L.group_N L.community_N)))) (P.mkAdv "part"))))) fullStopPunct)
TXT: [unknown qualified constant L.come_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.we_NP (mkVP L.need_VS (mkS (mkCl (mkVP L.know_V2 (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.support_V))))) (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS negativePol (mkRCl S.which_RP (mkVP L.support_V)))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.support_V]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl (mkNP S.a_Quant (mkCN (E.CompoundCN L.group_N L.person_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "America"))))) (mkVP (P.mkAdV "bloc") (mkVP L.vote_V2 (mkNP (P.mkPN "Obama"))))))) fullStopPunct)
TXT: [a group person from America doesn't bloc vote Obama .]

SNT: 
AST: (a and)
TXT: [constant not found: a]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.contrast_V2) (S.mkAdv S.that_Subj (mkS (mkCl S.it_NP (mkAP (mkAP (L.keen_A (mkVP try-01) (S.mkAdv S.because_Subj (mkS (mkCl (mkNP S.a_Quant (E.CompoundCN L.group_N L.group_N)) (mkNP S.a_Quant (mkCN (mkCN (mkCN L.minority_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "US")))) (mkRS (mkRCl S.which_RP (passiveVP L.grow_V2)))))))))) (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.legislate_V))))))))))))))) fullStopPunct)
TXT: [constant not found: try]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP (P.mkPN "Janet Murguia")) (mkVP L.say_VS (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.a_Quant (E.CompoundCN L.group_N L.diverse_A L.population_N)) (mkVP (passiveVP L.galvanize_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (P.mkPN "Sotomayor")) (passiveVP L.nominate_V2))))))) (mkS (mkCl (mkVP L.unite_V)))))))) (mkS (mkCl (mkVP L.caution_VS (mkS (mkCl (mkVP L.vote_V))))))))) fullStopPunct)
TXT: [missing record fields: s, g type of diverse_A]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP L.think_V2 (mkNP (P.mkPN "Republican Party")))))) fullStopPunct)
TXT: [I think Republican Party .]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP (passiveVP L.matter_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.vote_V))))))) (mkS (mkCl (passiveVP L.remember_V2)))))) fullStopPunct)
TXT: [unknown qualified constant L.matter_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.senator_N L.of_Prep)) (mkVP (passiveVP L.announce_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.vote_VS (mkS (mkCl (mkVP L.confirm_V))))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.senator_N L.of_Prep)) (mkVP (passiveVP L.announce_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.vote_VS (mkS (mkCl (mkVP L.confirm_V))))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN (mkCN L.and_N) (mkRS (mkRCl S.which_RP S.he_NP L.say_V2))))))
TXT: [unknown qualified constant L.and_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP L.urge_VV (mkVP do-02) (mkNP S.a_Quant (mkCN L.colleague_N)))))) fullStopPunct)
TXT: [constant not found: do]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.senator_N L.of_Prep) (S.mkOrd (mkDigits "2"))) (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (mkVP (passiveVP L.contrast_V2) (E.PurposeVP (mkVP L.obligate_VV (mkVP evaluate-01) (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.legislate_V)))))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (mkVP (passiveVP L.recommend_V2) (S.mkAdv L.GOL_Prep (mkNP S.every_Det (mkCN (mkCN L.person_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "America"))))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.pride_VV (mkVP L.nominate_V2 (mkNP S.a_Quant (E.CompoundCN L.group_N L.woman_N))))))))))))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.senator_N L.of_Prep) (S.mkOrd (mkDigits "2"))) (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (mkVP (passiveVP L.contrast_V2) (E.PurposeVP (mkVP L.obligate_VV (mkVP evaluate-01) (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.legislate_V)))))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (mkVP (passiveVP L.recommend_V2) (S.mkAdv L.GOL_Prep (mkNP S.every_Det (mkCN (mkCN L.person_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "America"))))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.pride_VV (mkVP L.nominate_V2 (mkNP S.a_Quant (E.CompoundCN L.group_N L.woman_N))))))))))))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (have-org-role-91 (mkNP (P.mkPN "Republican"))) (mkVP (mkVP (P.mkAdV "also") (passiveVP L.underline_V2)) (S.mkAdv S.that_Subj (mkS (mkCl (have-org-role-91 (mkNP (P.mkPN "Democratic"))) (mkVP (passiveVP L.block_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (passiveVP L.vote_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (passiveVP L.confirm_V2) (S.mkAdv L.GOL_Prep (mkNP (ss "group") (mkNP (P.mkPN "Miguel Estrada")))))))))))))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (have-org-role-91 (mkNP (P.mkPN "Republican"))) (mkVP (mkVP (P.mkAdV "also") (passiveVP L.underline_V2)) (S.mkAdv S.that_Subj (mkS (mkCl (have-org-role-91 (mkNP (P.mkPN "Democratic"))) (mkVP (passiveVP L.block_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (passiveVP L.vote_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (passiveVP L.confirm_V2) (S.mkAdv L.GOL_Prep (mkNP (ss "group") (mkNP (P.mkPN "Miguel Estrada")))))))))))))))))))) fullStopPunct)]

SNT: 
AST: NULL
TXT: [constant not found: NULL]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS negativePol (mkCl (mkNP S.and_Conj (mkListNP (mkNP (P.mkPN "Ted Kennedy")) (mkNP (P.mkPN "Robert Byrd")))) (mkVP (passiveVP L.show_up_V2) (S.mkAdv S.because_Subj (mkNP S.a_Quant (E.CompoundCN L.health_N L.reason_N)))))))))) fullStopPunct)
TXT: [no overload instance of mkAdv]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (mkVP (P.mkAdV "meanwhile") (passiveVP L.find_V2)) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.favor_VS (mkS (mkCl (mkNP (P.mkPN "Sotomayor")) (passiveVP L.approve_V2)))))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (P.mkPN "CNN")) (mkVP L.poll_V)))))))) fullStopPunct)
TXT: [unknown qualified constant L.favor_VS]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP L.oppose_VS (mkS (mkCl S.she_NP (passiveVP L.appoint_V2)))))) (mkS negativePol (mkCl (mkVP L.have_V2 (mkNP S.a_Quant (mkCN (mkCN L.thing_N) (mkRS (mkRCl S.which_RP (passiveVP L.opine_V2))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.oppose_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.ambassador_N)) (mkVP (mkVP L.visit_V2 (mkNP S.a_Quant (mkCN (mkCN (mkCN L.person_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "France")))) (mkRS (mkRCl S.which_RP (mkVP L.research_V)))))) (S.mkAdv L.in_Prep (mkNP S.a_Quant (E.CompoundCN L.city_N L.prison_N))))))) fullStopPunct)
TXT: [an ambassador visits a person from France that researches in a city prison .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "AFP")) (mkVP (mkVP (mkVP L.byline_V) (dayMonthYearAdv (intMonthday (ss "14")) august_Month (intYear (ss "2009")))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Paris"))))))) fullStopPunct)
TXT: [unknown qualified constant L.byline_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.ministry_N) (S.mkAdv L.about_Prep (mkNP S.a_Quant (mkCN L.foreign_N))))) (mkVP (mkVP L.say_VS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.ambassador_N) (S.mkAdv L.about_Prep (mkNP (P.mkPN "Iran"))))) (mkVP (mkVP (mkVP L.visit_V2 (mkNP S.a_Quant (E.CompoundCN L.academia_N L.young_A L.person_N))) (weekdayPunctualAdv friday_Weekday)) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN (mkCN L.prison_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Tehran")))))))))) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.here_N))))))) fullStopPunct)
TXT: [unknown qualified constant L.foreign_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.spokesman_N L.of_Prep)) (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS (mkCl S.he_NP (mkVP L.explain_VS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.authority_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "France"))))) (mkVP (mkVP L.do_VS (mkS (mkCl S.it_NP (mkAP L.all_AdA (mkAP L.possible_A))))) (E.PurposeVP (mkVP L.obtain_VS (mkS (mkCl S.she_NP (passiveVP L.release_V2)))))))))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.spokesman_N L.of_Prep)) (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS (mkCl S.he_NP (mkVP L.explain_VS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.authority_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "France"))))) (mkVP (mkVP L.do_VS (mkS (mkCl S.it_NP (mkAP L.all_AdA (mkAP L.possible_A))))) (E.PurposeVP (mkVP L.obtain_VS (mkS (mkCl S.she_NP (passiveVP L.release_V2)))))))))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.ambassador_N L.of_Prep) (mkRS (mkRCl S.which_RP (mkNP S.a_Quant (mkCN (L.trip_N (mkNP (P.mkPN "Evin")) (S.mkOrd (mkDigits "2")) (E.PurposeVP (mkVP L.see_V2 (mkNP (P.mkPN "Clotide Reiss")))))))))) (mkVP L.visit_V)))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.ambassador_N L.of_Prep) (mkRS (mkRCl S.which_RP (mkNP S.a_Quant (mkCN (L.trip_N (mkNP (P.mkPN "Evin")) (S.mkOrd (mkDigits "2")) (E.PurposeVP (mkVP L.see_V2 (mkNP (P.mkPN "Clotide Reiss")))))))))) (mkVP L.visit_V)))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.contrast_V2) (E.PurposeVP (mkVP L.give_V2 (mkNP S.a_Quant (mkCN L.detail_N))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.office_N)) (mkVP L.say_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.person_N)) (mkVP (passiveVP L.meet_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (mkVP L.lead_V) (S.mkAdv L.from_Prep (mkNP (P.mkPN "France")))))))))))))))))) fullStopPunct)
TXT: [it is contrasted to give a detail that an office says that a person is met that it leads from France .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Remi Reiss")) (mkVP (mkVP L.say_VS (mkS (mkCl S.it_NP (mkAP (mkAP (L.possible_A (E.PurposeVP (mkVP (mkVP (mkVP L.live_V) (S.mkAdv S.when_Subj (mkS (mkCl (mkVP (passiveVP L.await_V2) (S.mkAdv L.PPT_Prep (mkNP S.a_Quant (mkCN L.verdict_N)))))))) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN (mkCN L.embassy_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "France")))))))))) (mkS (mkCl (mkNP S.a_Quant (mkCN L.person_N)) (mkNP (mkCN (P.mkN2 L.official_N L.of_Prep) (mkNP (P.mkPN "Iran")))) (passiveVP L.release_V2))))))) (weekdayPunctualAdv thursday_Weekday))))) fullStopPunct)
TXT: [A function type is expected for possible_A instead of type A]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.she_NP (mkVP (passiveVP L.accuse_V2) (S.mkAdv S.because_Subj (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP L.attend_VS (mkS (mkCl (mkVP (P.mkAdV "street") (mkVP L.protest_V))))))) (mkS (mkCl (mkVP (mkVP L.email_V2 (mkNP S.a_Quant (mkCN L.picture_N))) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN L.person_N))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.attend_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "France")) (mkVP (P.mkAdV "diplomacy") (mkVP L.prioritize_VS (mkS (mkCl (mkVP L.secure_VS (mkS (mkCl (mkNP (P.mkPN "Reiss")) (passiveVP L.release_V2))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.prioritize_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (passiveVP L.ail_V2)))) (mkRS (mkRCl S.which_RP (mkVP (mkVP L.bomb_V) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Lockerbie")))))))) (mkVP L.drop_VS (mkS (mkCl (mkVP L.appeal_V))))))) fullStopPunct)
TXT: [unknown qualified constant L.drop_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "AFP")) (mkVP (mkVP (mkVP L.byline_V) (dayMonthYearAdv (intMonthday (ss "18")) august_Month (intYear (ss "2009")))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Edinburgh"))))))) fullStopPunct)
TXT: [unknown qualified constant L.byline_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Abdelbaset Ali Mohmet al-Megrahi")) (mkVP (mkVP L.drop_VS (mkS (mkCl (mkVP L.appeal_VS (mkS (mkCl (passiveVP L.convict_V2))))))) (weekdayPunctualAdv tuesday_Weekday))))) fullStopPunct)
TXT: [unknown qualified constant L.drop_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.option_N)) (mkNP (mkCN (mkCN (P.mkN2 (L.secretary_N (S.mkAdv L.about_Prep (mkNP (mkCN L.justice_N)))) L.of_Prep) (mkNP (P.mkPN "Scotland"))) (mkNP (P.mkPN "Kenny MacAskill")))) (passiveVP L.mull_V2)))) fullStopPunct)
TXT: [A function type is expected for secretary_N instead of type N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "White House")) (mkVP (mkVP L.say_VS (mkS (mkCl (mkVP L.recommend_VS (mkS (mkCl (mkNP (P.mkPN "Megrahi")) (mkVP (passiveVP L.remain_V2) (S.mkAdv L.PRD_Prep (mkNP S.a_Quant (mkCN L.jail_N)))))))))) (weekdayPunctualAdv tuesday_Weekday))))) fullStopPunct)
TXT: [White House says on Tuesday that it recommends that Megrahi is remained a jail .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (mkCN (mkCN (P.mkN2 L.spokesman_N L.of_Prep) (mkNP (P.mkPN "White House"))) (mkNP (P.mkPN "Robert Gibbs")))) (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.this_Det (mkCN (mkCN L.organization_N) (mkRS (mkRCl S.which_RP (mkVP L.administrate_V))))) (mkVP L.policy_VS (mkS (mkCl (mkVP L.recommend_VS (mkS (mkCl (mkNP S.this_Det (mkCN L.individual_N)) (mkVP L.serve_V2 (mkNP S.a_Quant (mkCN L.term_N)))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.administrate_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkNum (mkDigits "1")) (mkCN (mkCN L.big_A L.obstacle_N) (mkRS (mkRCl S.which_RP (mkVP L.prevent_VS (mkS (mkCl S.he_NP (mkVP (passiveVP L.return_V2) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "Libya"))))))))))) (mkVP (passiveVP L.remove_V2) (weekdayPunctualAdv tuesday_Weekday))))) fullStopPunct)
TXT: [unknown qualified constant L.prevent_VS]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.a_Quant (mkCN L.person_N)) (mkVP (mkVP L.tell_VS (mkS (mkCl S.it_NP (mkAP L.very_AdA (mkAP L.weak_A))))) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN L.court_N)))))) (mkS (mkCl (mkVP L.add_VS (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP L.suffer_V2 (mkNP S.a_Quant (mkCN L.pain_N))))) (mkS (mkCl (passiveVP L.distress_V2))))))))))) fullStopPunct)
TXT: [a person tells to a court that it is very weak and it adds that it suffers a pain and it is distressed .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (ss "lawyer") (mkNP (P.mkPN "Maggie Scott"))) (mkVP L.say_VS (mkS (mkCl (mkVP (P.mkAdV "absolute") (mkVP L.prioritize_VS (mkS (mkCl S.he_NP (passiveVP L.die_V2))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.prioritize_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkS S.and_Conj (mkListS (mkS (mkCl S.it_NP (mkAP (mkAP (L.possible_A (S.mkAdv S.when_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.legal_A (mkCN L.involve_A (mkCN L.matter_N)))) (mkAP L.outstanding_A)))))) (mkS (mkCl (mkNP (P.mkPN "Megrahi")) (mkVP (mkVP (P.mkAdV "only") (passiveVP L.send_V2)) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN L.home_N))))))))) (mkS (mkCl (mkNP S.a_Quant (mkCN L.authority_N)) (mkVP (P.mkAdV "still") (mkVP L.appeal_VS (mkS (mkCl (mkS (mkCl (passiveVP L.sentence_V2))) (mkNP S.a_Quant (mkCN L.lenience_N)))))))))) (passiveVP L.contrast_V2)))) fullStopPunct)
TXT: [unknown qualified constant L.involve_A]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.expect_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.decide_V)))))))) fullStopPunct)
TXT: [it is expected that it decides .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (mkCN (mkCN (P.mkN2 (L.professor_N (S.mkAdv L.about_Prep (mkNP (mkCN L.law_N)))) L.of_Prep) (mkNP (P.mkPN "Edinburgh University"))) (mkNP (P.mkPN "Robert Black")))) (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkNum (mkDigits "1")) (mkCN (mkCN L.logjam_N) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.road_N))))) (mkVP (passiveVP L.remove_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (P.mkAdV "today") (mkVP L.decide_V))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.logjam_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP L.another_Det (mkCN (mkCN L.logjam_N) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.mean_V2) (E.PurposeVP (mkVP (appeal-01 (mkNP (P.mkPN "Crown")))))))))) (passiveVP L.remain_V2)))) fullStopPunct)
TXT: [unknown qualified constant L.logjam_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Black")) (mkVP L.note_VS (mkS negativePol (mkCl (mkVP (mkVP (passiveVP L.bar_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (P.mkPN "MacAskill")) (mkVP L.grant_VS (mkS (mkCl (mkNP (P.mkPN "Megrahi")) (mkVP (P.mkAdV "compassion") (passiveVP L.release_V2))))))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.appeal_V))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.grant_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.suggest_V2) (S.mkAdv S.that_Subj (mkS (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl (mkNP (P.mkPN "Megrahi")) (passiveVP L.free_V2)))))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (mkCN L.media_N)) (mkVP L.report_V)))))))) fullStopPunct)
TXT: [it is suggested that it is possible that Megrahi is freed that media reports .]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP (mkCN (P.mkN2 L.minister_N L.of_Prep) (mkNP (P.mkPN "Scotland")))) (mkVP L.meet_V))) (mkS (mkCl (mkVP (mkVP L.discuss_VS (mkS (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl (mkVP (mkVP L.grant_VS (mkS (mkCl S.it_NP (mkAP (mkAP L.free_A) (mkS (mkCl (mkNP (P.mkPN "Megrahi")))))))) (S.mkAdv S.because_Subj (mkS (mkCl (mkVP (mkVP L.ground_V) (S.mkAdv L.MNR_Prep (mkNP (mkCN L.compassion_N)))))))))))))) (S.mkAdv S.when_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN (L.hearing_N (weekdayPunctualAdv tuesday_Weekday))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.grant_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (mkCN (P.mkN2 L.spokeswoman_N L.of_Prep) (mkNP S.a_Quant (mkCN (mkCN L.organization_N) (mkRS (mkRCl S.which_RP (mkVP L.govern_V))))))) (mkVP (mkVP (P.mkAdV "afterwards") (passiveVP L.say_V2)) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (P.mkPN "MacAskill")) (mkVP (mkVP (P.mkAdV "brief") (mkVP (mkVP L.update_V2 (mkNP S.a_Quant (mkCN L.colleague_N))) (E.PurposeVP (mkVP (P.mkAdV "simple") (mkVP L.confirm_VS (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP L.listen_V))) (mkListS (mkS (mkCl (mkVP (mkVP L.receive_V2 (mkNP S.a_Quant (mkCN L.full_A (mkCN L.material_N)))) (weekdayPunctualAdv friday_Weekday)))) (mkS (mkCl (mkVP (mkVP L.receive_VS (mkS (mkCl (mkVP L.represent_V)))) (S.mkAdv L.DIR_Prep (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (passiveVP L.interest_V2))))))))))))))))) (S.mkAdv L.PPT_Prep (mkNP S.a_Quant (mkCN L.situation_N))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.receive_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.she_NP (mkVP L.add_VS (mkS (mkCl S.he_NP (mkVP L.decide_V))))))) fullStopPunct)
TXT: [she adds that he decides .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (mkCN (mkCN (P.mkN2 (L.minister_N (S.mkOrd (mkDigits "1"))) L.of_Prep) (mkNP (P.mkPN "Scotland"))) (mkNP (P.mkPN "Alex Salmond")))) (mkVP (passiveVP L.insist_V2) (S.mkAdv S.that_Subj (mkS negativePol (mkCl (mkNP (mkCN (mkCN L.politics_N) (S.mkAdv L.about_Prep (mkNP (mkCN L.international_A L.power_N))))) (mkVP L.influence_VS (mkS (mkCl (mkVP (mkVP L.decide_V) (S.mkAdv L.VSP_Prep (mkNP S.a_Quant (mkCN (mkCN L.fate_N) (S.mkAdv S.possess_Prep (mkNP (P.mkPN "Megrahi"))))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.influence_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "MacAskill")) (have-org-role-91 (P.mkN2 (L.secretary_N (S.mkAdv L.about_Prep (mkNP S.a_Quant (mkCN L.foreign_N)))) L.of_Prep)) (mkVP (P.mkAdV "weekend") (mkVP (passiveVP L.call_V2) (E.PurposeVP (mkVP L.press_V))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "MacAskill")) (have-org-role-91 (P.mkN2 (L.secretary_N (S.mkAdv L.about_Prep (mkNP S.a_Quant (mkCN L.foreign_N)))) L.of_Prep)) (mkVP (P.mkAdV "weekend") (mkVP (passiveVP L.call_V2) (E.PurposeVP (mkVP L.press_V))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.letter_N) (mkRS (mkRCl S.which_RP (mkVP L.demand_VS (mkS (mkCl S.he_NP (mkVP L.complete_VS (mkS (mkCl (passiveVP L.sentence_V2))))))))))) (mkVP L.underline_VS (mkS (mkCl (mkNP (P.mkPN "US")) (mkVP L.pressure_V))))))) fullStopPunct)
TXT: [unknown qualified constant L.complete_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.person_N)) (mkVP (mkVP L.say_VS (mkS (mkCl (mkVP L.believe_VS (mkS (mkCl (mkVP (mkVP (passiveVP L.help_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (passiveVP L.speed_up_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.decide_V))))))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (passiveVP L.drop_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.appeal_V))))))))))))))) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.court_N))))))) fullStopPunct)
TXT: [a person says in a court that it believes that it is helped that it is speeded up that it decides that it is dropped that it appeals .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.contrast_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.hope_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.fresh_A (mkCN (mkCN L.insight_N) (mkRS (mkRCl S.which_RP (mkAP (mkAP L.include_A) (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.instigate_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.crime_N))))))))))))))))) (mkVP (passiveVP L.unearth_V2) (S.mkAdv S.that_Subj (mkS (mkCl S.he_NP (mkVP L.appeal_V))))))))))) (mkRS (mkRCl S.which_RP (mkVP L.campaign_V))))) (passiveVP L.disappoint_V2)))))))) fullStopPunct)
TXT: [unknown qualified constant L.include_A]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "John Mosey")) (mkVP L.say_V)))) fullStopPunct)
TXT: [John Mosey says .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "PLO")) (mkVP (mkVP L.pick_V2 (mkNP S.a_Quant (mkCN (mkCN L.new_A (mkCN L.person_N)) (mkRS (mkRCl S.which_RP (mkVP L.lead_V)))))) (S.mkAdv S.when_Subj (mkS (mkCl (mkVP (P.mkAdV "landmark") (mkVP L.meet_V))))))))) fullStopPunct)
TXT: [PLO picks a new person that leads when it landmark meets .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "AFP")) (mkVP (mkVP (mkVP L.byline_V) (dayMonthYearAdv (intMonthday (ss "27")) august_Month (intYear (ss "2009")))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Ramallah"))))))) fullStopPunct)
TXT: [unknown qualified constant L.byline_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.parliament_N) (S.mkAdv L.part_Prep (mkNP (P.mkPN "Palestine Liberation Organisation"))))) (mkVP (mkVP (mkVP L.elect_V2 (mkNP S.a_Quant (mkNum (mkDigits "6")) (mkCN L.new_A (mkCN L.member_N)))) (weekdayPunctualAdv thursday_Weekday)) (S.mkAdv L.PRD_Prep (mkNP S.a_Quant (mkCN L.executive_A L.body_N))))))) fullStopPunct)
TXT: [a parliament of Palestine Liberation Organisation elects 6 new members on Thursday an executive body .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.spokesman_N)) (mkVP L.say_VS (mkS (mkCl (mkNP S.and_Conj (mkListNP (mkNP (P.mkPN "Hanan Ashrawi")) (mkListNP (mkNP (P.mkPN "Ahmed Qorei")) (mkNP (ss "top") (mkNP (P.mkPN "Saeb Erakat")))))) (mkVP (passiveVP L.include_V2) (E.PurposeVP (mkVP L.elect_V2 (mkNP S.a_Quant (mkNum (mkDigits "6")) (mkCN L.person_N))))))))))) fullStopPunct)
TXT: [a spokesman says that Hanan Ashrawi , Ahmed Qorei and top Saeb Erakat are included to elect 6 persons .]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP (ss ("parliament" (S.mkAdv L.part_Prep (mkNP (P.mkPN "PLO"))))) (mkNP (P.mkPN "Palestinian National Council"))) (mkVP (P.mkAdV "last") (mkVP L.hold_VS (mkS (mkCl (mkVP (P.mkAdV "plenary") (mkVP (mkVP L.meet_V) (yearAdv (intYear (ss "1996"))))))))))) (mkS (mkCl (mkVP L.replace_V2 (mkNP S.a_Quant (mkCN (mkCN (mkCN L.member_N) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.include_V2) (S.mkAdv (mkNP S.a_Quant (mkNum (mkDigits "18")) (mkCN (mkCN L.member_N) (S.mkAdv L.part_Prep (mkNP S.a_Quant (mkCN L.executive_A L.committee_N)))))))))) (mkRS (mkRCl S.which_RP (passiveVP L.die_V2))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.die_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (ss "icon") (mkNP (P.mkPN "Yasser Arafat"))) (mkVP (passiveVP L.include_V2) (S.mkAdv (mkNP S.a_Quant (mkCN (mkCN (mkCN L.member_N) (S.mkAdv L.part_Prep (mkNP S.a_Quant (mkCN L.executive_A L.committee_N)))) (mkRS (mkRCl S.which_RP (passiveVP L.die_V2)))))))))) fullStopPunct)
TXT: [unknown qualified constant L.die_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.executive_A L.committee_N)) (mkNP (mkCN (mkCN (P.mkN2 L.president_N L.of_Prep) (mkNP (P.mkPN "Palestinian Authority"))) (mkNP (P.mkPN "Mahmud Abbas")))) (passiveVP L.head_V2)))) fullStopPunct)
TXT: [no overload instance of mkCl]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "PLO")) (mkVP L.group_V2 (mkNP S.a_Quant (mkCN (mkCN (mkCN L.nationalist_A L.main_A L.faction_N) (S.mkAdv S.possess_Prep (mkNP (P.mkPN "Palestine")))) (mkRS (mkRCl S.which_RP (mkAP (mkAP L.include_A) (mkS (mkCl (mkNP (P.mkPN "Fatah"))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.include_A]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkVP (mkVP (mkVP L.create_V2 (mkNP (P.mkPN "Palestinian Authority"))) (S.mkAdv S.when_Subj (mkS (mkCl (mkNP (P.mkPN "Arafat")) (mkVP (mkVP (passiveVP L.return_V2) (S.mkAdv (P.mkPrep "after") (mkNP S.a_Quant (mkNum (mkDigits "27")) (mkCN L.year_N)))) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN (mkCN L.land_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Palestine"))))))))))) (monthYearAdv july_Month (intYear (ss "1994"))))))) fullStopPunct)
TXT: [it creates Palestinian Authority when Arafat is returned after 2 Predef.BIND 7 years to a land in Palestine in July 1994 .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.contrast_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.international_A L.community_N)) (mkVP L.recognize_V2 (mkNP (P.mkPN "PLO")))))))))) fullStopPunct)
TXT: [it is contrasted that an international community recognizes PLO .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.report_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (P.mkPN "Google")) (mkVP (mkVP L.give_V2 (mkNP S.a_Quant (mkCN L.ground_N))) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "Europe"))))))))))) fullStopPunct)
TXT: [it is reported that Google gives a ground to Europe .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "AFP")) (mkVP (mkVP (mkVP L.byline_V) (dayMonthYearAdv (intMonthday (ss "7")) september_Month (intYear (ss "2009")))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "London"))))))) fullStopPunct)
TXT: [unknown qualified constant L.byline_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.report_N)) (mkVP (mkVP L.say_VS (mkS (mkCl (mkNP (P.mkPN "Google")) (mkVP (mkVP (mkVP L.concede_V) (E.PurposeVP (mkVP L.attempt_VS (mkS (mkCl (mkVP L.stem_VS (mkS (mkCl (mkVP (mkVP L.anger_V) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.move_VS (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP L.digitize_V))) (mkS (mkCl (mkVP L.sell_V2 (mkNP S.a_Quant (mkCN L.book_N)))))))))))))))))))) (S.mkAdv L.GOL_Prep (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN (mkCN L.continent_A L.company_N) (mkRS (mkRCl S.which_RP (mkVP L.publish_V))))) (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.author_V)))))))))))) (weekdayPunctualAdv monday_Weekday))))) fullStopPunct)
TXT: [unknown qualified constant L.attempt_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "The Financial Times")) (mkVP L.say_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.company_N)) (mkVP L.agree_V))))))) fullStopPunct)
TXT: [The Financial Times says that a company agrees .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.newspaper_N)) (mkVP L.cite_V2 (mkNP S.a_Quant (mkCN (mkCN L.letter_N) (mkRS (mkRCl S.which_RP (mkVP (mkVP (P.mkAdV "weekend") (passiveVP L.send_V2)) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.represent_V2 (mkNP S.a_Quant (mkNum (mkDigits "16")) (mkCN (E.CompoundCN L.organization_N L.company_N) (mkRS (mkRCl S.which_RP (mkVP L.publish_V)))))))))))))))))))) fullStopPunct)
TXT: [a newspaper cites a letter that is weekend sent to a person that represents 1 Predef.BIND 6 organization companies that publish .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.letter_N)) (mkVP L.say_VS (mkS (mkCl (mkNP (P.mkPN "Google")) (mkVP (P.mkAdV "also") (mkVP L.promise_VV (mkVP L.consult_V2 (mkNP S.a_Quant (mkCN (mkCN L.continent_A L.company_N) (mkRS (mkRCl S.which_RP (mkVP L.publish_V)))))))))))))) fullStopPunct)
TXT: [a letter says that Google also promises to consult a continent company that publishes .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Google")) (mkVP L.reach_VS (mkS (mkCl (mkVP (mkVP L.settle_VS (mkS (mkCl (mkVP L.sue_VV (mkVP infringe-01))))) (S.mkAdv L.COM_Prep (mkNP S.and_Conj (mkListNP (mkNP (P.mkPN "Authors Guild")) (mkNP (P.mkPN "Association of American Publishers")))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.reach_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Google")) (mkVP L.agree_VS (mkS (mkCl (mkVP L.pay_V2 (mkNP S.a_Quant (mkNum (mkDigits "125000000")) (mkCN L.dollar_N))))))))) fullStopPunct)
TXT: [Predef.error "cannot deal with so many digits: 125000000"]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Germany")) (mkVP L.say_VS (mkS (mkCl (mkVP (mkVP L.oppose_VS (mkS (mkCl (mkVP L.settle_V)))) (S.mkAdv S.because_Subj (mkS (mkCl (mkVP L.violate_V2 (mkNP S.a_Quant (mkCN L.international_A L.treaty_N))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.oppose_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "European Commission")) (mkVP (passiveVP L.set_V2) (E.PurposeVP (mkVP (mkVP hold-04) (weekdayPunctualAdv monday_Weekday))))))) fullStopPunct)
TXT: [constant not found: hold]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Google")) (mkVP L.decline_VS (mkS (mkCl (mkVP L.comment_V))))))) fullStopPunct)
TXT: [unknown qualified constant L.decline_VS]

SNT: 
AST: (multi-sentence (mkText (mkUtt (mkNP (mkCN L.football_N)))) (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkNum (mkDigits "1")) (mkCN L.person_N)) (passiveVP L.die_V2)))) fullStopPunct))
TXT: [football .] [unknown qualified constant L.die_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "AFP")) (mkVP (mkVP (mkVP L.byline_V) (dayMonthYearAdv (intMonthday (ss "4")) october_Month (intYear (ss "2009")))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Sarajevo"))))))) fullStopPunct)
TXT: [unknown qualified constant L.byline_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.police_N)) (mkVP L.say_VS (mkS (mkCl (mkNP S.a_Quant (mkNum (mkDigits "1")) (mkCN L.person_N)) (mkVP (passiveVP L.die_V2) (S.mkAdv S.because_Subj (mkS (mkCl (passiveVP L.injure_V2))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.die_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (mkCN (mkCN (P.mkN2 L.spokesman_N L.of_Prep) (mkNP S.a_Quant (mkCN L.police_N))) (mkNP (P.mkPN "Damir Cutura")))) (mkVP (mkVP (passiveVP L.tell_V2) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "AFP")))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (passiveVP L.seem_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkNum (mkDigits "1")) (mkCN L.person_N)) (passiveVP L.die_V2)))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.seem_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (ss "nation") (mkNP (P.mkPN "BH Radio"))) (mkVP L.report_VS (mkS (mkCl (mkNP S.a_Quant (E.CompoundCN L.city_N L.fan_N)) (mkVP (passiveVP L.die_V2) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN (E.CompoundCN L.medicine_N L.facility_N) (S.mkAdv S.possess_Prep (mkNP S.a_Quant (mkCN L.town_N))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.die_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkVP L.add_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.other_N)) (passiveVP L.injure_V2))))))) fullStopPunct)
TXT: [it adds that an other is injured .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.radio_N)) (mkVP L.report_VS (mkS (mkCl (mkNP S.a_Quant (E.CompoundCN L.league_N L.match_N)) (mkVP (P.mkAdV "subsequent") (mkVP (passiveVP L.cancel_V2) (S.mkAdv S.because_Subj (mkNP S.a_Quant (mkCN L.fatality_N))))))))))) fullStopPunct)
TXT: [no overload instance of mkAdv]

SNT: 
AST: (a (and (S.mkAdv S.when_Subj (mkS (mkCl (mkVP L.follow_V))))))
TXT: [constant not found: a]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (E.CompoundCN L.group_N L.person_N)) (mkListNP (mkNP S.a_Quant (mkCN (E.CompoundCN L.group_N L.person_N) (S.mkAdv S.possess_Prep (mkNP S.a_Quant (mkCN L.country_N))))) (mkNP S.a_Quant (E.CompoundCN L.group_N L.person_N))))) (mkVP (mkVP (passiveVP L.pit_V2) (S.mkAdv L.GOL_Prep (mkNP S.aPl_Det (mkCN L.other_A L.each_N)))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.war_V)))))))) fullStopPunct)
TXT: [unknown qualified constant L.each_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.person_N)) (mkVP (mkVP L.protest_VS (mkS (mkCl (mkVP (passiveVP L.delay_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.report_V)))))))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "West Bank"))))))) fullStopPunct)
TXT: [unknown qualified constant L.protest_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "AFP")) (mkVP (mkVP (mkVP L.byline_V) (dayMonthYearAdv (intMonthday (ss "5")) october_Month (intYear (ss "2009")))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Ramallah"))))))) fullStopPunct)
TXT: [unknown qualified constant L.byline_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.person_N)) (mkVP (mkVP L.protest_VS (mkS (mkCl (mkNP (P.mkPN "Palestinian Authority")) (mkVP L.support_VS (mkS (mkCl (mkVP (passiveVP L.delay_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (passiveVP L.endorse_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (passiveVP L.report_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (E.CompoundCN L.war_N (L.crime_N (S.mkAdv S.when_Subj (mkS (mkCl (mkNP (P.mkPN "Israel")) (mkVP (mkVP L.offense_V) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Gaza")))))))))))))))))))))))))))) (weekdayPunctualAdv monday_Weekday))))) fullStopPunct)
TXT: [unknown qualified constant L.protest_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP L.demonstrate_V) (S.mkAdv S.when_Subj (mkS (mkCl (mkNP (mkCN L.anger_N)) (mkVP (passiveVP L.mount_V2) (S.mkAdv S.because_Subj (mkS (mkCl (mkNP (P.mkPN "UN Human Rights Council")) (mkVP L.decide_VS (mkS (mkCl (mkVP L.delay_VS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.report_N) (mkRS (mkRCl S.which_RP (mkNP (P.mkPN "Richard Goldstone")) L.compile_V2)))) (passiveVP L.consider_V2)))))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.delay_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (mkCN (P.mkN2 L.correspondent_N L.of_Prep) (mkNP (P.mkPN "AFP")))) (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.person_N)) (mkVP (mkVP L.protest_VS (mkS (mkCl (mkVP L.decide_V)))) (S.mkAdv L.in_Prep (mkNP (ss "capital") (mkNP (P.mkPN "Ramallah")))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.protest_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP L.another_Det (mkCN L.sign_N)) (passiveVP L.read_V2)))) fullStopPunct)
TXT: [another sign is read .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.see_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.council_N)) (mkVP L.adopt_V2 (mkNP S.a_Quant (mkCN L.report_N)))))))))) fullStopPunct)
TXT: [it is seen that a council adopts a report .]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP (P.mkPN "Israel")) (mkVP L.warn_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.report_N)) (passiveVP L.endorse_V2)))))) (mkS (mkCl (mkVP (passiveVP L.believe_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.exert_VS (mkS (mkCl (mkNP (P.mkPN "Washington")) (mkVP L.pressure_VV (mkVP drop-05) (mkNP S.a_Quant (mkCN (mkCN L.person_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "Palestine")))))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.exert_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.activist_N) (mkRS (mkRCl S.which_RP (mkVP L.favor_V2 (mkNP (P.mkPN "Palestine"))))))) (mkVP (mkVP (mkVP L.protest_VS (mkS (mkCl (mkVP L.decide_V)))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Jerusalem")))) (S.mkAdv L.in_Prep (mkNP S.a_Quant (E.CompoundCN L.news_N L.conference_N))))))) fullStopPunct)
TXT: [unknown qualified constant L.activist_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.knife_N) (S.mkAdv L.in_Prep (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN (mkCN L.back_N) (S.mkAdv L.part_Prep (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP (P.mkAdV "all") (passiveVP L.martyr_V2))))))))) (mkNP S.a_Quant (mkCN L.heart_N))))))) (have-org-role-91 (mkNP (P.mkPN "Popular Campaign to End the Wall"))) (passiveVP L.say_V2)))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.knife_N) (S.mkAdv L.in_Prep (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN (mkCN L.back_N) (S.mkAdv L.part_Prep (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP (P.mkAdV "all") (passiveVP L.martyr_V2))))))))) (mkNP S.a_Quant (mkCN L.heart_N))))))) (have-org-role-91 (mkNP (P.mkPN "Popular Campaign to End the Wall"))) (passiveVP L.say_V2)))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Muhammad Jadallah")) (mkVP L.demand_VS (mkS (mkCl (mkNP (mkCN (mkCN (P.mkN2 L.president_N L.of_Prep) (mkNP (P.mkPN "Palestine"))) (mkNP (P.mkPN "Mahmud Abbas")))) (mkVP L.apologize_V))))))) fullStopPunct)
TXT: [{s = "Muhammad"]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.he_NP (mkVP L.say_VS (mkS S.and_Conj (mkListS (mkS (mkCl S.we_NP (mkVP L.want_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.event_N)) (have-org-role-91 (P.mkN2 L.president_N L.of_Prep)) (passiveVP L.apologize_V2)))))) (mkS (mkCl (mkVP L.want_VS (mkS (mkCl (mkVP L.resign_V)))))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl S.he_NP (mkVP L.say_VS (mkS S.and_Conj (mkListS (mkS (mkCl S.we_NP (mkVP L.want_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.event_N)) (have-org-role-91 (P.mkN2 L.president_N L.of_Prep)) (passiveVP L.apologize_V2)))))) (mkS (mkCl (mkVP L.want_VS (mkS (mkCl (mkVP L.resign_V)))))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.report_N) (S.mkAdv S.possess_Prep (mkNP (P.mkPN "UN"))))) (mkVP L.accuse_VV (mkVP commit-02) (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN (mkCN (mkCN L.group_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "Israel")))) (mkRS (mkRCl S.which_RP (passiveVP L.arm_V2))))) (mkNP S.a_Quant (mkCN (mkCN (mkCN L.group_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "Palestine")))) (mkRS (mkRCl S.which_RP (passiveVP L.arm_V2))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.accuse_VV]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.alert_V)))) fullStopPunct)
TXT: [unknown qualified constant L.alert_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Interior Ministry")) (mkVP L.say_VS (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.a_Quant (mkNum (mkDigits "12")) (mkCN L.person_N)) (mkVP (passiveVP L.kill_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (mkVP (P.mkAdV "suicide") (mkVP L.attack_V)) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Kabul")))))))))) (mkS (mkCl (mkVP L.wound_V2 (mkNP S.a_Quant (mkNum (mkDigits "83")) (mkCN L.person_N))))))))))) fullStopPunct)
TXT: [Interior Ministry says that 1 Predef.BIND 2 persons are killed that it suicide attacks in Kabul and it wounds 8 Predef.BIND 3 persons .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.court_N)) (mkVP L.give_VV (mkVP chance-02) (mkNP (mkNP (P.mkPN "DSB")) (S.mkAdv L.from_Prep (mkNP (P.mkPN "Netherlands")))))))) fullStopPunct)
TXT: [unknown qualified constant L.give_VV]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "AFP")) (mkVP (mkVP (mkVP L.byline_V) (dayMonthYearAdv (intMonthday (ss "15")) october_Month (intYear (ss "2009")))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "The Hague"))))))) fullStopPunct)
TXT: [unknown qualified constant L.byline_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (E.CompoundCN L.document_N L.court_N)) (mkVP L.say_VS (mkS (mkCl (mkNP (P.mkPN "DSB")) have-org-role-91 (mkVP (passiveVP L.give_V2) (weekdayPunctualAdv thursday_Weekday)))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (E.CompoundCN L.document_N L.court_N)) (mkVP L.say_VS (mkS (mkCl (mkNP (P.mkPN "DSB")) have-org-role-91 (mkVP (passiveVP L.give_V2) (weekdayPunctualAdv thursday_Weekday)))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl (mkVP (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.court_N)) (mkVP (mkVP L.give_V2 (mkNP (P.mkPN "DSB"))) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN (mkCN L.opportunity_N) (E.PurposeVP (mkVP L.indicate_VS (mkS (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl (mkVP L.take_over_V)))))))))))))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN (E.CompoundCN L.district_N L.court_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Amsterdam"))))) (mkVP L.rule_V))))))))) questMarkPunct)
TXT: [is it said that a court gives DSB to an opportunity to indicate that it is possible that it takes over that a district court in Amsterdam rules ?]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.court_N)) (mkVP L.declare_VV (mkVP bankrupt-01) (mkNP (P.mkPN "DSB")))))) fullStopPunct)
TXT: [unknown qualified constant L.declare_VV]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.court_N)) (mkVP (mkVP (mkVP L.hold_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.further_A (L.hearing_N (E.PurposeVP (mkVP L.examine_V2 (mkNP L.all_Det (mkCN L.evidence_N)))))))))) (E.PurposeVP (mkVP L.bid_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.affair_N)) (have-org-role-91 (mkNP S.a_Quant (mkCN L.bank_N))) (passiveVP L.wind_up_V2)))))) (weekdayPunctualAdv friday_Weekday))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.court_N)) (mkVP (mkVP (mkVP L.hold_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.further_A (L.hearing_N (E.PurposeVP (mkVP L.examine_V2 (mkNP L.all_Det (mkCN L.evidence_N)))))))))) (E.PurposeVP (mkVP L.bid_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.affair_N)) (have-org-role-91 (mkNP S.a_Quant (mkCN L.bank_N))) (passiveVP L.wind_up_V2)))))) (weekdayPunctualAdv friday_Weekday))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "DSB")) (mkVP (mkVP (mkVP (passiveVP L.place_V2) (S.mkAdv S.because_Subj (mkNP (ss "central") (mkNP (P.mkPN "DNB"))))) (weekdayPunctualAdv monday_Weekday)) (E.PurposeVP (mkVP administer-01)))))) fullStopPunct)
TXT: [Warning: ignoring lock fields in resolving mkNP (ss "central") (mkNP (mkPN "DNB"))]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkNum (mkDigits "2")) (mkCN (mkCN (mkCN L.independent_A L.person_N) (mkRS (mkRCl S.which_RP (mkVP (mkVP L.approach_V2 (mkNP S.a_Quant (mkCN L.court_N))) (E.PurposeVP (mkVP L.apply_VS (mkS (mkCl (mkVP L.bankrupt_V))))))))) (mkRS (mkRCl S.which_RP (mkVP L.administrate_V))))) (passiveVP L.appoint_V2)))) fullStopPunct)
TXT: [unknown qualified constant L.apply_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (ss "news") (mkNP (P.mkPN "ANP"))) (mkVP L.report_VS (mkS (mkCl (mkNP (mkCN (mkCN (P.mkN2 L.executive_N L.of_Prep) (mkNP S.a_Quant (mkCN L.bank_N))) (mkNP (P.mkPN "Dirk Scheringa")))) (mkVP (mkVP (passiveVP L.say_V2) (S.mkAdv S.when_Subj (mkS (mkCl (mkVP L.leave_V2 (mkNP S.a_Quant (mkCN L.court_N))))))) (S.mkAdv S.that_Subj (mkS (mkCl (passiveVP L.remain_V2))))))))))) fullStopPunct)
TXT: [news ANP reports that executive of a bank Dirk Scheringa is said when it leaves a court that it is remained .]

SNT: 
AST: (mkText (mkUtt (mkS (S.mkAdv S.because_Subj (mkS (mkCl (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP (mkVP L.sell_V2 (mkNP S.a_Quant (mkCN (E.CompoundCN L.insurance_N L.policy_N) (mkRS negativePol (mkRCl S.which_RP need-01))))) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN L.client_N)))))) (mkS (mkCl (mkVP L.extend_V2 (mkNP S.a_Quant (mkCN (mkCN L.mortgage_N) (mkRS negativePol (mkRCl S.which_RP afford-01))))))))) (passiveVP L.claim_V2)))) (mkNP (mkCN (mkCN L.news_N) (S.mkAdv L.about_Prep (mkNP S.a_Quant (mkCN (mkCN L.bank_N) (mkRS (mkRCl S.which_RP (mkVP L.employ_V2 (mkNP S.a_Quant (mkCN L.person_N)))))))))))) fullStopPunct)
TXT: [constant not found: need]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.hold_V2 (mkNP S.a_Quant (mkCN L.account_N))))))) (mkVP L.withdraw_V)))) fullStopPunct)
TXT: [a person that holds an account withdraws .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "DSB")) (mkVP L.say_VS (mkS (mkCl (mkVP (mkVP L.hold_V) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Netherlands")))))))))) fullStopPunct)
TXT: [DSB says that it holds in Netherlands .]

SNT: 
AST: (h (have-rel-role-91 (mkNP S.a_Quant (mkCN L.person_N)) S.it_NP))
TXT: [command not parsed: cc -one (h (have-rel-role-91 (mkNP S.a_Quant (mkCN L.person_N)) S.it_NP))]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkVP (P.mkAdV "main") (mkVP (P.mkAdV "also") (mkVP L.sponsor_V2 (mkNP (ss "football") (mkNP (P.mkPN "AZ Alkmaar"))))))))) fullStopPunct)
TXT: [it also main sponsors football AZ Alkmaar .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN (mkCN L.organization_N) (mkRS (mkRCl S.which_RP (mkVP L.promise_V)))) (mkRS (mkRCl S.which_RP (mkVP L.govern_V))))) (mkVP L.announce_VS (mkS (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.hold_V2 (mkNP S.a_Quant (mkCN L.account_N))))))) (mkVP (P.mkAdV "back") (mkVP L.claim_V))))))))))) fullStopPunct)
TXT: [an organization that promises that governs announces that it is possible that a person that holds an account back claims .]

SNT: 
AST: (multi-sentence (mkText (mkUtt (mkNP (mkCN L.football_N)))) (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Barnes")) (mkVP L.face_V2 (mkNP (mkCN L.time_N)))))) fullStopPunct))
TXT: [football .] [Barnes faces time .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "AFP")) (mkVP (mkVP (mkVP L.byline_V) (dayMonthYearAdv (intMonthday (ss "21")) october_Month (intYear (ss "2009")))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "London"))))))) fullStopPunct)
TXT: [unknown qualified constant L.byline_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (mkCN (mkCN (P.mkN2 L.winger_N L.of_Prep) (mkNP S.and_Conj (mkListNP (mkNP (P.mkPN "Liverpool")) (mkNP (P.mkPN "England"))))) (mkNP (P.mkPN "John Barnes")))) (mkVP (mkVP (passiveVP L.insist_V2) (weekdayPunctualAdv wednesday_Weekday)) (S.mkAdv S.that_Subj (mkS (S.mkAdv S.because_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.oversight_N))))) (mkS (mkCl (passiveVP L.bankrupt_V2))))))))) fullStopPunct)
TXT: [winger of Liverpool and England John Barnes is insisted on Wednesday that because there is an oversight it is bankrupted .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (E.CompoundCN L.insolvency_N L.court_N)) (mkVP L.declare_VV (mkVP bankrupt-01) (mkNP (P.mkPN "Barnes")))))) fullStopPunct)
TXT: [unknown qualified constant L.declare_VV]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.contrast_VV (mkVP (say-01 (mkNP (P.mkPN "Barnes")))))))) fullStopPunct)
TXT: [unknown qualified constant L.contrast_VV]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Barnes")) (mkVP (passiveVP L.charge_V2) (S.mkAdv L.PRD_Prep (mkNP (ss "native") (mkNP (P.mkPN "Jamaica")))))))) fullStopPunct)
TXT: [Barnes is charged native Jamaica .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Karadzic")) (mkVP L.say_VS (mkS (mkCl (mkVP (passiveVP L.appear_V2) (weekdayPunctualAdv tuesday_Weekday)))))))) fullStopPunct)
TXT: [unknown qualified constant L.appear_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "AFP")) (mkVP (mkVP (mkVP L.byline_V) (dayMonthYearAdv (intMonthday (ss "2")) november_Month (intYear (ss "2009")))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "The Hague"))))))) fullStopPunct)
TXT: [unknown qualified constant L.byline_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (ss ("group" (S.mkAdv L.from_Prep (mkNP (P.mkPN "Bosnia and Herzegovina"))))) (mkNP (P.mkPN "Radovan Karadzic"))) (mkVP L.say_VS (mkS (mkCl (mkVP L.attend_VS (mkS (mkCl (mkNP S.a_Quant (E.CompoundCN L.court_N (L.hearing_N (mkVP proceed-01) (weekdayPunctualAdv tuesday_Weekday))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.attend_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN (E.CompoundCN L.group_N L.person_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "Bosnia and Herzegovina")))) (mkRS (mkRCl S.which_RP (mkVP (mkVP L.lead_V) (S.mkAdv S.when_Subj (mkS (mkCl (mkVP L.war_V))))))))) (mkVP L.say_VS (mkS (mkCl (mkVP (passiveVP L.please_V2) (E.PurposeVP (mkVP L.attend_V2 (mkNP S.a_Quant (mkCN (mkCN (mkCN L.conference_N) (dayMonthYearAdv (intMonthday (ss "3")) november_Month (intYear (ss "2009")))) (S.mkAdv L.about_Prep (mkNP S.a_Quant (mkCN L.status_N)))))))))))))) fullStopPunct)
TXT: [a group person from Bosnia and Herzegovina that leads when it wars says that it is pleased to attend a conference on 3 November 2009 about a status .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP L.hope_VS (mkS (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl S.we_NP (mkVP L.find_V2 (mkNP S.a_Quant (mkCN (mkCN L.solution_N) (mkRS (mkRCl S.which_RP (mkVP L.lead_VV (mkVP L.contrast_VV (mkVP fair-01))))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.lead_VV]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.contrast_VV (mkVP (insist-01 (mkNP (P.mkPN "Karadzic")))))))) fullStopPunct)
TXT: [unknown qualified constant L.contrast_VV]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.he_NP (mkVP (mkVP L.tell_VS (mkS negativePol (mkCl (mkVP L.have_V2 (mkNP (mkCN (mkCN L.adequate_A L.time_N) (E.PurposeVP (mkVP (mkVP L.prepare_V) (S.mkAdv L.PRP_Prep S.it_NP))))))))) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.judge_V)))))))))) fullStopPunct)
TXT: [he tells to a person that judges that it doesn't have adequate time to prepare for it .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Karadzic")) (mkVP (mkVP L.boycott_VS (mkS (mkCl (passiveVP L.try_V2)))) (E.PurposeVP (mkVP L.insist_V2 (mkNP L.more_Det (mkCN (mkCN L.time_N) (E.PurposeVP (mkVP L.prepare_VS (mkS (mkCl (passiveVP L.defend_V2))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.boycott_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.judge_V))))) (mkVP L.block_V2 (mkNP S.a_Quant (mkCN L.video_N)))))) fullStopPunct)
TXT: [a person that judges blocks a video .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "AFP")) (mkVP (mkVP (mkVP L.byline_V) (dayMonthYearAdv (intMonthday (ss "9")) november_Month (intYear (ss "2009")))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Los Angeles"))))))) fullStopPunct)
TXT: [unknown qualified constant L.byline_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN (mkCN L.person_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Los Angeles")))) (mkRS (mkRCl S.which_RP (mkVP L.judge_V))))) (mkVP (mkVP L.issue_VS (mkS (mkCl (mkVP L.order_VV (mkVP bar-01))))) (weekdayPunctualAdv monday_Weekday))))) fullStopPunct)
TXT: [unknown qualified constant L.issue_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (have-org-role-91 (mkNP S.a_Quant (mkCN (mkCN L.court_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Los Angeles")))))) (mkVP (passiveVP L.issue_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (P.mkAdV "temporary") (mkVP L.order_V))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (have-org-role-91 (mkNP S.a_Quant (mkCN (mkCN L.court_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Los Angeles")))))) (mkVP (passiveVP L.issue_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (P.mkAdV "temporary") (mkVP L.order_V))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (E.CompoundCN L.court_N L.paper_N) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.file_V2) (weekdayPunctualAdv friday_Weekday)))))) (mkVP L.say_VS (mkS (mkCl (mkNP (P.mkPN "Ojani Noa")) (mkVP L.attempt_VS (mkS (mkCl (mkVP L.find_V2 (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.buy_V2 (mkNP S.a_Quant (mkCN (mkCN L.film_N) (mkRS (mkRCl S.which_RP (mkAP (mkAP L.include_A) (mkS (mkCl (mkNP S.a_Quant (mkCN L.steamy_A L.home_A L.video_N)))))))))))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.attempt_VS]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP (P.mkPN "Lopez")) (mkVP L.claim_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.contract_N)) (passiveVP L.breach_V2)))))) (mkS (mkCl (mkVP L.seek_V2 (mkNP S.a_Quant (mkNum (mkDigits "10000000")) (mkCN L.dollar_N)))))))) fullStopPunct)
TXT: [Lopez claims that a contract is breached and it seeks 1 Predef.BIND 0 Predef.BIND , Predef.BIND 0 Predef.BIND 0 Predef.BIND 0 Predef.BIND , Predef.BIND 0 Predef.BIND 0 Predef.BIND 0 dollars .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.record_N)) (mkVP L.show_VS (mkS (mkCl (mkNP (P.mkPN "Ed Meyer")) (mkVP (P.mkAdV "also") (passiveVP L.name_V2)))))))) fullStopPunct)
TXT: [a record shows that Ed Meyer is also named .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (L.sue_V (S.mkOrd (mkDigits "2"))))))) fullStopPunct)
TXT: [A function type is expected for sue_V instead of type V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Lopez")) (mkVP (mkVP L.sue_V) (S.mkAdv S.when_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN (L.case_N (S.mkOrd (mkDigits "1")))))))))))) fullStopPunct)
TXT: [A function type is expected for case_N instead of type N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.arbitrate_V))))) (mkVP (mkVP (P.mkAdV "eventual") (mkVP L.award_V2 (mkNP S.a_Quant (mkNum (mkDigits "545000")) (mkCN L.dollar_N)))) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "Lopez"))))))) fullStopPunct)
TXT: [a person that arbitrates eventual awards 5 Predef.BIND 4 Predef.BIND 5 Predef.BIND , Predef.BIND 0 Predef.BIND 0 Predef.BIND 0 dollars to Lopez .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Lopez")) (mkVP L.say_VS (mkS (mkCl (mkNP (P.mkPN "Noa")) (mkVP L.sign_VS (mkS (mkCl (mkVP (passiveVP L.agree_V2) (S.mkAdv S.that_Subj (mkS negativePol (mkCl (mkVP L.publish_V2 (mkNP S.a_Quant (mkCN (mkCN L.detail_N) (S.mkAdv L.about_Prep (mkNP S.they_Pron (mkCN L.relationship_N))))))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.sign_VS]

SNT: 
AST: (h (have-rel-role-91 (mkNP (P.mkPN "Cris Judd")) (mkNP (P.mkPN "Lopez"))))
TXT: [command not parsed: cc -one (h (have-rel-role-91 (mkNP (P.mkPN "Cris Judd")) (mkNP (P.mkPN "Lopez"))))]

SNT: 
AST: (a and)
TXT: [constant not found: a]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.ministry_N)) (mkVP L.say_VS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "Bulgaria"))))) (mkVP (P.mkAdV "life") (mkVP (passiveVP L.sentence_V2) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Iran"))))))))))) fullStopPunct)
TXT: [a ministry says that a person from Bulgaria is life sentenced in Iran .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "AFP")) (mkVP (mkVP (mkVP L.byline_V) (dayMonthYearAdv (intMonthday (ss "9")) november_Month (intYear (ss "2009")))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Sofia"))))))) fullStopPunct)
TXT: [unknown qualified constant L.byline_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (mkNP (P.mkPN "Foreign Ministry")) (S.mkAdv L.from_Prep (mkNP (P.mkPN "Bulgaria")))) (mkVP (mkVP L.say_VS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.drive_V2 (mkNP S.a_Quant (mkCN L.truck_N))))))) (mkVP (passiveVP L.sentence_V2) (E.PurposeVP (mkVP (mkVP (mkVP imprison-01) (S.mkAdv L.EXT_Prep (mkNP S.a_Quant (mkCN L.life_N)))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Iran"))))))))) (weekdayPunctualAdv monday_Weekday))))) fullStopPunct)
TXT: [constant not found: imprison]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (mkCN (mkCN (P.mkN2 L.spokesman_N L.of_Prep)) (mkNP (P.mkPN "Dragovest Goranov")))) (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (P.mkPN "Zhivko Rusev")) (mkVP (passiveVP L.inform_V2) (S.mkAdv L.PPT_Prep (mkNP S.a_Quant (mkCN (mkCN L.thing_N) (mkRS (mkRCl S.which_RP (mkNP S.a_Quant (mkCN L.court_N)) L.decide_V2))))))))))))) fullStopPunct)
TXT: [spokesman Dragovest Goranov is said that Zhivko Rusev is informed a thing that a court decides .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Rusev")) (mkVP (mkVP (passiveVP L.arrest_V2) (monthYearAdv september_Month (intYear (ss "2008")))) (E.PurposeVP (mkVP (mkVP L.find_V2 (mkNP S.a_Quant (mkCN L.heroin_N))) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.truck_N))))))))) fullStopPunct)
TXT: [Rusev is arrested in September 2008 to find a heroin in a truck .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.he_NP (mkVP (mkVP (passiveVP L.imprison_V2) (S.mkAdv L.since_Prep (mkNP L.then_N))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Iran"))))))) fullStopPunct)
TXT: [he is imprisoned since then in Iran .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Goranov")) (mkVP (mkVP L.say_VS (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP (P.mkPN "Rusev")) (mkVP L.maintain_VS (mkS (mkCl S.it_NP (mkAP L.innocent_A)))))) (mkS (mkCl S.we_NP (mkVP L.advise_V)))))) (weekdayPunctualAdv monday_Weekday))))) fullStopPunct)
TXT: [Goranov says on Monday that Rusev maintains that it is innocent and we advise .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.he_NP (mkVP L.add_VS (mkS (mkCl S.we_NP (mkVP L.estimate_V2 (mkNP S.somePl_Det (mkCN (mkCN (mkCN L.light_N) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN (mkCN L.end_N) (S.mkAdv L.part_Prep (mkNP S.a_Quant (mkCN L.tunnel_N))))))) (S.mkAdv S.because_Subj (mkS (mkCl (mkVP L.rule_V))))))))))))) fullStopPunct)
TXT: [he adds that we estimate some lights in an end of a tunnel because it rules .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (mkCN (mkCN L.law_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "Iran"))))) (mkAP (L.punishable_A (mkVP L.traffic_V2 (mkNP S.a_Quant (mkCN L.drug_N)))))))) fullStopPunct)
TXT: [A function type is expected for punishable_A instead of type A]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.report_N)) (mkVP L.say_VS (mkS (mkCl (mkNP S.a_Quant (mkCN (L.hanging_N (mkNP S.a_Quant (mkCN L.man_N)) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Iran")))))))))))) fullStopPunct)
TXT: [A function type is expected for hanging_N instead of type N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.murder_V))))) (mkVP (passiveVP L.execute_V2) (S.mkAdv L.MNR_Prep (mkNP S.a_Quant (E.CompoundCN L.electricity_N L.chair_N))))))) fullStopPunct)
TXT: [unknown qualified constant L.murder_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "AFP")) (mkVP (mkVP (mkVP L.byline_V) (dayMonthYearAdv (intMonthday (ss "17")) november_Month (intYear (ss "2009")))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Washington"))))))) fullStopPunct)
TXT: [unknown qualified constant L.byline_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.murder_V))))) (mkVP (mkVP (mkVP (passiveVP L.execute_V2) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Virginia")))) (weekdayPunctualAdv tuesday_Weekday)) (S.mkAdv L.MNR_Prep (mkNP S.a_Quant (mkCN L.electric_A L.chair_N))))))) fullStopPunct)
TXT: [unknown qualified constant L.murder_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Larry Elliott")) (mkVP (passiveVP L.execute_V2) (S.mkAdv L.MNR_Prep (mkNP S.a_Quant (mkCN L.electrocution_N))))))) fullStopPunct)
TXT: [Larry Elliott is executed an electrocution .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.state_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "US"))))) (mkVP L.consider_VS (mkS (mkCl (mkVP (P.mkAdV "cruel") (mkVP L.punish_V)))))))) fullStopPunct)
TXT: [unknown qualified constant L.punish_V]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP (P.mkPN "Elliott")) (passiveVP L.sentence_V2))) (mkS (mkCl (passiveVP L.sentence_V2)))))) fullStopPunct)
TXT: [Elliott is sentenced and it is sentenced .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Elliott")) (mkVP L.know_V2 (mkNP S.a_Quant (mkCN L.victim_N)))))) fullStopPunct)
TXT: [Elliott knows a victim .]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS negativePol (mkCl (mkNP S.a_Quant (mkCN L.murder_A (mkCN L.weapon_N))) (mkVP (P.mkAdV "ever") (passiveVP L.find_V2)))) (mkS (mkCl (mkNP (P.mkPN "Elliott")) (mkVP L.insist_VS (mkS (mkCl S.it_NP (mkAP L.innocent_A))))))))) fullStopPunct)
TXT: [unknown qualified constant L.murder_A]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.pronounce_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.die_V)))))))) fullStopPunct)
TXT: [it is pronounced that it dies .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (mkCN (mkCN (P.mkN2 L.spokesman_N L.of_Prep) (mkNP (P.mkPN "Virginia Department of Corrections"))) (mkNP (P.mkPN "Larry Traylor")))) (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS negativePol (mkCl (mkVP L.complicate_V)))))))) fullStopPunct)
TXT: [unknown qualified constant L.complicate_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Virginia")) (mkVP L.execute_V2 (mkNP S.a_Quant (mkCN L.inmate_N)))))) fullStopPunct)
TXT: [Virginia executes an inmate .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.convict_N)) (mkVP (passiveVP (L.execute_V2 (S.mkOrd (mkDigits "3")) (S.mkOrd (mkDigits "105")))) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.state_N))))))) fullStopPunct)
TXT: [A function type is expected for execute_V2 instead of type V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Virginia")) (mkVP (mkVP L.execute_V2 (mkNP (P.mkPN "John Muhammad"))) (S.mkAdv S.because_Subj (mkS (mkCl (mkVP L.lead_V2 (mkNP S.a_Quant (mkCN (mkCN (mkCN (mkCN (mkCN L.reign_N) (yearAdv (intYear (ss "2002")))) (mkRS (mkRCl S.which_RP (mkVP L.paralyze_V)))) (mkRS (mkRCl S.which_RP (mkVP L.claim_V2 (mkNP S.a_Quant (mkNum (mkDigits "10")) (mkCN L.life_N)))))) (mkRS (mkRCl S.which_RP (mkNP S.a_Quant (mkCN L.terror_N)))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.paralyze_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "France")) (mkVP L.deport_V2 (mkNP S.a_Quant (mkCN L.radical_A L.imam_N)))))) fullStopPunct)
TXT: [{s = "France" ++ "deports" ++ "a" ++ "radical" ++ "imam" ++ ".";]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "AFP")) (mkVP (mkVP (mkVP L.byline_V) (dayMonthYearAdv (intMonthday (ss "7")) january_Month (intYear (ss "2010")))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Paris"))))))) fullStopPunct)
TXT: [unknown qualified constant L.byline_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "France")) (mkVP (mkVP L.deport_V2 (mkNP S.a_Quant (mkCN (mkCN L.radical_A L.imam_N) (mkRS (mkRCl S.which_RP (mkVP L.incite_VS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN (mkCN L.person_N) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN (mkCN L.mosque_N) (S.mkAdv L.in_Prep (mkNP S.a_Quant (E.CompoundCN L.city_N L.area_N))))))) (mkRS (mkRCl S.which_RP (mkVP L.follow_V))))) (mkVP L.rise_up_V2 (mkNP (P.mkPN "West"))))))))))) (weekdayPunctualAdv thursday_Weekday))))) fullStopPunct)
TXT: [unknown qualified constant L.incite_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Ali Ibrahim Al-Sudani")) (passiveVP L.describe_V2)))) fullStopPunct)
TXT: [Ali Ibrahim Al-Sudani is described .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.this_Det (mkCN (mkCN (mkCN L.individual_N) (mkRS (mkRCl S.which_RP (mkVP (mkVP L.deliver_V2 (mkNP S.a_Quant (mkCN (mkCN L.sermon_N) (mkRS (mkRCl S.which_RP (mkVP L.call_VS (mkS (mkCl (mkNP (P.mkPN "West")) (passiveVP L.fight_V2))))))))) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN (mkCN L.mosque_N) (S.mkAdv L.in_Prep (mkNP S.a_Quant (E.CompoundCN L.district_N L.area_N)))))))))) (mkRS (mkRCl S.which_RP (mkVP L.endanger_V))))) (mkVP (passiveVP L.identify_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (P.mkAdV "secret") (mkVP L.serve_V))))))))) fullStopPunct)
TXT: [unknown qualified constant L.call_VS]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN (mkCN L.and_N) (mkRS (mkRCl S.which_RP S.he_NP L.add_V2))))))
TXT: [unknown qualified constant L.and_N]

SNT: 
AST: (mkText (mkUtt (mkNP (S.or_Conj (S.mkOrd (mkDigits "29")) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.deport_V2) (S.mkAdv L.DIR_Prep (mkNP (P.mkPN "France")))))) (mkRS (mkRCl S.which_RP (mkNP S.a_Quant (mkCN (mkCN L.ministry_N) (S.mkAdv L.about_Prep (mkNP S.a_Quant (mkCN L.interior_N))))) L.say_V2))) (mkListNP (mkNP S.a_Quant (mkCN L.imam_N)) (mkNP S.a_Quant (mkCN (E.CompoundCN L.group_N L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.preach_V)))))))))
TXT: [A function type is expected for or_Conj instead of type Conj]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkNum (mkDigits "129")) (E.CompoundCN L.group_N L.radical_N)) (mkVP (passiveVP L.expel_V2) (S.mkAdv L.DIR_Prep (mkNP S.a_Quant (mkCN (mkCN L.territory_N) (S.mkAdv S.possess_Prep (mkNP (P.mkPN "France")))))))))) fullStopPunct)
TXT: [1 Predef.BIND 2 Predef.BIND 9 group radicals are expelled to a territory of France .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Iran")) (mkNP S.a_Quant (mkCN (L.hanging_N (mkNP S.a_Quant (mkNum (mkDigits "2")) (mkCN (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (passiveVP L.convict_V2)))) (mkRS (mkRCl S.which_RP (mkVP L.rape_V))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.rape_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "AFP")) (mkVP (mkVP (mkVP L.byline_V) (dayMonthYearAdv (intMonthday (ss "30")) january_Month (intYear (ss "2010")))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Tehran"))))))) fullStopPunct)
TXT: [unknown qualified constant L.byline_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Iran")) (mkNP S.a_Quant (mkCN (L.hanging_N (mkNP S.a_Quant (mkNum (mkDigits "2")) (mkCN (mkCN L.man_N) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.convict_V2) (E.PurposeVP (mkVP L.rape_V2 (mkNP S.a_Quant (mkCN L.woman_N))))))))) (weekdayPunctualAdv saturday_Weekday))))))) fullStopPunct)
TXT: [A function type is expected for hanging_N instead of type N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.carry_out_V2) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Evin Prison")))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.hanging_N))))))))) fullStopPunct)
TXT: [it is carried out in Evin Prison that there is a hanging .]

SNT: 
AST: (mkText (mkUtt (mkNP (S.and_Conj (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.identify_V2) (S.mkAdv L.PRD_Prep (mkNP S.a_Quant (mkCN (L.name_N (S.mkOrd (mkDigits "1"))))))))) (mkRS (mkRCl S.which_RP (mkVP L.break_V2 (mkNP S.a_Quant (mkCN (mkCN L.house_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Lavasan")))))))) (mkRS (mkRCl S.which_RP (mkVP L.rape_V2 (mkNP S.a_Quant (mkCN L.woman_N))))) (mkRS (mkRCl S.which_RP say-01))) (mkListNP (mkNP (P.mkPN "Masoud")) (mkNP (P.mkPN "Mohammad"))))))
TXT: [constant not found: say]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.bring_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP (mkVP (passiveVP L.execute_V2) (yearAdv (intYear (ss "2010")))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Iran")))))))) (passiveVP L.number_V2))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.late_A L.hanging_N))))))))) fullStopPunct)
TXT: [it is brought that a person that is executed in 2010 in Iran is numbered that there is a late hanging .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (L.hanging_N (mkNP S.a_Quant (mkCN L.person_N)))))))) fullStopPunct)
TXT: [A function type is expected for hanging_N instead of type N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Tehran")) (mkVP L.say_VS (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP (mkVP (passiveVP L.need_V2) (E.PurposeVP (mkVP L.maintain_V2 (mkNP S.a_Quant (mkCN L.public_A (mkCN L.security_N)))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.penalize_V))))))) (mkS (mkCl (passiveVP L.apply_V2))))))))) fullStopPunct)
TXT: [unknown qualified constant L.penalize_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkAP (L.punishable_A (S.mkAdv L.in_Prep (mkNP S.a_Quant (E.CompoundCN L.group_N L.republic_N)))))))) fullStopPunct)
TXT: [A function type is expected for punishable_A instead of type A]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.clear_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (mkVP L.wed_V2 (mkNP (P.mkPN "Malik"))) (S.mkAdv L.PPT_Prep (mkNP (P.mkPN "Mirza")))))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.deal_V)))))))) fullStopPunct)
TXT: [it is cleared that it weds Malik Mirza that it deals .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "AFP")) (mkVP (mkVP (mkVP L.byline_V) (dayMonthYearAdv (intMonthday (ss "7")) april_Month (intYear (ss "2010")))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Hyderabad"))))))) fullStopPunct)
TXT: [unknown qualified constant L.byline_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.get_back_V2) (weekdayPunctualAdv wednesday_Weekday)) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (mkNP (P.mkPN "Shoaib Malik")) (S.mkAdv L.from_Prep (mkNP (P.mkPN "Pakistan")))) (mkVP (mkVP (P.mkAdV "celebrity") (passiveVP L.wed_V2)) (S.mkAdv L.PPT_Prep (mkNP (mkNP (P.mkPN "Sania Mirza")) (S.mkAdv L.from_Prep (mkNP (P.mkPN "India"))))))))))))) fullStopPunct)
TXT: [it is gotten back on Wednesday that Shoaib Malik from Pakistan is celebrity wedded Sania Mirza from India .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.mar_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.nuptials_N) (S.mkAdv S.possess_Prep (mkNP S.a_Quant (mkCN (mkCN L.couple_N) (S.mkAdv L.of_Prep (mkNP S.a_Quant (mkCN L.high_A (mkCN L.profile_N))))))))) (passiveVP L.prepare_V2))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (mkNP (P.mkPN "Ayesha Siddiqui")) (S.mkAdv L.from_Prep (mkNP (P.mkPN "India")))) (mkVP L.claim_VS (mkS (mkCl (mkVP (mkVP (passiveVP L.marry_V2) (yearAdv (intYear (ss "2002")))) (S.mkAdv L.PPT_Prep (mkNP (P.mkPN "Malik")))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.nuptials_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Farisa Siddiqui")) (mkVP (mkVP L.tell_VS (mkS (mkCl (mkNP (mkCN L.paper_N)) (passiveVP L.sign_V2)))) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN (E.CompoundCN L.news_N L.conference_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Hyderabad")))))))))) fullStopPunct)
TXT: [Farisa Siddiqui tells to a news conference in Hyderabad that paper is signed .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.be_done_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.settle_V)))))))) fullStopPunct)
TXT: [unknown qualified constant L.be_done_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.complex_A L.tale_N) (mkRS (mkRCl S.which_RP contradict-01)))) (mkVP (mkVP (P.mkAdV "apparent") (passiveVP L.end_V2)) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.deal_V)))))))) fullStopPunct)
TXT: [constant not found: contradict]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Ayesha")) (mkVP L.make_VS (mkS (mkCl (mkVP L.accuse_V))))))) fullStopPunct)
TXT: [unknown qualified constant L.accuse_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.she_NP (mkVP (P.mkAdV "also") (mkVP L.lodge_VS (mkS (mkCl (mkVP (mkVP L.complain_V) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN (mkCN L.police_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Hyderabad")))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.lodge_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "China")) (mkVP L.urge_VV (mkVP L.leave_V2 (mkNP S.a_Quant (E.CompoundCN L.quake_N L.zone_N))) (mkNP S.a_Quant (E.CompoundCN L.province_N L.monk_N)))))) fullStopPunct)
TXT: [no overload instance of mkVP]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "AFP")) (mkVP (mkVP (mkVP L.byline_V) (dayMonthYearAdv (intMonthday (ss "23")) april_Month (intYear (ss "2010")))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Beijing"))))))) fullStopPunct)
TXT: [unknown qualified constant L.byline_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "China")) (mkVP (mkVP L.say_VS (mkS (mkCl (mkVP L.urge_VV (mkVP (mkVP (mkVP return-01) (E.PurposeVP (mkVP L.avoid_VS (mkS (mkCl (mkVP L.hinder_VS (mkS (mkCl (mkVP (P.mkAdV "official") (mkVP L.operate_V)))))))))) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN L.monastery_N)))) (mkNP S.a_Quant (mkCN (mkCN L.monk_N) (mkRS (mkRCl S.which_RP (mkVP (mkVP (mkVP L.travel_V) (E.PurposeVP (mkVP L.aid_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.effort_N))))))) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (E.CompoundCN L.disaster_N L.zone_N)))))))))))) (weekdayPunctualAdv friday_Weekday))))) fullStopPunct)
TXT: [constant not found: return]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.organization_N) (mkRS (mkRCl S.which_RP (mkVP L.govern_V))))) (mkVP L.say_VS (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.duty_N) (S.mkAdv S.possess_Prep (mkNP S.a_Quant (mkCN (mkCN (mkCN L.person_N) (S.mkAdv L.in_Prep (mkNP S.a_Quant (E.CompoundCN L.quake_N L.zone_N)))) (mkRS (mkRCl S.which_RP (mkVP L.work_VS (mkS (mkCl (mkVP L.rescue_V))))))))))) (mkNP S.a_Quant (mkCN L.basic_A L.over_N)))) (mkS (mkCl (mkNP S.a_Quant (mkCN L.focus_N)) (mkVP (passiveVP L.move_V2) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN (mkCN L.and_N) (mkRS (mkRCl S.which_RP (mkVP L.need_V2 (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.specialize_V)))))))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.work_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkVP L.say_VS (mkS (mkCl (mkVP (mkVP (mkVP L.suggest_VS (mkS (mkCl (mkVP (passiveVP L.return_V2) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN L.monastery_N))))))) (S.mkAdv S.when_Subj (mkS (mkCl (mkVP (mkVP L.recognize_VS (mkS (mkCl (mkVP (P.mkAdV "positive") (mkVP L.contribute_V))))) (P.mkAdv "full")))))) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN (mkCN L.monk_N) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.come_V2) (S.mkAdv L.DIR_Prep (mkNP S.aPl_Det (mkCN L.other_A L.area_N)))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.come_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.activist_N)) (mkVP L.say_VS (mkS (mkCl (mkVP (mkVP (passiveVP L.tell_V2) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN (mkCN L.monk_N) (mkRS (mkRCl S.which_RP (mkVP (mkVP (mkVP L.travel_V) (E.PurposeVP (mkVP L.help_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.effort_N))))))) (S.mkAdv L.GOL_Prep (mkNP (ss "remote") (mkNP (P.mkPN "Yushu"))))))))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.leave_V))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.activist_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (E.CompoundCN L.group_N L.monk_N)) (mkVP L.play_V2 (mkNP S.a_Quant (mkCN L.key_A (mkCN L.role_N))))))) fullStopPunct)
TXT: [{s = "a"]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.contrast_V2) (E.PurposeVP (mkVP (say-01 (mkNP (P.mkPN "State Council")))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (mkVP (mkVP (passiveVP L.pass_over_V2) (P.mkAdv "large")) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.effort_N)))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (mkCN (mkCN L.media_N) (S.mkAdv S.possess_Prep (mkNP S.a_Quant (mkCN L.state_N))))) (mkVP L.report_V)))))))))))) fullStopPunct)
TXT: [constant not found: say]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.statement_N)) (mkVP L.say_VS (mkS (S.and_Conj (mkListS (mkS (mkCl (mkVP L.continue_VS (mkS (mkCl (mkVP L.organize_VS (mkS (mkCl (mkVP L.activity_V))))))))) (mkS (mkCl (mkVP L.play_V2 (mkNP S.a_Quant (mkCN L.positive_A L.role_N))))))) (mkListS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.monk_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Yushu"))))) (mkVP (P.mkAdV "rapid") (mkVP L.participate_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.effort_N)))))))) (mkS (mkCl (mkVP (mkVP L.donate_V) (S.mkAdv L.after_Prep (mkNP L.quake_N))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.continue_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (S.and_Conj (S.mkAdv S.possess_Prep (mkNP S.a_Quant (mkCN L.region_N)))) (mkListNP (mkNP S.a_Quant (mkCN L.lama_N)) (mkNP S.a_Quant (mkCN L.monk_N)))) (mkVP (passiveVP L.remain_V2) (S.mkAdv L.PRD_Prep (mkNP S.a_Quant (mkCN L.point_N))))))) fullStopPunct)
TXT: [A function type is expected for and_Conj instead of type Conj]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Woeser")) (mkVP (mkVP L.tell_VS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.element_N) (mkRS negativePol (mkRCl S.which_RP (mkAP L.stable_A))))) (mkNP S.a_Quant (mkCN (mkCN (E.CompoundCN L.especially_N L.attitude_N) (S.mkAdv S.when_Subj (mkS (mkCl (mkVP (mkVP L.follow_V) (S.mkAdv L.PPT_Prep (mkNP S.a_Quant (mkCN L.unrest_N)))))))) (S.mkAdv S.possess_Prep (mkNP S.a_Quant (mkCN (mkCN L.organization_N) (mkRS (mkRCl S.which_RP (mkVP L.govern_V))))))))))) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "AFP"))))))) fullStopPunct)
TXT: [unknown qualified constant L.especially_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.she_NP (mkVP L.say_VS (mkS (mkCl (mkVP (mkVP (passiveVP L.tell_V2) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN L.monk_N)))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (mkVP L.leave_V) (S.mkAdv S.because_Subj (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP (P.mkAdV "already") (mkVP L.do_V)))) (mkS (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl (mkVP (passiveVP L.become_V2) (S.mkAdv L.PRD_Prep (mkNP S.a_Quant (mkCN L.troublesome_N))))))))))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.do_V]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl (mkVP L.contrast_VV (mkVP (L.advise_VV (mkNP S.a_Quant (mkCN (mkCN L.authority_N) (mkRS (mkRCl S.which_RP (mkVP L.say_VS (mkS (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl (mkVP L.hinder_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.effort_N)))))))))))))))) (mkVP L.flood_V2 (mkNP S.a_Quant (mkCN (mkCN L.area_N) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.lie_V2) (S.mkAdv L.LOC_Prep (mkNP S.a_Quant (mkCN L.altitude_N))))))))) (mkNP L.all_Det (mkCN (mkCN L.civilian_N) (mkRS (mkRCl S.which_RP (mkVP L.mean_V)))))))))) fullStopPunct)
TXT: [unknown qualified constant L.contrast_VV]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.medic_N)) (mkVP L.say_VS (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "Palestine"))))) (passiveVP L.shoot_V2))) (mkS (mkCl (passiveVP L.die_V2))))))))) fullStopPunct)
TXT: [unknown qualified constant L.die_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "AFP")) (mkVP (mkVP (mkVP L.byline_V) (dayMonthYearAdv (intMonthday (ss "28")) april_Month (intYear (ss "2010")))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Gaza City"))))))) fullStopPunct)
TXT: [unknown qualified constant L.byline_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.local_A (mkCN L.medic_N))) (mkVP L.say_VS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "Palestine"))))) (mkVP (mkVP (mkVP (mkVP (passiveVP L.kill_V2) (S.mkAdv S.when_Subj (mkS (mkCl (mkVP L.protest_V))))) (weekdayPunctualAdv wednesday_Weekday)) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Gaza Strip")))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (mkVP L.fire_V) (S.mkAdv L.from_Prep (mkNP (P.mkPN "Israel")))))))))))))) fullStopPunct)
TXT: [a local medic says that a person from Palestine is killed when it protests on Wednesday in Gaza Strip that it fires from Israel .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Muawiya Hassanein")) (mkVP L.say_VS (mkS (mkCl (mkNP (P.mkPN "Ahmed Salim")) (mkVP (passiveVP L.take_V2) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "Al-Shifa")))))))))) fullStopPunct)
TXT: [Muawiya Hassanein says that Ahmed Salim is taken to Al-Shifa .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.military_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "Israel"))))) (mkVP L.comment_V)))) fullStopPunct)
TXT: [a military from Israel comments .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.witness_V))))) (mkVP L.say_VS (mkS (mkCl (mkNP (P.mkPN "Salim")) (mkVP L.accompany_V2 (mkNP S.a_Quant (mkCN (mkCN L.group_N) (mkRS (mkRCl S.which_RP (mkVP (mkVP L.hurl_V2 (mkNP S.a_Quant (mkCN L.rock_N))) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN (mkCN (mkCN L.troop_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "Israel")))) (mkRS (mkRCl S.which_RP (mkVP (mkVP (passiveVP L.station_V2) (S.mkAdv S.when_Subj (mkS (mkCl (mkVP L.protest_V))))) (S.mkAdv L.along_Prep (mkNP S.a_Quant (mkCN L.border_N))))))))))))))))))))) fullStopPunct)
TXT: [a person that witnesses says that Salim accompanies a group that hurls a rock to a troop from Israel that is stationed when it protests along a border .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (E.CompoundCN L.region_N L.person_N)) (mkVP L.begin_VS (mkS (mkCl (mkVP L.hold_VS (mkS (mkCl (mkVP L.demonstrate_VS (mkS (mkCl (mkVP L.oppose_V2 (mkNP S.a_Quant (mkCN (mkCN (mkCN L.zone_N) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.extend_V2) (S.mkAdv L.DIR_Prep (mkNP S.a_Quant (mkCN (E.CompoundCN L.security_N L.fence_N) (S.mkAdv S.possess_Prep (mkNP (P.mkPN "Israel")))))))))) (mkRS (mkRCl S.which_RP (mkVP L.buffer_V)))))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.begin_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.model_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.demonstrate_V)))))))) fullStopPunct)
TXT: [{s = "it"]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.contrast_V2) (E.PurposeVP (mkVP L.wound_V2 (mkNP S.a_Quant (mkCN L.person_N))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (P.mkPN "Israel")) (mkVP L.insist_VS (mkS (mkCl (mkVP (P.mkAdV "only") (mkVP (mkVP (mkVP L.fire_VS (mkS (mkCl (mkVP L.shoot_V)))) (E.PurposeVP (mkVP L.keep_VV (mkVP (mkVP out-06) (S.mkAdv L.LOC_Prep (mkNP S.a_Quant (mkCN (mkCN L.thing_N) (mkRS (mkRCl S.which_RP view-02)))))) (mkNP S.a_Quant (mkCN L.person_N))))) (S.mkAdv S.when_Subj (mkS (mkCl (mkVP L.protest_V)))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.fire_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.military_N)) (mkVP L.say_VS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.zone_N) (mkRS (mkRCl S.which_RP (mkVP L.buffer_V))))) (mkVP (passiveVP L.need_V2) (E.PurposeVP (mkVP L.prevent_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.militant_N)) (mkVP L.attack_V)))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.buffer_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.rabbi_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "Israel"))))) (mkVP (passiveVP L.accuse_V2) (E.PurposeVP (mkVP L.shoot_V2 (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.study_V))))))))))) fullStopPunct)
TXT: [a rabbi from Israel is accused to shoot a person that studies .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "AFP")) (mkVP (mkVP (mkVP L.byline_V) (dayMonthYearAdv (intMonthday (ss "5")) may_Month (intYear (ss "2010")))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Jerusalem"))))))) fullStopPunct)
TXT: [unknown qualified constant L.byline_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.police_N)) (mkVP (mkVP L.say_VS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN (mkCN L.rabbi_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "Israel")))) (mkRS (mkRCl S.which_RP (mkVP L.found_V2 (mkNP S.a_Quant (E.CompoundCN L.religion_N L.school_N))))))) (mkVP (passiveVP L.arrest_V2) (E.PurposeVP (mkVP suspect-01)))))) (weekdayPunctualAdv wednesday_Weekday))))) fullStopPunct)
TXT: [constant not found: suspect]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (mkCN L.local_A (mkCN L.media_N))) (mkVP L.say_VS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.fire_VS (mkS (mkCl (mkNP (P.mkPN "Eliyahu Liberty")) (mkVP (P.mkAdV "rifle") (passiveVP (L.shoot_V2 (mkNum (mkDigits "2"))))))))))) (mkRS (mkRCl S.which_RP (passiveVP L.mask_V2)))) (mkRS (mkRCl S.which_RP (mkVP L.motorcycle_V))))) (mkNP S.a_Quant (mkCN (mkCN L.rabbi_N) (mkRS negativePol (mkRCl S.which_RP (passiveVP L.name_V2))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.fire_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (mkCN (mkCN (P.mkN2 L.spokesman_N L.of_Prep) (mkNP S.a_Quant (E.CompoundCN L.city_N L.police_N))) (mkNP (P.mkPN "Shmuel Ben Ruby")))) (mkVP (mkVP (passiveVP L.tell_V2) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "AFP")))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (mkVP (passiveVP L.suspect_V2) (S.mkAdv L.PRD_Prep S.he_NP)) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (mkVP L.fire_V) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.motorcycle_N))))))))))))))) fullStopPunct)
TXT: [spokesman of a city police Shmuel Ben Ruby is told to AFP that it is suspected him that it fires in a motorcycle .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.contrast_V2) (E.PurposeVP (mkVP ban-01))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (mkVP L.attack_V) (monthAdv january_Month))))))))) fullStopPunct)
TXT: [constant not found: ban]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.rabbi_N)) (passiveVP L.arrest_V2)))) fullStopPunct)
TXT: [a rabbi is arrested .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.rabbi_N) (mkRS (mkRCl S.which_RP (mkVP L.serve_VV (mkVP attempt-01) (t (temporal-quantity (mkNum (mkDigits "2")) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.prison_N)))))))))) (mkNP S.a_Quant (mkCN L.felon_N)))) (mkS (mkCl (mkNP (P.mkPN "Liberty")) (passiveVP L.convict_V2))))) (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (mkCN L.media_N)) (mkVP L.report_V)))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.rabbi_N) (mkRS (mkRCl S.which_RP (mkVP L.serve_VV (mkVP attempt-01) (t (temporal-quantity (mkNum (mkDigits "2")) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.prison_N)))))))))) (mkNP S.a_Quant (mkCN L.felon_N)))) (mkS (mkCl (mkNP (P.mkPN "Liberty")) (passiveVP L.convict_V2))))) (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (mkCN L.media_N)) (mkVP L.report_V)))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (mkCN (mkCN (P.mkN2 L.governor_N L.of_Prep) (mkNP (P.mkPN "Nigeria"))) (mkRS (mkRCl S.which_RP (mkVP L.face_V2 (mkNP S.a_Quant (mkCN L.graft_N))))))) (mkVP (passiveVP L.arrest_V2) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Dubai"))))))) fullStopPunct)
TXT: [governor of Nigeria that faces a graft is arrested in Dubai .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "AFP")) (mkVP (mkVP (mkVP L.byline_V) (dayMonthYearAdv (intMonthday (ss "13")) may_Month (intYear (ss "2010")))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Abuja"))))))) fullStopPunct)
TXT: [unknown qualified constant L.byline_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.governor_N L.of_Prep) (mkRS (mkRCl S.which_RP (mkVP L.face_VS (mkS (mkCl (passiveVP L.charge_V2))))))) (mkVP (passiveVP L.arrest_V2) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Dubai"))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.governor_N L.of_Prep) (mkRS (mkRCl S.which_RP (mkVP L.face_VS (mkS (mkCl (passiveVP L.charge_V2))))))) (mkVP (passiveVP L.arrest_V2) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Dubai"))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Interpol")) (mkVP (mkVP arrest-01 (mkCN (mkCN (P.mkN2 L.governor_N L.of_Prep) (mkNP (P.mkPN "Delta"))) (mkNP (P.mkPN "James Ibori")))) (weekdayPunctualAdv wednesday_Weekday))))) fullStopPunct)
TXT: [constant not found: arrest]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.confirm_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (P.mkPN "Interpol")) (mkVP L.arrest_V2 S.he_NP)))))))) fullStopPunct)
TXT: [it is confirmed that Interpol arrests him .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Ibori")) (passiveVP L.charge_V2)))) fullStopPunct)
TXT: [Ibori is charged .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Metropolitan Police")) (mkVP L.confirm_VS (mkS (mkCl (mkNP (P.mkPN "Ibori")) (passiveVP L.arrest_V2))))))) fullStopPunct)
TXT: [Metropolitan Police confirms that Ibori is arrested .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.authority_N)) (mkVP (mkVP (mkVP L.arrest_VV (mkVP suspect-01) (mkNP S.a_Quant (mkCN L.man_N))) (weekdayPunctualAdv wednesday_Weekday)) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Dubai"))))))) fullStopPunct)
TXT: [unknown qualified constant L.arrest_VV]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP (P.mkPN "James Onanefe Ibori")) (passiveVP L.detain_V2))) (mkS (mkCl (mkVP (mkVP (passiveVP L.schedule_V2) (S.mkAdv L.TMP_Prep (mkNP S.a_Quant (mkCN L.due_A L.course_N)))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (passiveVP L.appear_V2) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.court_N))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.TMP_Prep]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.authority_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "UK"))))) (mkVP L.seek_VS (mkS (mkCl (mkVP L.extradite_V))))))) fullStopPunct)
TXT: [unknown qualified constant L.seek_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.have_concession_VV (mkVP decline-02))))) fullStopPunct)
TXT: [unknown qualified constant L.have_concession_VV]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN L.official_N)) (mkNP S.a_Quant (mkCN L.official_N)))) (mkVP L.say_VS (mkS negativePol (mkCl (mkVP L.have_V2 (mkNP (mkCN L.information_N))))))))) fullStopPunct)
TXT: [an official and an official say that it doesn't have information .]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.militant_N) (mkRS (mkRCl S.which_RP (passiveVP L.arm_V2))))) (mkVP L.keep_V2 (mkNP S.a_Quant (mkCN L.vigil_N))))) (mkS (mkCl (mkVP L.block_VV (mkVP arrest-01) (mkNP S.a_Quant (E.CompoundCN L.security_N L.agent_N)))))))) fullStopPunct)
TXT: [unknown qualified constant L.block_VV]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.he_NP (mkVP L.flee_V2 (mkNP S.a_Quant (mkCN L.country_N)))))) fullStopPunct)
TXT: [he flees a country .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.federal_A L.high_A L.court_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Asaba"))))) (mkVP L.acquit_V2 S.he_NP)))) fullStopPunct)
TXT: [no overload instance of mkCN]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (P.mkAdV "wide") (passiveVP L.believe_V2)) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (ss "affluent") (mkNP (P.mkPN "Ibori"))) (mkVP (mkVP L.bankroll_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.person_N)) (mkVP L.campaign_VS (mkS (mkCl (mkVP L.elect_V))))))) (yearAdv (intYear (ss "2007"))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.bankroll_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.international_A L.warrant_N) (E.PurposeVP (mkVP L.arrest_V)))) (passiveVP L.issue_V2)))) fullStopPunct)
TXT: [unknown qualified constant L.arrest_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.prosecute_V))))) (mkVP (mkVP (mkVP L.make_VS (mkS (mkCl (mkVP (passiveVP L.apply_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.restrain_V)))))))) (dayMonthYearAdv (intMonthday (ss "2")) august_Month (intYear (ss "2007")))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Southwark Crown Court"))))))) fullStopPunct)
TXT: [unknown qualified constant L.restrain_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.succeed_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (passiveVP L.bid_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.he_Pron (mkCN L.asset_N)) (passiveVP L.freeze_V2)))))))))))) fullStopPunct)
TXT: [it is succeeded that it is bid / bidden that his asset is frozen .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Waziri")) (mkVP L.say_VS (mkS S.and_Conj (mkListS (mkS (mkCl S.he_NP (passiveVP L.undergo_V2))) (mkS (mkCl (mkVP (passiveVP L.discuss_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (passiveVP L.plan_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.extradite_V))))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.extradite_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.she_NP (mkVP L.add_VS (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN (mkCN L.man_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "UK")))) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.charge_V2) (S.mkAdv L.PRD_Prep (mkNP S.he_Pron (mkCN L.case_N)))))))) (mkVP (mkVP L.dispatch_V2 (mkNP S.a_Quant (mkCN L.detective_N))) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "Dubai")))))) (mkS (mkCl S.we_NP (mkVP L.send_VV (mkVP (mkVP join-04) (E.PurposeVP (mkVP L.start_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.process_N))))))) (mkNP S.a_Quant (mkCN L.person_N))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.send_VV]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (ss "populous") (mkNP (P.mkPN "Nigeria"))) (mkVP (passiveVP L.rank_V2) (E.PurposeVP (mkVP (mkVP include-91) (S.mkAdv (mkNP S.somePl_Det (mkCN (mkCN (mkCN L.nation_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Earth")))) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.corrupt_V2) (P.mkAdv "most"))))))))))))) fullStopPunct)
TXT: [Warning: ignoring lock fields in resolving mkNP (ss "populous") (mkNP (mkPN "Nigeria"))]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.governor_N L.of_Prep)) (passiveVP L.arrest_V2)))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.governor_N L.of_Prep)) (passiveVP L.arrest_V2)))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.public_A (mkCN L.fund_N))) (mkNP (mkCN (P.mkN2 L.governor_N L.of_Prep) (mkNP S.a_Quant (mkNum (mkDigits "36")) (mkCN (mkCN L.state_N) (S.mkAdv L.part_Prep (mkNP (P.mkPN "Nigeria"))))))) (passiveVP L.control_V2)))) fullStopPunct)
TXT: [no overload instance of mkCl]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.spread_V2) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN (mkCN L.street_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Dhaka"))))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.garment_N)) (mkVP (passiveVP L.protest_V2) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Bangladesh"))))))))))) fullStopPunct)
TXT: [it is spread in a street in Dhaka that a garment is protested in Bangladesh .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "AFP")) (mkVP (mkVP (mkVP L.byline_V) (dayMonthYearAdv (intMonthday (ss "30")) june_Month (intYear (ss "2010")))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Dhaka"))))))) fullStopPunct)
TXT: [unknown qualified constant L.byline_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP (mkVP L.work_V) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (E.CompoundCN L.garment_N L.factory_N)))))))) (mkVP (mkVP L.block_V2 (mkNP S.a_Quant (mkCN L.key_A (mkCN (mkCN L.road_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Dhaka"))))))) (weekdayPunctualAdv wednesday_Weekday))))) fullStopPunct)
TXT: [a person that works to a garment factory blocks a key road in Dhaka on Wednesday .]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.police_V))))) (mkVP L.fire_V2 (mkNP S.a_Quant (E.CompoundCN L.tear_N L.gas_N))))) (mkS (mkCl (mkVP L.use_VV (mkVP L.disperse_V2 (mkNP S.a_Quant (mkCN (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.sew_V2 (mkNP S.a_Quant (mkCN L.clothes_N)))))) (mkRS (mkRCl S.which_RP (mkVP L.work_V)))))) (mkNP S.a_Quant (E.CompoundCN L.water_N L.cannon_N)))))))) fullStopPunct)
TXT: [unknown qualified constant L.police_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.hold_VS (mkS (mkCl (passiveVP L.protest_V2))))))) (mkRS (mkRCl S.which_RP (mkVP L.work_V))))) (mkVP (mkVP L.mass_V) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.street_N))))))) fullStopPunct)
TXT: [a person that holds that it is protested that works masses in a street .]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN (mkCN L.and_N) (mkRS (mkRCl S.which_RP tell-01))))))
TXT: [unknown qualified constant L.and_N]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.a_Quant (mkCN L.trouble_N)) (mkVP (passiveVP L.begin_V2) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkNum (mkDigits "4")) (mkCN (mkCN L.factory_N) (mkRS (mkRCl S.which_RP (mkNP S.a_Quant (mkCN (mkCN L.one_N) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.include_V2) (S.mkAdv (mkNP S.a_Quant (mkCN (mkCN (mkCN (mkCN L.company_N) (S.mkAdv S.possess_Prep (mkNP S.a_Quant (mkCN L.country_N)))) (mkRS (mkRCl S.which_RP (mkVP L.lead_V)))) (mkRS (mkRCl S.which_RP (mkVP L.manufacture_V2 (mkNP S.a_Quant (mkCN L.garment_N))))))))))))) L.own_V2)))))))) (mkS (mkCl (mkVP (P.mkAdV "then") (mkVP (passiveVP L.spread_V2) (S.mkAdv L.in_Prep (mkNP L.all_Det (mkCN (mkCN L.factory_N) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN (mkCN L.stretch_N) (S.mkAdv L.in_Prep (mkNP S.and_Conj (mkListNP (mkNP (P.mkPN "Kafrul")) (mkNP (P.mkPN "Mirpur")))))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.one_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.he_NP (mkVP L.say_VS (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP L.all_Det (mkCN (mkCN (mkCN L.person_N) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.area_N)))) (mkRS (mkRCl S.which_RP (mkVP L.work_V))))) (mkVP L.walk_VV (mkVP (mkVP out-06) (S.mkAdv L.LOC_Prep (mkNP S.a_Quant (mkCN L.factory_N))))))) (mkS (mkCl (mkVP L.join_VS (mkS (mkCl (mkVP L.protest_V)))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.walk_VV]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.unrest_N)) (mkAP L.most_AdA (mkAP (L.late_A (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.include_V2) (S.mkAdv (mkNP S.a_Quant (mkCN L.series_N)))))))))))) fullStopPunct)
TXT: [A function type is expected for late_A instead of type A]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.factory_N) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN (E.CompoundCN L.industry_N L.zone_N) (mkRS (mkRCl S.which_RP (mkAP L.key_A)))))))) (passiveVP L.shut_down_V2)))) fullStopPunct)
TXT: [a factory in an industry zone that is key is shut down .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.factory_N)) (passiveVP L.reopen_V2)))) fullStopPunct)
TXT: [a factory is reopened .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN (mkCN (mkCN L.person_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "Bangladesh")))) (mkRS (mkRCl S.which_RP (mkVP (mkVP L.make_V2 (mkNP S.a_Quant (mkCN L.clothes_N))) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN (E.CompoundCN L.region_N L.brand_N) (mkRS (mkRCl S.which_RP (mkAP L.major_A)))))))))) (mkRS (mkRCl S.which_RP (mkVP L.work_V))))) (mkVP L.demand_V2 (mkNP S.a_Quant (mkCN L.wage_N)))))) fullStopPunct)
TXT: [a person from Bangladesh that makes a clothes to a region brand that is major that works demands a wage .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.minimum_A L.wage_N)) (mkVP (passiveVP L.have_quant_V2) (S.mkAdv (mkNP S.a_Quant (mkNum (mkDigits "25")) (mkCN L.dollar_N))))))) fullStopPunct)
TXT: [unknown qualified constant L.have_quant_V2]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.organization_N) (mkRS (mkRCl S.which_RP (mkVP L.govern_V))))) (mkVP L.say_VS (mkS (mkCl (mkVP L.raise_V2 (mkNP S.a_Quant (mkCN L.salary_N)))))))) (mkS (mkCl (mkVP L.urge_VV (mkVP patient-01) p)))))) fullStopPunct)
TXT: [constant not found: patient]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.garment_N)) (mkVP L.account_V)))) fullStopPunct)
TXT: [a garment accounts .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.factory_N)) (mkVP L.employ_V)))) fullStopPunct)
TXT: [unknown qualified constant L.employ_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.retailer_N)) (mkVP (mkVP L.write_VS (mkS (mkCl (mkVP L.request_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.wage_N)) (passiveVP L.increase_V2))))))) (monthAdv january_Month))))) fullStopPunct)
TXT: [a retailer writes in January that it requests that a wage is increased .]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN (mkCN L.and_N) (mkRS (mkRCl S.which_RP (mkNP S.a_Quant (mkCN L.letter_N)) L.say_V2))))))
TXT: [unknown qualified constant L.and_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.kidnap_V))))) (mkVP (mkVP L.free_V2 (mkNP S.a_Quant (mkCN L.journalist_N))) (S.mkAdv L.in_Prep (mkNP S.the_Quant (mkCN (mkCN (mkCN L.south_N) (S.mkAdv L.part_Prep (mkNP (P.mkPN "Nigeria")))) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.enrich_V2) (S.mkAdv L.PPT_Prep (mkNP (mkCN L.oil_N)))))))))))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.union_N))))))))) fullStopPunct)
TXT: [unknown qualified constant L.kidnap_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "AFP")) (mkVP (mkVP (mkVP L.byline_V) (dayMonthYearAdv (intMonthday (ss "18")) july_Month (intYear (ss "2010")))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Lagos"))))))) fullStopPunct)
TXT: [unknown qualified constant L.byline_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.head_VS (mkS (mkCl (mkNP S.a_Quant (mkCN (L.union_N (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.report_V))))))))))))))) (mkVP L.say_VS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP (mkVP L.abduct_V2 (mkNP S.a_Quant (mkNum (mkDigits "4")) (mkCN L.journalist_N))) (S.mkAdv L.in_Prep (mkNP S.the_Quant (mkCN (mkCN (mkCN L.south_N) (S.mkAdv L.part_Prep (mkNP (P.mkPN "Nigeria")))) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.enrich_V2) (S.mkAdv L.PPT_Prep (mkNP (mkCN L.oil_N))))))))))))) (mkRS (mkRCl S.which_RP (mkVP L.kidnap_V))))) (mkVP (mkVP L.release_V) (weekdayPunctualAdv sunday_Weekday)))))))) fullStopPunct)
TXT: [unknown qualified constant L.head_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Usman Leman")) (mkVP L.say_VS (mkS (mkCl (mkVP (mkVP L.put_VS (mkS (mkCl (S.they_NP (mkRS (mkRCl S.which_RP (mkVP L.say_VS (mkS (mkCl (passiveVP L.release_V2))))))) (mkVP L.call_V2 S.we_NP)))) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN L.through_N)))))))))) fullStopPunct)
TXT: [unknown qualified constant L.put_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Leman")) (mkVP L.say_VS (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.a_Quant (mkCN L.police_N)) (mkVP L.meet_up_V2 (mkNP S.a_Quant (mkCN (mkCN L.journalist_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "Nigeria")))))))) (mkS (mkCl (mkVP L.make_V2 (mkNP S.a_Quant (mkCN L.way_N))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.meet_up_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.contrast_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (mkVP L.kidnap_V) (S.mkAdv L.in_Prep (mkNP S.the_Quant (mkCN (mkCN L.south_N) (S.mkAdv L.part_Prep (mkNP (P.mkPN "Nigeria")))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.kidnap_V]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP (mkVP (passiveVP L.illustrate_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.profile_N) (mkRS (mkRCl S.which_RP (passiveVP L.target_V2))))) (passiveVP L.widen_V2))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.journalist_N)) (passiveVP L.abduct_V2))))))) (mkS (mkCl (mkVP L.spark_VS (mkS (mkCl (mkVP L.outrage_V))))))))) fullStopPunct)
TXT: [unknown qualified constant L.spark_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (P.mkAdV "also") (mkVP L.call_VS (mkS (mkCl S.they_NP (mkVP (P.mkAdV "immediate") (passiveVP L.release_V2))))))))) fullStopPunct)
TXT: [unknown qualified constant L.call_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (L.kidnap_V (S.mkOrd (mkDigits "2")))) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.volatile_A L.region_N))))))) fullStopPunct)
TXT: [unknown qualified constant L.kidnap_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (mkCN (P.mkN2 L.member_N L.of_Prep) (mkNP S.a_Quant (mkCN (E.CompoundCN L.television_N L.crew_N) (S.mkAdv S.possess_Prep (mkNP (P.mkPN "M-Net Supersport"))))))) (mkVP (mkVP (passiveVP L.seize_V2) (monthAdv march_Month)) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Imo State"))))))) fullStopPunct)
TXT: [member of a television crew of M-Net Supersport is seized in March in Imo State .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.they_NP (passiveVP L.free_V2)))) fullStopPunct)
TXT: [they are freed .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.contrast_V2) (E.PurposeVP (mkVP (mkVP carry_out-03) (E.PurposeVP (mkVP L.collect_V2 (mkNP S.a_Quant (mkCN L.cash_N))))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.militant_N) (mkRS (mkRCl S.which_RP (mkVP L.say_VS (mkS (mkCl (mkVP L.seek_VS (mkS (mkCl (mkNP S.a_Quant (E.CompoundCN L.oil_N L.revenue_N)) (passiveVP L.distribute_V2))))))))))) (mkVP L.claim_VS (mkS (mkCl (mkVP L.kidnap_V2 (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP (P.mkAdV "oil") (mkVP L.work_V))))))))))))))))) fullStopPunct)
TXT: [constant not found: carry_out]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Georgia")) (mkVP (mkVP L.seize_V2 (mkNP S.a_Quant (mkCN (mkCN L.ship_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "Ukraine")))))) (S.mkAdv S.because_Subj (mkS (mkCl (mkVP L.visit_V2 (mkNP (P.mkPN "Abkhazia")))))))))) fullStopPunct)
TXT: [Georgia seizes a ship from Ukraine because it visits Abkhazia .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "AFP")) (mkVP (mkVP (mkVP L.byline_V) (dayMonthYearAdv (intMonthday (ss "29")) july_Month (intYear (ss "2010")))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Tbilisi"))))))) fullStopPunct)
TXT: [unknown qualified constant L.byline_V]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP (P.mkPN "Georgia")) (mkVP (mkVP L.seize_V2 (mkNP S.a_Quant (mkCN (E.CompoundCN L.cargo_N L.vessel_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "Ukraine")))))) (weekdayPunctualAdv thursday_Weekday)))) (mkS (mkCl (mkVP L.arrest_VV (mkVP L.visit_V2 (mkNP (P.mkPN "Abkhazia"))) (mkNP S.a_Quant (mkCN L.crew_N)))))))) fullStopPunct)
TXT: [unknown qualified constant L.arrest_VV]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP L.seize_V2 (mkNP (P.mkPN "Accord"))))) (mkS (mkCl (mkVP L.arrest_VV (mkVP breach-01) (mkNP S.a_Quant (mkCN L.crew_N))))))) (mkNP (mkCN (mkCN (P.mkN2 L.officer_N L.of_Prep) (mkNP (P.mkPN "Coast Guard"))) (mkNP (P.mkPN "Ramaz Tedoradze")))) (passiveVP L.say_V2)))) fullStopPunct)
TXT: [unknown qualified constant L.arrest_VV]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.channel_N)) (mkVP L.report_VS (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.vessel_N) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.load_V2) (S.mkAdv L.PPT_Prep (mkNP (mkCN L.wheat_N)))))))) (mkVP (passiveVP L.anchor_V2) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN (mkCN (mkCN L.port_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Poti")))) (S.mkAdv S.possess_Prep (mkNP (P.mkPN "Georgia"))))))))) (mkS (mkCl (mkVP L.investigate_V))))))))) fullStopPunct)
TXT: [a channel reports that a vessel that is loaded wheat is anchored in a port in Poti of Georgia and it investigates .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (mkCN (mkCN L.law_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "Georgia"))))) (mkVP L.ban_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.economy_N)) (passiveVP L.activity_V2))))))) fullStopPunct)
TXT: [unknown qualified constant L.ban_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl (mkVP L.face_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.foreign_A L.person_N)) (passiveVP L.prosecute_V2)))))))))) fullStopPunct)
TXT: [unknown qualified constant L.face_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Georgia")) (mkVP L.seize_V2 (mkNP S.a_Quant (E.CompoundCN L.or_N L.ship_N)))))) fullStopPunct)
TXT: [unknown qualified constant L.or_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.contrast_V2) (E.PurposeVP (mkVP (mkVP release-01) (S.mkAdv S.because_Subj (mkS (mkCl (mkNP (P.mkPN "Ankara")) (mkVP L.pressure_V))))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (P.mkPN "Georgia")) (mkVP sentence-01 (have-org-role-91 (P.mkN2 L.captain_N L.of_Prep)))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.contrast_V2) (E.PurposeVP (mkVP (mkVP release-01) (S.mkAdv S.because_Subj (mkS (mkCl (mkNP (P.mkPN "Ankara")) (mkVP L.pressure_V))))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (P.mkPN "Georgia")) (mkVP sentence-01 (have-org-role-91 (P.mkN2 L.captain_N L.of_Prep)))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.and_Conj (mkListNP (mkNP (P.mkPN "Abkhazia")) (mkNP (P.mkPN "South Ossetia")))) (mkVP (mkVP L.break_VS (mkS (mkCl (mkNP (P.mkPN "Tbilisi")) (mkVP L.control_V)))) (S.mkAdv S.when_Subj (mkS (mkCl (mkVP L.war_V))))))) (mkS (mkCl (mkNP (P.mkPN "Moscow")) (mkVP (mkVP L.recognize_V) (S.mkAdv L.PRD_Prep (mkNP S.a_Quant (mkCN (mkCN L.state_N) (mkRS negativePol (mkRCl S.which_RP (mkVP L.depend_V)))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.break_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.pirate_N)) (mkVP L.say_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.ransom_N)) (mkVP (passiveVP L.pay_V2) (S.mkAdv L.PPT_Prep (mkNP S.a_Quant (mkCN (mkCN L.tanker_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "South Korea"))))))))))))) fullStopPunct)
TXT: [a pirate says that a ransom is paid a tanker from South Korea .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "AFP")) (mkVP (mkVP (mkVP L.byline_V) (dayMonthYearAdv (intMonthday (ss "6")) november_Month (intYear (ss "2010")))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Mogadishu"))))))) fullStopPunct)
TXT: [unknown qualified constant L.byline_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.pirate_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "Somalia"))))) (mkVP (mkVP L.say_VS (mkS (mkCl (mkVP L.receive_V2 (mkNP S.a_Quant (mkCN L.record_A L.ransom_N)))))) (weekdayPunctualAdv saturday_Weekday))))) fullStopPunct)
TXT: [a pirate from Somalia says on Saturday that it receives a record ransom .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkNum (mkDigits "1")) (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.include_V2) (S.mkAdv (mkNP S.a_Quant (mkCN L.pirate_N)))))))) (mkVP (mkVP L.tell_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.boat_N)) (passiveVP L.free_V2)))) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "AFP"))))))) fullStopPunct)
TXT: [no overload instance of mkAdv]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Abdi Yare")) (mkVP (mkVP L.say_VS (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP (mkCN L.money_N)) (passiveVP L.drop_V2))) (mkS (mkCl (mkNP S.a_Quant (mkCN L.pirate_N)) (mkVP L.share_V)))))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Hobyo"))))))) fullStopPunct)
TXT: [Abdi Yare says in Hobyo that money is dropped and a pirate shares .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.aPl_Det (mkCN (mkCN L.other_A L.source_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Hobyo"))))) (mkVP L.confirm_V2 (mkNP S.a_Quant (mkCN (mkCN (mkCN (mkCN L.sum_N) (mkRS (mkRCl S.which_RP (mkVP L.exceed_V)))) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.equal_V2) (S.mkAdv L.PPT_Prep (mkNP S.a_Quant (mkCN (mkCN L.large_A L.ransom_N) (mkRS (mkRCl S.which_RP (mkVP (P.mkAdV "previous") (passiveVP L.pay_V2))))))))))) (mkRS (mkRCl S.which_RP (passiveVP L.pay_V2))))))))) fullStopPunct)
TXT: [unknown qualified constant L.exceed_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Samho Dream")) (mkVP (mkVP (mkVP (passiveVP L.seize_V2) (S.mkAdv S.when_Subj (mkS (mkCl (mkVP L.head_V2 (mkNP (P.mkPN "Louisiana"))))))) (monthAdv april_Month)) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Indian Ocean"))))))) fullStopPunct)
TXT: [Samho Dream is seized when it heads Louisiana in April in Indian Ocean .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN (mkCN L.pirate_N) (mkRS (mkRCl S.which_RP (mkVP L.use_V2 (mkNP S.a_Quant (mkCN (mkCN L.speedboat_N) (mkRS (mkRCl S.which_RP operate-01)))))))) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.arm_V2) (P.mkAdv "heavy")))))) (mkVP (mkVP L.attack_V2 (mkNP S.a_Quant (mkCN L.ship_N))) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.vast_A L.area_N))))))) fullStopPunct)
TXT: [constant not found: operate]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.they_NP (mkVP L.hold_V2 (mkNP S.a_Quant (mkCN L.vessel_N)))))) fullStopPunct)
TXT: [they hold a vessel .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.big_A L.sum_N)) (mkVP (P.mkAdV "previous") (passiveVP L.pay_V2))))) fullStopPunct)
TXT: [a big sum is previous paid .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.source_N)) (mkVP L.say_VS (mkS S.and_Conj (mkListS (mkS (mkCl (S.mkAdv L.between_Prep (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkNum (mkDigits "3000000")) (mkCN L.dollar_N)) (mkNP S.a_Quant (mkNum (mkDigits "8000000")) (mkCN L.dollar_N))))) (mkVP (passiveVP L.pay_V2) (monthYearAdv january_Month (intYear (ss "2009")))))) (mkS (mkCl (S.mkAdv L.between_Prep (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkNum (mkDigits "5500000")) (mkCN L.dollar_N)) (mkNP S.a_Quant (mkNum (mkDigits "9000000")) (mkCN L.dollar_N))))) (mkVP (passiveVP L.pay_V2) (S.mkAdv L.PPT_Prep (mkNP (P.mkPN "Maran Centaurus")))))))))))) fullStopPunct)
TXT: [a source says that between 3 Predef.BIND , Predef.BIND 0 Predef.BIND 0 Predef.BIND 0 Predef.BIND , Predef.BIND 0 Predef.BIND 0 Predef.BIND 0 dollars and 8 Predef.BIND , Predef.BIND 0 Predef.BIND 0 Predef.BIND 0 Predef.BIND , Predef.BIND 0 Predef.BIND 0 Predef.BIND 0 dollars is paid in January 2009 and between 5 Predef.BIND , Predef.BIND 5 Predef.BIND 0 Predef.BIND 0 Predef.BIND , Predef.BIND 0 Predef.BIND 0 Predef.BIND 0 dollars and 9 Predef.BIND , Predef.BIND 0 Predef.BIND 0 Predef.BIND 0 Predef.BIND , Predef.BIND 0 Predef.BIND 0 Predef.BIND 0 dollars is paid Maran Centaurus .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.official_N L.of_Prep)) (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN (E.CompoundCN L.missile_N L.salvo_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "US"))))) (mkVP (mkVP L.kill_V2 (mkNP S.a_Quant (mkNum (mkDigits "15")) (mkCN L.person_N))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Pakistan"))))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.official_N L.of_Prep)) (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN (E.CompoundCN L.missile_N L.salvo_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "US"))))) (mkVP (mkVP L.kill_V2 (mkNP S.a_Quant (mkNum (mkDigits "15")) (mkCN L.person_N))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Pakistan"))))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "AFP")) (mkVP (mkVP (mkVP L.byline_V) (dayMonthYearAdv (intMonthday (ss "28")) december_Month (intYear (ss "2010")))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Miranshah"))))))) fullStopPunct)
TXT: [unknown qualified constant L.byline_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.official_N L.of_Prep)) (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.barrage_N) (mkRS (mkRCl S.which_RP (mkVP L.obliterate_V2 (mkNP (S.and_Conj (mkRS (mkRCl S.which_RP (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.fight_V))))) L.use_V2))) (mkListNP (mkNP S.a_Quant (mkCN L.compound_N)) (mkNP S.a_Quant (mkCN L.vehicle_N))))))))) (mkVP (mkVP (mkVP L.kill_V2 (mkNP S.a_Quant (mkCN L.militant_N))) (weekdayPunctualAdv tuesday_Weekday)) (S.mkAdv L.in_Prep (mkNP (ss "tribal") (mkNP (P.mkPN "North Waziristan")))))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.official_N L.of_Prep)) (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.barrage_N) (mkRS (mkRCl S.which_RP (mkVP L.obliterate_V2 (mkNP (S.and_Conj (mkRS (mkRCl S.which_RP (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.fight_V))))) L.use_V2))) (mkListNP (mkNP S.a_Quant (mkCN L.compound_N)) (mkNP S.a_Quant (mkCN L.vehicle_N))))))))) (mkVP (mkVP (mkVP L.kill_V2 (mkNP S.a_Quant (mkCN L.militant_N))) (weekdayPunctualAdv tuesday_Weekday)) (S.mkAdv L.in_Prep (mkNP (ss "tribal") (mkNP (P.mkPN "North Waziristan")))))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.a_Quant (mkNum (mkDigits "2")) (mkCN L.compound_N)) (mkVP (passiveVP L.destroy_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (L.strike_V (S.mkOrd (mkDigits "1")))))))))) (mkS (mkCl (mkVP (mkVP L.kill_V2 (mkNP S.a_Quant (mkNum (mkDigits "5")) (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.rebel_V)))))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Ghulam Khan")))))))) (have-org-role-91 (P.mkN2 (L.official_N (S.mkAdv L.from_Prep (mkNP (P.mkPN "Pakistan")))) L.of_Prep)) (passiveVP L.say_V2)))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.a_Quant (mkNum (mkDigits "2")) (mkCN L.compound_N)) (mkVP (passiveVP L.destroy_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (L.strike_V (S.mkOrd (mkDigits "1")))))))))) (mkS (mkCl (mkVP (mkVP L.kill_V2 (mkNP S.a_Quant (mkNum (mkDigits "5")) (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.rebel_V)))))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Ghulam Khan")))))))) (have-org-role-91 (P.mkN2 (L.official_N (S.mkAdv L.from_Prep (mkNP (P.mkPN "Pakistan")))) L.of_Prep)) (passiveVP L.say_V2)))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.they_NP (mkVP L.say_VS (mkS (mkCl (mkNP S.a_Quant (mkNum (mkDigits "10")) (mkCN L.militant_N)) (mkVP (mkVP (passiveVP L.kill_V2) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Nawab")))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (mkVP L.strike_V) (P.mkAdv "further")))))))))))) fullStopPunct)
TXT: [they say that 1 Predef.BIND 0 militants are killed in Nawab that it strikes further .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.official_N L.of_Prep)) (mkVP (mkVP (passiveVP L.tell_V2) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "AFP")))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.person_N)) (mkVP (passiveVP L.kill_V2) (S.mkAdv S.when_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.drone_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "US"))))) (mkVP L.fire_V2 (mkNP S.a_Quant (mkCN L.missile_N)))))))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.official_N L.of_Prep)) (mkVP (mkVP (passiveVP L.tell_V2) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "AFP")))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.person_N)) (mkVP (passiveVP L.kill_V2) (S.mkAdv S.when_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.drone_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "US"))))) (mkVP L.fire_V2 (mkNP S.a_Quant (mkCN L.missile_N)))))))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.he_NP (mkVP L.say_VS (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.drone_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "US"))))) (mkVP L.fire_V2 (mkNP S.a_Quant (mkCN L.missile_N))))) (mkS (mkCl (mkVP L.strike_V2 (mkNP L.more_Det (mkNum (mkDigits "2")) (mkCN L.car_N))))))))))) fullStopPunct)
TXT: [no overload instance of mkNP]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.official_N L.of_Prep) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Miranshah"))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Peshawar")))) (passiveVP L.confirm_V2)))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.official_N L.of_Prep) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Miranshah"))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Peshawar")))) (passiveVP L.confirm_V2)))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.minister_N L.of_Prep)) (passiveVP L.appoint_V2)))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.minister_N L.of_Prep)) (passiveVP L.appoint_V2)))) fullStopPunct)]

SNT: 
AST: (d (date-entity (S.mkAdv L.in_Prep (mkNP (P.mkPN "Canberra")))))
TXT: [command not parsed: cc -one (d (date-entity (S.mkAdv L.in_Prep (mkNP (P.mkPN "Canberra")))))]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP (mkVP (passiveVP L.include_V2) (S.mkAdv (mkNP S.a_Quant (mkCN L.one_N)))) (S.mkAdv (mkNP S.a_Quant (mkCN (mkCN (mkCN (mkCN L.person_N) (S.mkAdv S.possess_Prep (mkNP (P.mkPN "Australia")))) (mkRS (mkRCl S.which_RP (mkVP (mkVP L.experience_V) (P.mkAdv "most"))))) (mkRS (mkRCl S.which_RP (mkVP L.legislate_V)))))))))) (mkRS (mkRCl S.which_RP (mkVP L.legislate_V))))) (mkVP (mkVP (passiveVP L.appoint_V2) (weekdayPunctualAdv friday_Weekday)) (E.PurposeVP (mkVP replace-01)))))) fullStopPunct)
TXT: [unknown qualified constant L.one_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (have-org-role-91 (mkNP S.a_Quant (mkCN L.prime_A L.minister_N))) (mkVP (passiveVP L.announce_V2) (S.mkAdv S.that_Subj (mkS (mkCl (have-org-role-91 (P.mkN2 L.secretary_N L.of_Prep)) (mkVP (passiveVP L.become_V2) (S.mkAdv L.PRD_Prep (mkNP S.a_Quant (mkCN L.next_A L.minister_N))))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (have-org-role-91 (mkNP S.a_Quant (mkCN L.prime_A L.minister_N))) (mkVP (passiveVP L.announce_V2) (S.mkAdv S.that_Subj (mkS (mkCl (have-org-role-91 (P.mkN2 L.secretary_N L.of_Prep)) (mkVP (passiveVP L.become_V2) (S.mkAdv L.PRD_Prep (mkNP S.a_Quant (mkCN L.next_A L.minister_N))))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (mkVP (passiveVP L.include_V2) (S.mkAdv (mkNP S.a_Quant (mkCN L.one_N)))) (S.mkAdv (mkNP S.a_Quant (mkCN L.official_A (L.duty_N (S.mkOrd (mkDigits "1"))))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (P.mkPN "Faulkner")) (mkVP (mkVP L.represent_V2 (mkNP (P.mkPN "Australia"))) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN (mkCN (mkCN L.summit_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Brussels")))) (S.mkAdv S.possess_Prep (mkNP (P.mkPN "NATO")))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.one_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Faulkner")) (mkVP (mkVP (passiveVP L.include_V2) (S.mkAdv (mkNP S.a_Quant (mkCN L.one_N)))) (S.mkAdv (mkNP S.a_Quant (mkNum (mkDigits "3")) (E.CompoundCN L.only_N L.member_N))))))) fullStopPunct)
TXT: [unknown qualified constant L.one_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Rudd")) (mkVP (mkVP L.tell_VS (mkS S.and_Conj (mkListS (mkS (mkCl (have-org-role-91 (P.mkN2 L.senator_N L.of_Prep)) (mkNP S.a_Quant (E.CompoundCN L.character_N L.man_N)))) (mkS (mkCl (mkVP (mkVP (passiveVP L.include_V2) (S.mkAdv (mkNP S.a_Quant (mkCN L.one_N)))) (S.mkAdv (mkNP S.a_Quant (mkCN (mkCN (mkCN L.minister_N) (mkRS (mkRCl S.which_RP (mkVP L.accomplish_V)))) (mkRS (mkRCl S.which_RP (mkVP (mkVP L.experience_V) (P.mkAdv "most"))))))))))))) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.report_V)))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Rudd")) (mkVP (mkVP L.tell_VS (mkS S.and_Conj (mkListS (mkS (mkCl (have-org-role-91 (P.mkN2 L.senator_N L.of_Prep)) (mkNP S.a_Quant (E.CompoundCN L.character_N L.man_N)))) (mkS (mkCl (mkVP (mkVP (passiveVP L.include_V2) (S.mkAdv (mkNP S.a_Quant (mkCN L.one_N)))) (S.mkAdv (mkNP S.a_Quant (mkCN (mkCN (mkCN L.minister_N) (mkRS (mkRCl S.which_RP (mkVP L.accomplish_V)))) (mkRS (mkRCl S.which_RP (mkVP (mkVP L.experience_V) (P.mkAdv "most"))))))))))))) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.report_V)))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (S.mkAdv S.because_Subj) (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.opportunity_N) (E.PurposeVP (mkVP L.make_VS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.lineup_N) (S.mkAdv S.possess_Prep (mkNP (P.mkPN "Cabinet"))))) (passiveVP L.change_V2))))))) (mkVP (mkVP (passiveVP L.give_V2) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "Rudd")))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.depart_V))))))))) fullStopPunct)
TXT: [unknown qualified constant L.lineup_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Rudd")) (mkVP L.say_VS (mkS (mkCl (mkVP L.announce_VS (mkS (mkCl (mkVP (mkVP L.change_V) (P.mkAdv "further"))))))))))) fullStopPunct)
TXT: [Rudd says that it announces that it changes further .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Fitzgibbon")) (mkVP L.resign_V)))) fullStopPunct)
TXT: [Fitzgibbon resigns .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.contrast_V2) (E.PurposeVP (mkVP sign-01))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.contract_N)) (passiveVP L.discuss_V2)))))))) fullStopPunct)
TXT: [constant not found: sign]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Fitzgibbon")) (mkVP (mkVP L.write_VS (mkS (mkCl (mkVP (mkVP L.avoid_VS (mkS (mkCl (mkVP L.participate_VS (mkS (mkCl (mkVP L.negotiate_V))))))) (E.PurposeVP (mkVP L.ensure_VS (mkS negativePol (mkCl (mkNP S.a_Quant (mkCN L.minister_N)) (mkVP (mkVP L.conflict_V) (S.mkAdv L.PPT_Prep (mkNP S.a_Quant (mkCN L.interest_N)))))))))))) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.letter_N))))))) fullStopPunct)
TXT: [unknown qualified constant L.avoid_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.contrast_V2) (S.mkAdv S.that_Subj (mkS (mkCl S.he_NP (mkVP L.decide_VS (mkS (mkCl (mkVP (mkVP L.resign_V) (E.PurposeVP (mkVP L.protect_V2 (mkNP S.a_Quant (mkCN (mkCN L.integrity_N) (S.mkAdv S.possess_Prep (mkNP S.a_Quant (mkCN (mkCN L.organization_N) (mkRS (mkRCl S.which_RP (mkVP L.govern_V))))))))))))))))))))) fullStopPunct)
TXT: [it is contrasted that he decides that it resigns to protect an integrity of an organization that governs .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Fitzgibbon")) (mkVP (P.mkAdV "past") (mkVP L.embarrass_VV (mkVP L.fail_VV (mkVP L.declare_V2 (mkNP S.a_Quant (mkCN (mkCN L.gift_N) (mkRS (mkRCl S.which_RP receive-01)))))) (mkNP S.a_Quant (mkCN (mkCN L.organization_N) (mkRS (mkRCl S.which_RP (mkVP L.govern_V)))))))))) fullStopPunct)
TXT: [unknown qualified constant L.embarrass_VV]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.maid_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "Philippines"))))) (mkNP (mkCN (P.mkN2 L.emir_N L.of_Prep) (mkNP (P.mkPN "Kuwait")))) (passiveVP L.pardon_V2)))) fullStopPunct)
TXT: [no overload instance of mkCl]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (mkVP L.byline_V) (dayMonthYearAdv (intMonthday (ss "11")) june_Month (intYear (ss "2009")))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Manila"))))))) fullStopPunct)
TXT: [unknown qualified constant L.byline_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.rule_V2 (mkNP (P.mkPN "Kuwait"))))))) (mkVP L.pardon_V2 (mkNP S.a_Quant (mkCN (mkCN L.maid_N) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.convict_V2) (E.PurposeVP (mkVP L.murder_V2 (mkNP S.a_Quant (mkCN L.person_N)))))))))))) (mkS (mkCl (mkVP (mkVP (P.mkAdV "soon") (passiveVP L.allow_V2)) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (passiveVP L.return_V2) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN L.home_N)))))))))))) (mkNP (mkCN (P.mkN2 L.president_N L.of_Prep) (mkNP (P.mkPN "Philippines")))) (mkVP (passiveVP L.say_V2) (weekdayPunctualAdv thursday_Weekday))))) fullStopPunct)
TXT: [no overload instance of mkCl]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.court_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Kuwait"))))) (mkVP L.convict_VV (mkVP (mkVP (mkVP L.slit_V2 (mkNP S.a_Quant (mkCN (mkCN L.throat_N) (S.mkAdv L.part_Prep (mkNP (P.mkPN "Salem al-Otaibi")))))) (monthYearAdv january_Month (intYear (ss "2007")))) (S.mkAdv L.MNR_Prep (mkNP S.a_Quant (E.CompoundCN L.kitchen_N L.knife_N)))) (mkNP (P.mkPN "May Vecina")))))) fullStopPunct)
TXT: [unknown qualified constant L.convict_VV]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (P.mkAdV "also") (passiveVP L.find_V2)) (S.mkAdv S.that_Subj (mkS (mkCl S.it_NP (mkAP (mkAP (L.guilty_A (mkVP attempt-01))) (mkS (mkCl S.she_NP)))))))))) fullStopPunct)
TXT: [constant not found: attempt]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.person_N)) (mkVP L.say_VS (mkS (mkCl (mkAP (L.insane_A (S.mkAdv S.because_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.employ_V))))) (mkVP L.mistreat_V)))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.employ_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkS S.and_Conj (mkListS (mkS (mkCl (have-org-role-91 (P.mkN2 L.sheik_N L.of_Prep)) (mkVP (mkVP (passiveVP L.commute_V2) (E.PurposeVP (mkVP (mkVP jail-01) (S.mkAdv L.TMP_Prep (mkNP S.a_Quant (mkCN L.life_N)))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (P.mkPN "Vecina")) (passiveVP L.sentence_V2))))))) (mkS (mkCl (mkVP (P.mkAdV "recently") (mkVP L.pardon_V)))))) (have-org-role-91 (P.mkN2 L.president_N L.of_Prep)) (mkVP (P.mkAdV "statement") (passiveVP L.say_V2))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (mkS S.and_Conj (mkListS (mkS (mkCl (have-org-role-91 (P.mkN2 L.sheik_N L.of_Prep)) (mkVP (mkVP (passiveVP L.commute_V2) (E.PurposeVP (mkVP (mkVP jail-01) (S.mkAdv L.TMP_Prep (mkNP S.a_Quant (mkCN L.life_N)))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (P.mkPN "Vecina")) (passiveVP L.sentence_V2))))))) (mkS (mkCl (mkVP (P.mkAdV "recently") (mkVP L.pardon_V)))))) (have-org-role-91 (P.mkN2 L.president_N L.of_Prep)) (mkVP (P.mkAdV "statement") (passiveVP L.say_V2))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (mkCN (mkCN (P.mkN2 L.spokesman_N L.of_Prep) (mkNP (P.mkPN "Foreign Affairs Department"))) (mkNP (P.mkPN "Ed Malaya")))) (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (mkVP (passiveVP L.sign_V2) (dayMonthAdv (intMonthday (ss "1")) june_Month)) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.pardon_V)))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.pardon_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "de Castro")) (mkVP L.say_V)))) fullStopPunct)
TXT: [de Castro says .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.lead_V2 (mkNP (P.mkPN "Kuwait"))))))) (have-org-role-91 (P.mkN2 (L.secretary_N (S.mkAdv L.about_Prep (mkNP S.a_Quant (mkCN L.foreign_N)))) L.of_Prep)) (mkVP (mkVP (P.mkAdV "also") (passiveVP L.thank_V2)) (S.mkAdv L.CAU_Prep (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN L.magnanimity_N)) (mkNP (mkCN L.compassion_N))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.lead_V2 (mkNP (P.mkPN "Kuwait"))))))) (have-org-role-91 (P.mkN2 (L.secretary_N (S.mkAdv L.about_Prep (mkNP S.a_Quant (mkCN L.foreign_N)))) L.of_Prep)) (mkVP (mkVP (P.mkAdV "also") (passiveVP L.thank_V2)) (S.mkAdv L.CAU_Prep (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN L.magnanimity_N)) (mkNP (mkCN L.compassion_N))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.a_Quant (mkCN L.court_N)) (mkVP (mkVP L.sentence_V2 (mkNP (P.mkPN "Vecina"))) (monthYearAdv july_Month (intYear (ss "2007")))))) (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN (mkCN L.court_N) (S.mkAdv S.possess_Prep (mkNP (P.mkPN "Kuwait")))) (mkRS (mkRCl S.which_RP (mkAP L.most_AdA (mkAP L.high_A)))))) (mkVP (mkVP L.uphold_V) (S.mkAdv (P.mkPrep "late") (mkNP S.a_Quant (mkNum (mkDigits "9")) (mkCN L.month_N)))))))) (mkVP (passiveVP L.contrast_V2) (E.PurposeVP (mkVP (mkVP commute-02) (S.mkAdv L.PRD_Prep (mkNP S.a_Quant (mkCN (mkCN L.life_N) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.prison_N)))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.uphold_V]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP (mkVP (passiveVP L.mean_V2) (E.PurposeVP (mkVP L.free_V2 S.she_NP))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.pardon_V))))))) (mkS (mkCl (mkNP (mkCN (mkCN (P.mkN2 L.ambassador_N L.of_Prep) (mkNP (P.mkPN "Philippines"))) (mkNP (P.mkPN "Ricardo Endaya")))) (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS (mkCl (passiveVP L.expect_V2)))))))))) fullStopPunct)
TXT: [unknown qualified constant L.pardon_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.president_N L.of_Prep)) (mkVP (mkVP (mkVP (mkVP L.travel_V) (E.PurposeVP (mkVP (mkVP L.plead_V) (S.mkAdv L.PRP_Prep (mkNP S.a_Quant (mkCN (mkCN L.life_N) (S.mkAdv S.possess_Prep (mkNP L.another_Det (mkCN (mkCN (mkCN L.maid_N) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.row_N)))) (mkRS (mkRCl S.which_RP (passiveVP L.convict_V2)))))))))))) (yearAdv (intYear (ss "2007")))) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "Kuwait"))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.president_N L.of_Prep)) (mkVP (mkVP (mkVP (mkVP L.travel_V) (E.PurposeVP (mkVP (mkVP L.plead_V) (S.mkAdv L.PRP_Prep (mkNP S.a_Quant (mkCN (mkCN L.life_N) (S.mkAdv S.possess_Prep (mkNP L.another_Det (mkCN (mkCN (mkCN L.maid_N) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.row_N)))) (mkRS (mkRCl S.which_RP (passiveVP L.convict_V2)))))))))))) (yearAdv (intYear (ss "2007")))) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "Kuwait"))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP (mkVP L.help_V) (S.mkAdv L.about_Prep (mkNP S.a_Quant (mkCN L.domestic_N)))))))) (mkVP (mkVP L.work_V) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Kuwait")))))) (mkS (mkCl (mkVP L.complain_VS (mkS S.and_Conj (mkListS (mkS negativePol (mkCl (mkNP S.a_Quant (mkCN L.salary_N)) (passiveVP L.pay_V2))) (mkS (mkCl (mkVP (P.mkAdV "physical") (passiveVP L.abuse_V2)))))))))))) fullStopPunct)
TXT: [a person that helps about a domestic works in Kuwait and it complains that a salary isn't paid and it is physical abused .]

SNT: 
AST: (multi-sentence (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN (mkCN L.person_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "Philippines")))) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.include_V2) (S.mkAdv (mkNP S.a_Quant (mkNum (mkDigits "90000000")) (mkCN L.person_N)))))))) (mkVP (mkVP L.work_V) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.abroad_N))))))) fullStopPunct) (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.work_V2 (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN L.seaman_N)) (mkListNP (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.work_VS (mkS (mkCl (mkVP L.construct_V)))))))) (mkListNP (mkNP S.a_Quant (mkCN L.engineer_N)) (mkListNP (mkNP S.a_Quant (mkCN L.nurse_N)) (mkNP S.a_Quant (mkCN L.maid_N)))))))))))) (mkVP (passiveVP L.include_V2) (S.mkAdv (mkNP S.a_Quant (mkCN L.many_N))))))) fullStopPunct))
TXT: [unknown qualified constant L.abroad_N] [unknown qualified constant L.work_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN (mkCN L.person_N) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.overseas_N)))) (S.mkAdv L.from_Prep (mkNP (P.mkPN "Philippines"))))) (mkVP (mkVP L.send_V2 (mkNP S.a_Quant (mkNum (mkDigits "16400000000")) (mkCN L.dollar_N)) (mkRS (mkRCl S.which_RP (passiveVP L.mean_V2)))) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN L.home_N))))))) fullStopPunct)
TXT: [unknown qualified constant L.overseas_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Kane")) (mkVP (passiveVP L.set_V2) (E.PurposeVP (mkVP (mkVP appear-01) (S.mkAdv L.in_Prep (mkNP S.a_Quant (E.CompoundCN L.city_N L.court_N))))))))) fullStopPunct)
TXT: [constant not found: appear]

SNT: 
AST: (mkText (mkUtt (mkNP (P.mkPN "Buffalo"))))
TXT: [Buffalo .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.schedule_V2) (E.PurposeVP (mkVP L.arraign_VV (mkVP L.beat_up_V2 (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.drive_V2 (mkNP S.a_Quant (mkCN L.cab_N))))))))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (mkCN (mkCN (P.mkN2 L.forward_N L.of_Prep) (mkNP (P.mkPN "Chicago Blackhawks"))) (mkNP (P.mkPN "Patrick Kane")))) (mkVP (passiveVP L.appear_V2) (S.mkAdv L.in_Prep (mkNP S.a_Quant (E.CompoundCN L.city_N L.court_N))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.arraign_VV]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Kane")) (mkVP (passiveVP L.appear_V2) (weekdayPunctualAdv thursday_Weekday))))) fullStopPunct)
TXT: [unknown qualified constant L.appear_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.grand_A L.jury_N)) (mkVP L.dismiss_VS (mkS (mkCl (mkVP (P.mkAdV "felony") (mkVP L.charge_V)))))))) fullStopPunct)
TXT: [unknown qualified constant L.dismiss_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.and_Conj (mkListNP (mkNP (P.mkPN "Kane")) (mkNP (P.mkPN "James Kane")))) (mkVP (passiveVP L.arrest_V2) (dayMonthAdv (intMonthday (ss "9")) august_Month))))) fullStopPunct)
TXT: [Kane and James Kane are arrested on 9 August .]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP (P.mkPN "James Kane")) (passiveVP L.indict_V2))) (mkS (mkCl (mkAP L.also_AdA (mkAP (L.due_A (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.court_N))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.also_AdA]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.drive_V2 (mkNP S.a_Quant (mkCN L.cab_N))))))) (mkVP L.have_VS (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP L.bruise_V))) (mkS (mkCl (mkNP (mkCN L.glass_N)) (passiveVP L.break_V2))))))))) fullStopPunct)
TXT: [unknown qualified constant L.have_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (mkCN (mkCN (P.mkN2 L.chairman_N L.of_Prep) (mkNP (P.mkPN "EMC Corporation"))) (mkNP (P.mkPN "Egan")))) (mkVP (passiveVP L.die_V2) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Boston"))))))) fullStopPunct)
TXT: [unknown qualified constant L.die_V2]

SNT: 
AST: (mkText (mkUtt (mkNP (P.mkPN "Boston"))))
TXT: [Boston .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Richard Egan")) (mkVP (passiveVP L.die_V2) (weekdayPunctualAdv friday_Weekday))))) fullStopPunct)
TXT: [unknown qualified constant L.die_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.family_N)) (mkVP (mkVP L.issue_VS (mkS (mkCl (mkVP L.state_VS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.reside_V2 (mkNP (ss "suburb") (mkNP (P.mkPN "Hopkinton")))))))) (mkVP (passiveVP L.die_V2) (S.mkAdv L.in_Prep (mkNP S.a_Quant (E.CompoundCN L.city_N L.home_N)))))))))) (weekdayPunctualAdv friday_Weekday))))) fullStopPunct)
TXT: [unknown qualified constant L.issue_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.family_N)) (mkVP L.say_VS (mkS (mkCl S.he_NP (mkVP (P.mkAdV "also") (mkVP L.suffer_V2 (mkNP S.and_Conj (mkListNP (mkNP (P.mkPN "emphysema")) (mkNP (P.mkPN "diabetes")))))))))))) fullStopPunct)
TXT: [a family says that he also suffers emphysema and diabetes .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.we_Pron (mkCN L.family_N)) (mkVP (mkVP L.state_VS (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP (mkVP L.lose_V2 S.this_NP) (P.mkAdv "great")))) (mkS (mkCl (mkVP (passiveVP L.sadden_V2) (P.mkAdv "terribly"))))))) (E.PurposeVP (mkVP L.announce_VS (mkS (mkCl S.he_NP (passiveVP L.die_V2))))))))) fullStopPunct)
TXT: [unknown qualified constant L.die_V2]

SNT: 
AST: (have-org-role-91 (mkNP (P.mkPN "United States Marine Corps")) (mkRS (mkRCl S.which_RP (mkVP (mkVP L.work_V) (S.mkAdv L.GOL_Prep (mkNP S.and_Conj (mkListNP (mkNP (P.mkPN "Intel")) (mkListNP (mkNP (P.mkPN "Lockheed Martin")) (mkNP (P.mkPN "Honeywell"))))))))) (mkRS (mkRCl S.which_RP (mkVP L.engineer_V2 (mkNP (mkCN L.electricity_N))))))
TXT: [command not parsed: cc -one (have-org-role-91 (mkNP (P.mkPN "United States Marine Corps")) (mkRS (mkRCl S.which_RP (mkVP (mkVP L.work_V) (S.mkAdv L.GOL_Prep (mkNP S.and_Conj (mkListNP (mkNP (P.mkPN "Intel")) (mkListNP (mkNP (P.mkPN "Lockheed Martin")) (mkNP (P.mkPN "Honeywell"))))))))) (mkRS (mkRCl S.which_RP (mkVP L.engineer_V2 (mkNP (mkCN L.electricity_N))))))]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.he_NP (mkVP (mkVP (mkVP L.sell_V2 (mkNP S.a_Quant (mkCN (mkCN L.share_N) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.include_V2) (S.mkAdv (mkNP S.a_Quant (mkCN L.share_N))))))))) (S.mkAdv S.when_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.tech_N)) (mkVP L.boom_V))))))))) fullStopPunct)
TXT: [no overload instance of mkAdv]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN (mkCN (mkCN (mkCN L.person_N) (S.mkAdv L.of_Prep (mkNP S.a_Quant (mkCN (mkCN L.billionaire_N) (mkRS (mkRCl S.which_RP make-01)))))) (mkRS (mkRCl S.which_RP (mkVP (mkVP (passiveVP L.become_V2) (yearAdv (intYear (ss "2000")))) (E.PurposeVP (mkVP (mkVP (mkVP raise-02) (S.mkAdv (mkNP S.a_Quant (mkCN L.person_N)))) (S.mkAdv L.DIR_Prep (mkNP (P.mkPN "Pioneer"))))))))) (mkRS (mkRCl S.which_RP (mkVP L.raise_V2 (mkNP S.a_Quant (mkCN L.fund_N)))))))))
TXT: [constant not found: make]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.he_NP (mkVP (mkVP step_down-04 (mkCN (P.mkN2 L.chairman_N L.of_Prep) (mkNP (P.mkPN "EMC")))) (monthYearAdv january_Month (intYear (ss "2001"))))))) fullStopPunct)
TXT: [constant not found: step_down]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Egan")) (mkVP L.get_V2 (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN (E.CompoundCN L.bachelor_N L.degree_N) (S.mkAdv L.about_Prep (mkNP (mkCN (mkCN L.art_N) (S.mkAdv L.about_Prep (mkNP (mkCN L.science_N)))))))) (mkNP S.a_Quant (mkCN (E.CompoundCN L.master_N L.degree_N) (S.mkAdv L.about_Prep (mkNP (mkCN L.science_N))))))))))) fullStopPunct)
TXT: [Egan gets a bachelor degree about art about science and a master degree about science .]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS negativePol (mkCl S.he_NP (mkVP (P.mkAdV "ever") (mkVP L.forget_V2 (mkNP S.a_Quant (mkCN L.hardscrabble_A L.route_N)))))) (mkS (mkCl (mkVP (passiveVP L.donate_V2) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "Northeastern University"))))))))) fullStopPunct)
TXT: [he doesn't ever forget a hardscrabble route and it is donated to Northeastern University .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Egan")) (mkVP L.leave_behind_V2 (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN L.person_N)) (mkNP S.a_Quant (mkNum (mkDigits "5")) (mkCN L.person_N)))))))) fullStopPunct)
TXT: [unknown qualified constant L.leave_behind_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl have-org-role-91 (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.person_N)) (mkVP (mkVP L.meet_V) (E.PurposeVP (mkVP L.discuss_V2 (mkNP S.a_Quant (mkCN L.estate_N)))))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl have-org-role-91 (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.person_N)) (mkVP (mkVP L.meet_V) (E.PurposeVP (mkVP L.discuss_V2 (mkNP S.a_Quant (mkCN L.estate_N)))))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkNP (P.mkPN "Atlanta"))))
TXT: [Atlanta .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.survive_V))))) have-org-role-91 (mkVP (passiveVP L.order_V2) (E.PurposeVP (mkVP (mkVP hold-04) (S.mkAdv L.COM_Prep (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.hold_V2 (mkNP S.a_Quant (mkCN L.share_N)))))))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.survive_V))))) have-org-role-91 (mkVP (passiveVP L.order_V2) (E.PurposeVP (mkVP (mkVP hold-04) (S.mkAdv L.COM_Prep (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.hold_V2 (mkNP S.a_Quant (mkCN L.share_N)))))))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP L.sue_V2 (mkNP (P.mkPN "Dexter King"))) (E.PurposeVP (mkVP L.force_VV (mkVP L.open_V2 (mkNP S.a_Quant (mkCN (E.CompoundCN L.estate_N L.book_N) (S.mkAdv S.possess_Prep (mkNP S.a_Quant (mkCN L.person_N)))))) p4)))))) fullStopPunct)
TXT: [unknown qualified constant L.force_VV]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.claim_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (P.mkPN "Dexter King")) (mkVP L.refuse_VS (mkS (mkCl (mkVP L.provide_V2 (mkNP S.a_Quant (mkCN L.document_N)))))))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.sue_V)))))))) fullStopPunct)
TXT: [it is claimed that Dexter King refuses that it provides a document that it sues .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkNum (mkDigits "3")) (mkCN (mkCN L.sibling_N) (mkRS (mkRCl S.which_RP (mkVP (P.mkAdV "sole") (mkVP L.hold_V2 (mkNP S.a_Quant (mkCN L.share_N)))))))) (mkVP (passiveVP L.contrast_V2) (E.PurposeVP (mkVP L.meet_V2 (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.hold_V2 (mkNP S.a_Quant (mkCN L.share_N))))))))))))) fullStopPunct)
TXT: [3 siblings that sole hold a share are contrasted to meet a person that holds a share .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Dexter King")) (mkVP (P.mkAdV "also") (mkVP L.sue_V2 (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.administer_V2 (mkNP S.a_Quant (mkCN (mkCN L.estate_N) (S.mkAdv S.possess_Prep (mkNP S.a_Quant (mkCN L.person_N))))))))))))))) fullStopPunct)
TXT: [Dexter King also sues a person that administers an estate of a person .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.win_V))))) (mkVP L.want_VS (mkS (mkCl (mkNP S.a_Quant (E.CompoundCN L.state_N L.lottery_N)) (mkVP L.pay_V))))))) fullStopPunct)
TXT: [a person that wins wants that a state lottery pays .]

SNT: 
AST: (mkText (mkUtt (mkNP (P.mkPN "Austin"))))
TXT: [Austin .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.claim_VS (mkS (mkCl (mkVP (mkVP (passiveVP L.defraud_V2) (S.mkAdv L.EXT_Prep (mkNP S.a_Quant (mkNum (mkDigits "1000000")) (mkCN L.dollar_N)))) (S.mkAdv L.DIR_Prep (mkNP S.a_Quant (mkCN (E.CompoundCN L.lottery_N L.ticket_N) (mkRS (mkRCl S.which_RP (mkVP L.win_V)))))))))))))) (mkVP L.say_VS (mkS (mkCl (mkVP (mkVP L.sue_V2 (mkNP (P.mkPN "Texas Lottery Commission"))) (S.mkAdv L.PRP_Prep (mkNP (mkCN L.money_N)))))))))) fullStopPunct)
TXT: [a person that claims that it is defrauded 1 Predef.BIND , Predef.BIND 0 Predef.BIND 0 Predef.BIND 0 Predef.BIND , Predef.BIND 0 Predef.BIND 0 Predef.BIND 0 dollars to a lottery ticket that wins says that it sues Texas Lottery Commission for money .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Sean Breen")) (mkVP (mkVP L.write_VS (mkS negativePol (mkCl (mkVP L.recommend_VS (mkS (mkCl (mkNP (P.mkPN "Willis Willis")) (mkVP (passiveVP L.force_V2) (E.PurposeVP (mkVP sue-02))))))))) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN L.commission_N))))))) fullStopPunct)
TXT: [constant not found: sue]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Pankaj Joshi")) (passiveVP L.accuse_V2)))) fullStopPunct)
TXT: [Pankaj Joshi is accused .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Joshi")) (passiveVP L.disappear_V2)))) fullStopPunct)
TXT: [unknown qualified constant L.disappear_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.he_NP (mkVP (passiveVP L.charge_V2) (E.PurposeVP (mkVP L.claim_V2 (mkNP S.a_Quant (E.CompoundCN L.lottery_N L.prize_N)))))))) fullStopPunct)
TXT: [he is charged to claim a lottery prize .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (mkCN L.money_N)) (mkVP (passiveVP L.recover_V2) (S.mkAdv L.DIR_Prep (mkNP S.a_Quant (mkCN (mkCN L.bank_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "U.S.")))))))))) fullStopPunct)
TXT: [unknown qualified constant L.recover_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Patricia Robertson")) (mkVP L.say_VS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.some_N) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.include_V2) (S.mkAdv S.it_NP)))))) (mkVP (passiveVP L.give_V2) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "Willis")))))))))) fullStopPunct)
TXT: [unknown qualified constant L.some_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Willis")) (mkVP (mkVP L.say_VS (mkS (mkCl (mkVP L.hope_VS (mkS (mkCl (mkVP (mkVP L.have_V2 S.it_NP) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.hand_N)))))))))) (weekdayPunctualAdv tuesday_Weekday))))) fullStopPunct)
TXT: [Willis says on Tuesday that it hopes that it has it in a hand .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Breen")) (mkVP L.say_VS (mkS (mkCl (mkVP L.plan_VS (mkS (mkCl (mkVP L.meet_V2 (mkNP S.a_Quant (mkCN (mkCN L.general_A L.counsel_N) (S.mkAdv S.possess_Prep (mkNP S.a_Quant (mkCN L.lottery_N))))))))))))))) fullStopPunct)
TXT: [Breen says that it plans that it meets a general counsel of a lottery .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (mkCN (P.mkN2 L.spokesman_N L.of_Prep) (mkNP S.a_Quant (mkCN L.commission_N)))) (mkVP (passiveVP L.decline_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.comment_V)))))))) fullStopPunct)
TXT: [spokesman of a commission is declined that it comments .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Willis")) (mkVP L.say_VS (mkS negativePol (mkCl (mkVP (P.mkAdV "ever") (mkVP (mkVP L.doubt_V2 (mkNP (P.mkPN "Joshi"))) (S.mkAdv S.when_Subj (mkS (mkCl (mkVP (mkVP L.buy_V2 (mkNP S.a_Quant (mkCN L.ticket_N))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Lucky Food Store"))))))))))))))) fullStopPunct)
TXT: [Willis says that it doesn't ever doubt Joshi when it buys a ticket in Lucky Food Store .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Willis")) (mkVP L.say_VS (mkS negativePol (mkCl (mkVP (P.mkAdV "ever") (mkVP L.notice_V2 (mkNP S.a_Quant (mkCN L.anything_N)))))))))) fullStopPunct)
TXT: [unknown qualified constant L.anything_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP (mkVP (P.mkAdV "always") (mkVP L.treat_V)) (S.mkAdv L.PRD_Prep (mkNP S.a_Quant (mkCN L.respect_N))))))) fullStopPunct)
TXT: [I always treat a respect .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (mkCN (P.mkN2 L.mayor_N L.of_Prep) (mkNP (P.mkPN "Bucharest")))) (mkNP (mkCN (P.mkN2 L.president_N L.of_Prep) (mkNP (P.mkPN "Romania")))) (passiveVP L.nominate_V2)))) fullStopPunct)
TXT: [no overload instance of mkCl]

SNT: 
AST: (mkText (mkUtt (mkNP (P.mkPN "Bucharest"))))
TXT: [Bucharest .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (mkCN (P.mkN2 L.mayor_N L.of_Prep) (mkNP (P.mkPN "Bucharest")))) (mkNP (mkCN (P.mkN2 L.president_N L.of_Prep) (mkNP (P.mkPN "Romania")))) (passiveVP L.nominate_V2)))) fullStopPunct)
TXT: [no overload instance of mkCl]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Liviu Negoita")) (mkVP (mkVP L.say_VS (mkS (mkCl (mkVP (mkVP L.form_V2 (mkNP S.a_Quant (mkCN L.team_N))) (E.PurposeVP (mkVP (mkVP L.present_V) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "Parliament"))))))))) (weekdayPunctualAdv friday_Weekday))))) fullStopPunct)
TXT: [unknown qualified constant L.present_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.he_NP (mkVP L.say_VS (mkS (mkCl (mkVP L.want_V2 (mkNP S.a_Quant (mkCN (mkCN (mkCN L.organization_N) (mkRS (mkRCl S.which_RP (mkNP (mkCN L.politics_N)) L.support_V2))) (mkRS (mkRCl S.which_RP (mkVP L.govern_V)))))))))))) fullStopPunct)
TXT: [he says that it wants an organization that politics supports that governs .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Negoita")) (mkVP L.belong_V2 (mkNP (P.mkPN "Democratic Liberal Party")))))) fullStopPunct)
TXT: [Negoita belongs to Democratic Liberal Party .]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl S.it_NP (mkAP (mkAP L.clear_A) (mkS (mkCl S.he_NP (mkVP L.have_VS (mkS (mkCl (mkVP (passiveVP L.support_V2) (E.PurposeVP (mkVP L.confirm_V)))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.have_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.legislate_V))))) (mkVP L.reject_V2 (mkNP S.a_Quant (mkCN (mkCN (mkCN (mkCN L.organization_N) (mkRS (mkRCl S.which_RP lead-02))) (mkRS (mkRCl S.which_RP (mkNP (P.mkPN "Basescu")) L.nominate_V2))) (mkRS (mkRCl S.which_RP (mkVP L.govern_V))))))))) fullStopPunct)
TXT: [constant not found: lead]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl (mkNP (P.mkPN "Romania")) (mkVP L.have_V2 (mkNP S.a_Quant (mkCN (mkCN L.proper_A L.organization_N) (mkRS (mkRCl S.which_RP (mkVP L.govern_V))))))))) fullStopPunct)
TXT: [Romania doesn't have a proper organization that governs .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Ohio")) (mkVP L.execute_VV (mkVP L.inject_V2 (mkNP S.a_Quant (mkNum (mkDigits "1")) (mkCN L.drug_N))) (mkNP S.a_Quant (mkCN L.inmate_N)))))) fullStopPunct)
TXT: [unknown qualified constant L.execute_VV]

SNT: 
AST: (mkText (mkUtt (mkNP (P.mkPN "Lucasville"))))
TXT: [Lucasville .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Ohio")) (mkVP (mkVP L.execute_V2 (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.kill_V)))))) (weekdayPunctualAdv tuesday_Weekday))))) fullStopPunct)
TXT: [Ohio executes a person that kills on Tuesday .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Kenneth Biros")) (mkVP (passiveVP L.pronounce_V2) (weekdayPunctualAdv tuesday_Weekday))))) fullStopPunct)
TXT: [Kenneth Biros is pronounced on Tuesday .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (mkNP (P.mkPN "Supreme Court")) (S.mkAdv L.from_Prep (mkNP (P.mkPN "U.S.")))) (mkVP L.reject_VS (mkS (mkCl S.he_NP (mkVP (P.mkAdV "final") (mkVP L.appeal_V)))))))) fullStopPunct)
TXT: [unknown qualified constant L.reject_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.contrast_V2) (E.PurposeVP (mkVP (P.mkAdV "usually") (mkVP (P.mkAdV "about") (mkVP L.long_V2 (mkNP (mkCN L.time_N))))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.expert_A (mkCN L.person_N))) (mkVP L.predict_VS (mkS (mkCl (mkVP (mkVP (mkVP (passiveVP L.take_V2) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "thiopental sodium")))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (mkVP L.long_V) (P.mkAdv "more")))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.kill_V2 (mkNP (P.mkPN "Biros"))))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.long_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN L.person_N)) (mkListNP (mkNP S.a_Quant (mkCN L.person_N)) (mkNP S.a_Quant (mkCN L.person_N))))) (mkVP (mkVP L.applaud_V) (S.mkAdv S.when_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.warden_N)) (mkVP L.announce_V)))))))) fullStopPunct)
TXT: [unknown qualified constant L.announce_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Debi Heiss")) (mkVP (mkVP L.say_VS (mkS (mkCl (mkVP L.rock_on_V)))) (S.mkAdv S.when_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.curtain_N)) (mkVP (passiveVP L.draw_V2) (E.PurposeVP (mkVP (L.check_V2 (mkNP S.a_Quant (mkCN L.coroner_N))) (mkNP (P.mkPN "Biros")))))))))))) exclMarkPunct)
TXT: [unknown qualified constant L.rock_on_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkAP L.too_AdA (mkAP (mkAP L.easy_A) (mkS (mkCl S.that_NP))))))) fullStopPunct)
TXT: [it is too easy that there is that .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.team_N) (mkRS (mkRCl S.which_RP (mkVP L.execute_V))))) (mkVP L.try_VS (mkS (mkCl (mkVP L.find_V2 (mkNP S.a_Quant (mkCN (mkCN L.vein_N) (mkRS (mkRCl S.which_RP (passiveVP L.use_V2)))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.execute_V]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.chest_N) (S.mkAdv L.part_Prep (mkNP (P.mkPN "Biros"))))) (mkVP (mkVP L.heave_V) (S.mkAdv L.DIR_Prep (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN L.up_N)) (mkNP S.a_Quant (mkCN L.down_N)))))))) (mkS (mkCl (mkVP L.move_V2 (mkNP S.a_Quant (mkCN L.head_N)))))))) fullStopPunct)
TXT: [unknown qualified constant L.up_N]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP (mkCN (mkCN (P.mkN2 L.director_N L.of_Prep) (mkNP S.a_Quant (mkCN L.prison_N))) (mkNP (P.mkPN "Terry Collins")))) (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.team_N)) (mkVP L.take_V2 (mkNP (mkCN L.time_N))))))))) (mkS (mkCl (mkVP L.consider_VS (mkS (mkCl S.it_NP (mkAP (mkAP L.free_A) (mkS (mkCl (mkNP S.a_Quant (mkCN L.process_N))))))))))))) fullStopPunct)
TXT: [director of a prison Terry Collins is said that a team takes time and it considers that it is free that there is a process .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Ohio")) (mkVP L.overhaul_V2 (mkNP S.a_Quant (mkCN L.procedure_N)))))) fullStopPunct)
TXT: [Ohio overhauls a procedure .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.execute_V))))) (mkVP L.try_VS (mkS (mkCl (mkVP L.find_V2 (mkNP S.a_Quant (mkCN L.suitable_A (mkCN L.vein_N)))))))))) fullStopPunct)
TXT: [unknown qualified constant L.execute_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (mkVP (passiveVP L.begin_V2) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.federal_A L.court_N)))) (weekdayPunctualAdv wednesday_Weekday)) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN (L.hearing_N (mkVP (attempt-01 (mkNP (P.mkPN "Broom")))))))))))))) fullStopPunct)
TXT: [constant not found: attempt]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.state_N)) (mkVP L.have_V2 (mkNP S.a_Quant (mkNum (mkDigits "2")) (mkCN L.goal_N)))))) fullStopPunct)
TXT: [a state has 2 goals .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.mean_V2) (E.PurposeVP (mkVP end-01))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (mkVP L.switch_V) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkNum (mkDigits "1")) (mkCN L.drug_N))))))))))) fullStopPunct)
TXT: [constant not found: end]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN L.expert_A (mkCN L.person_N))) (mkNP S.a_Quant (mkCN (mkCN L.attorney_N) (mkRS (mkRCl S.which_RP (mkVP L.defend_V))))))) (mkVP agree-01 (mkS (S.mkAdv S.because_Subj (mkS (mkCl (mkVP (mkVP L.dose_V) (S.mkAdv L.MNR_Prep (mkNP (P.mkPN "sodium thiopental"))))))) (mkS (mkCl (mkVP L.pain_V)))))))) fullStopPunct)
TXT: [constant not found: agree]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN (mkCN L.procedure_N) (mkRS (mkRCl S.which_RP (mkVP L.allow_VS (mkS (mkCl (mkNP S.a_Quant (mkNum (mkDigits "2")) (mkCN L.drug_N)) (mkVP (passiveVP L.inject_V2) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN L.muscle_N)))))))))) (mkRS (mkRCl S.which_RP (mkVP L.back_up_V))))) (passiveVP L.create_V2)))) fullStopPunct)
TXT: [a procedure that allows that 2 drugs are injected to a muscle that backs up is created .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.contrast_V2) (E.PurposeVP (mkVP (make-01 (mkNP S.a_Quant (mkCN L.none_N)))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.state_N)) (mkVP L.watch_VS (mkS (mkCl (mkNP (P.mkPN "Ohio")) (mkVP L.change_V))))))))))) fullStopPunct)
TXT: [constant not found: make]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.and_Conj (mkListNP (mkNP (P.mkPN "Virginia")) (mkListNP (mkNP (P.mkPN "Texas")) (mkListNP (mkNP (P.mkPN "South Carolina")) (mkListNP (mkNP (P.mkPN "Florida")) (mkNP (P.mkPN "Kentucky"))))))) (mkVP (passiveVP L.include_V2) (S.mkAdv (mkNP S.that_Det (mkCN (mkCN L.state_N) (mkRS (mkRCl S.which_RP (mkVP L.say_VS (mkS (mkCl (mkVP L.keep_V2 (mkNP S.a_Quant (E.CompoundCN (L.drug_N (mkNum (mkDigits "3"))) L.method_N))))))))))))))) fullStopPunct)
TXT: [A function type is expected for drug_N instead of type N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Biros")) (mkNP S.a_Quant (mkCN (L.trip_N (mkNP (P.mkPN "Lucasville")) (S.mkOrd (mkDigits "2")))))))) fullStopPunct)
TXT: [A function type is expected for trip_N instead of type N]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (have-org-role-91 (mkNP S.a_Quant (mkCN (mkCN L.district_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "U.S.")))))) (mkVP (mkVP (passiveVP L.refuse_V2) (weekdayPunctualAdv monday_Weekday)) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.delay_VS (mkS (mkCl (mkVP L.execute_V)))))))))) (mkS (mkCl (mkVP (passiveVP L.reject_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (P.mkPN "Biros")) (mkVP L.appeal_V)))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (have-org-role-91 (mkNP S.a_Quant (mkCN (mkCN L.district_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "U.S.")))))) (mkVP (mkVP (passiveVP L.refuse_V2) (weekdayPunctualAdv monday_Weekday)) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.delay_VS (mkS (mkCl (mkVP L.execute_V)))))))))) (mkS (mkCl (mkVP (passiveVP L.reject_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (P.mkPN "Biros")) (mkVP L.appeal_V)))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP L.all_Det (mkNum (mkDigits "36")) (E.CompoundCN L.penalty_N L.state_N)) (mkVP L.use_VS (mkS (mkCl (mkVP L.inject_V)))))) (mkS (mkCl (mkNP S.a_Quant (mkNum (mkDigits "35")) (mkCN (mkCN L.state_N) (mkRS (mkRCl S.which_RP (passiveVP L.include_V2))))) (mkVP L.rely_V2 (mkNP S.a_Quant (E.CompoundCN (L.drug_N (mkNum (mkDigits "3"))) L.method_N)))))))) fullStopPunct)
TXT: [unknown qualified constant L.use_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.contrast_V2) (E.PurposeVP (mkVP finalize-01))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (P.mkPN "Nebraska")) (mkVP L.propose_V2 (mkNP S.a_Quant (E.CompoundCN (L.drug_N (mkNum (mkDigits "3"))) L.method_N)))))))))) fullStopPunct)
TXT: [constant not found: finalize]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP (P.mkPN "Biros")) (mkVP (mkVP L.kill_V2 (mkNP (P.mkPN "Engstrom"))) (yearAdv (intYear (ss "1991")))))) (mkS (mkCl (mkVP (mkVP (P.mkAdV "then") (mkVP L.scatter_V2 (mkNP S.a_Quant (mkCN (mkCN L.part_N) (S.mkAdv L.part_Prep (mkNP S.a_Quant (mkCN L.body_N))))))) (S.mkAdv L.GOL_Prep (mkNP S.and_Conj (mkListNP (mkNP (P.mkPN "Ohio")) (mkNP (P.mkPN "Pennsylvania"))))))))))) fullStopPunct)
TXT: [Biros kills Engstrom in 1991 and it then scatters a part of a body to Ohio and Pennsylvania .]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl S.he_NP (mkVP L.apologize_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.crime_N))))))) (mkS (mkCl (mkVP L.thank_VV (mkVP support-01) (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN L.person_N)) (mkNP S.a_Quant (mkCN L.person_N)))))))))) fullStopPunct)
TXT: [unknown qualified constant L.apologize_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Biros")) (mkVP L.say_VS (mkS (mkCl (passiveVP L.parole_V2))))))) fullStopPunct)
TXT: [Biros says that it is paroled .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP (P.mkAdV "now") (mkVP L.spend_V2 (mkNP L.all_Det (mkCN L.holidays_N))))))) fullStopPunct)
TXT: [unknown qualified constant L.holidays_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "US")) (mkVP (mkVP L.clear_VS (mkS (mkCl (mkNP S.a_Quant (mkNum (mkDigits "2")) (E.CompoundCN L.group_N L.scholar_N)) (passiveVP L.return_V2)))) (S.mkAdv L.VSP_Prep (mkNP S.a_Quant (mkCN L.way_N))))))) fullStopPunct)
TXT: [unknown qualified constant L.clear_VS]

SNT: 
AST: (mkText (mkUtt (mkNP (P.mkPN "New York"))))
TXT: [New York .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.spokesman_N L.of_Prep)) (mkVP (mkVP (passiveVP L.say_V2) (weekdayPunctualAdv wednesday_Weekday)) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (P.mkPN "State Department")) (mkVP (mkVP L.clear_VS (mkS (mkCl (mkNP S.a_Quant (mkNum (mkDigits "2")) (mkCN (E.CompoundCN L.group_N L.prominent_A L.scholar_N) (mkRS (mkRCl S.which_RP (mkVP (mkVP (P.mkAdV "once") (passiveVP L.accuse_V2)) (E.PurposeVP (mkVP have-03))))))) (mkVP (passiveVP L.return_V2) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "United States"))))))) (S.mkAdv L.VSP_Prep (mkNP S.a_Quant (mkCN L.way_N))))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.spokesman_N L.of_Prep)) (mkVP (mkVP (passiveVP L.say_V2) (weekdayPunctualAdv wednesday_Weekday)) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (P.mkPN "State Department")) (mkVP (mkVP L.clear_VS (mkS (mkCl (mkNP S.a_Quant (mkNum (mkDigits "2")) (mkCN (E.CompoundCN L.group_N L.prominent_A L.scholar_N) (mkRS (mkRCl S.which_RP (mkVP (mkVP (P.mkAdV "once") (passiveVP L.accuse_V2)) (E.PurposeVP (mkVP have-03))))))) (mkVP (passiveVP L.return_V2) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "United States"))))))) (S.mkAdv L.VSP_Prep (mkNP S.a_Quant (mkCN L.way_N))))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (mkCN (mkCN (P.mkN2 L.spokesman_N L.of_Prep) (mkNP S.a_Quant (mkCN L.department_N))) (mkNP (P.mkPN "Darby Holladay")))) (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS (mkCl (have-org-role-91 (P.mkN2 (L.secretary_N (S.mkAdv L.about_Prep (mkNP S.a_Quant (mkCN L.foreign_N)))) L.of_Prep)) (mkVP (passiveVP L.sign_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.order_V)))))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (mkNP (mkCN (mkCN (P.mkN2 L.spokesman_N L.of_Prep) (mkNP S.a_Quant (mkCN L.department_N))) (mkNP (P.mkPN "Darby Holladay")))) (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS (mkCl (have-org-role-91 (P.mkN2 (L.secretary_N (S.mkAdv L.about_Prep (mkNP S.a_Quant (mkCN L.foreign_N)))) L.of_Prep)) (mkVP (passiveVP L.sign_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.order_V)))))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Holladay")) (mkVP L.say_VS (mkS (mkCl (mkNP (P.mkPN "Clinton")) (mkVP L.choose_VS (mkS (mkCl (mkVP (mkVP L.exercise_V2 (mkNP S.a_Quant (mkCN (mkCN L.authority_N) (E.PurposeVP (mkVP L.exempt_V))))) (E.PurposeVP (mkVP L.benefit_V2 (mkNP S.and_Conj (mkListNP (mkNP (P.mkPN "Tariq Ramadan")) (mkNP (P.mkPN "Adam Habib")))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.choose_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.we_NP (mkVP L.let_VS (mkS (mkCl (mkVP (mkVP L.speak_V) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.act_V))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.let_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Holladay")) (mkVP L.note_VS (mkS (mkCl (mkVP (passiveVP L.change_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (P.mkPN "U.S.")) (mkVP L.posture_V))))))))))) fullStopPunct)
TXT: [Holladay notes that it is changed that U.S. postures .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Holladay")) (mkVP L.say_VS (mkS (mkCl (mkVP L.clarify_VS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.organization_N) (mkRS (mkRCl S.which_RP (mkVP L.govern_V2 (mkNP (P.mkPN "U.S."))))))) (mkVP L.pursue_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.relation_N)))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.clarify_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.he_NP (mkVP L.add_VS (mkS (mkCl (mkVP L.decide_V))))))) fullStopPunct)
TXT: [he adds that it decides .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "American Civil Liberties Union")) (mkVP L.sue_V)))) fullStopPunct)
TXT: [American Civil Liberties Union sues .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkVP L.say_VS (mkS (mkCl (mkVP (mkVP (passiveVP L.mean_V2) (E.PurposeVP (mkVP (P.mkAdV "now") (mkVP (L.get_V2 (mkNP S.a_Quant (mkCN L.scholar_N))) (mkNP S.a_Quant (mkCN L.visa_N)))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (P.mkPN "State Department")) (mkVP L.act_V))))))))))) fullStopPunct)
TXT: [A function type is expected for get_V2 instead of type V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN (mkCN L.overdue_N) (mkRS (mkRCl S.which_RP (passiveVP L.long_V2))))) (mkNP S.a_Quant (mkCN L.important_N)))) (mkNP (mkCN (mkCN (P.mkN2 L.director_N L.of_Prep) (mkNP (P.mkPN "ACLU"))) (mkNP (P.mkPN "Jameel Jaffer")))) (passiveVP L.say_V2)))) fullStopPunct)
TXT: [unknown qualified constant L.overdue_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.organization_N) (mkRS (mkRCl S.which_RP (mkVP L.govern_V2 (mkNP (P.mkPN "U.S."))))))) (mkVP (mkVP L.deny_V2 (mkNP S.a_Quant (mkCN L.visa_N))) (S.mkAdv L.GOL_Prep (mkNP (ss "scholar") (mkNP (P.mkPN "Habib")))))))) fullStopPunct)
TXT: [an organization that governs U.S. denies a visa to scholar Habib .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (ss "state") (mkNP (P.mkPN "ACLU"))) (mkVP (mkVP L.sue_V) (yearAdv (intYear (ss "2007"))))))) fullStopPunct)
TXT: [state ACLU sues in 2007 .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN (mkCN L.visa_N) (S.mkAdv S.possess_Prep (mkNP (P.mkPN "Ramadan")))) (S.mkAdv L.from_Prep (mkNP (P.mkPN "U.S."))))) (mkVP (mkVP (passiveVP L.revoke_V2) (S.mkAdv S.when_Subj (mkS (mkCl (mkVP (mkVP (passiveVP L.move_V2) (E.PurposeVP (mkVP L.take_V2 (mkNP S.a_Quant (mkCN (mkCN L.job_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "University of Notre Dame")))))))) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "Indiana")))))))) (yearAdv (intYear (ss "2004"))))))) fullStopPunct)
TXT: [a visa of Ramadan from U.S. is revoked when it is moved to take a job in University of Notre Dame to Indiana in 2004 .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.he_NP (mkVP (mkVP L.speak_V) (S.mkAdv L.in_Prep (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN L.elsewhere_N)) (mkListNP (mkNP (P.mkPN "Harvard")) (mkNP (P.mkPN "Stanford")))))))))) fullStopPunct)
TXT: [unknown qualified constant L.elsewhere_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.deny_V2) (S.mkAdv S.because_Subj (mkS (mkCl (mkVP (mkVP L.donate_V2 (mkNP S.a_Quant (mkNum (mkDigits "1336")) (mkCN L.dollar_N))) (S.mkAdv L.GOL_Prep (mkNP (mkCN (mkCN L.charity_N) (mkRS (mkRCl S.which_RP (mkVP (mkVP L.give_V2 (mkNP (mkCN L.money_N))) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "Hamas")))))))))))))) (S.mkAdv S.that_Subj (mkS (mkCl S.he_NP (mkVP L.apply_V2 (mkNP S.a_Quant (mkCN L.visa_N)))))))))) fullStopPunct)
TXT: [it is denied because it donates 1 Predef.BIND , Predef.BIND 3 Predef.BIND 3 Predef.BIND 6 dollars to charity that gives money to Hamas that he applies a visa .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Ramadan")) (mkVP L.say_VS (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP L.promote_VS (mkS (mkCl (mkVP (P.mkAdV "peaceful") (mkVP L.solve_V))))))) (mkListS (mkS negativePol (mkCl (mkVP (passiveVP L.connect_V2) (S.mkAdv L.PPT_Prep (mkNP (mkCN L.terrorism_N)))))) (mkS (mkCl (mkVP L.oppose_V2 (mkNP S.a_Quant (E.CompoundCN L.group_N L.extremism_N)))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.promote_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Ramadan")) (mkVP L.say_VS (mkS (mkCl (mkVP (mkVP (passiveVP L.please_V2) (E.PurposeVP (mkVP decide-01))) (P.mkAdv "very")))))))) fullStopPunct)
TXT: [constant not found: decide]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl S.he_NP (mkVP L.say_VS (mkS (mkCl (mkVP L.look_forward_VS (mkS (mkCl (mkVP (P.mkAdV "soon") (mkVP L.visit_V2 (mkNP (P.mkPN "United States")))))))))))) (mkS (mkCl (mkNP (P.mkPN "PEN")) (mkVP L.say_VS (mkS (mkCl (mkVP L.plan_VS (mkS (mkCl (mkVP (mkVP L.organize_V2 (mkNP S.a_Quant (mkCN L.forum_N))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "New York"))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.look_forward_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Habib")) (mkVP L.say_VS (mkS (mkCl (passiveVP L.thrill_V2))))))) fullStopPunct)
TXT: [Habib says that it is thrilled .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Habib")) (mkVP (mkVP (mkVP L.live_V) (S.mkAdv S.when_Subj (mkS (mkCl (mkVP (mkVP L.earn_V2 (mkNP S.a_Quant (mkCN (mkCN L.doctorate_N) (S.mkAdv L.about_Prep (mkNP S.a_Quant (E.CompoundCN L.politics_N L.science_N)))))) (S.mkAdv L.DIR_Prep (mkNP (P.mkPN "City University of New York")))))))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "United States"))))))) fullStopPunct)
TXT: [Habib lives when it earns a doctorate about a politics science to City University of New York in United States .]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl S.he_NP (mkVP L.say_VS (mkS (mkCl (passiveVP L.exclude_V2)))))))) questMarkPunct)
TXT: [does he say that it is excluded ?]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Habib")) (mkVP (mkVP L.call_VS (mkS (mkCl (mkNP (P.mkPN "U.S.")) (mkVP L.approach_V2 (mkNP (P.mkPN "Iraq War")))))) (S.mkAdv L.PRD_Prep (mkNP S.a_Quant (mkCN L.disaster_N))))))) fullStopPunct)
TXT: [unknown qualified constant L.call_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.he_NP (mkVP (P.mkAdV "also") (mkVP L.say_VS (mkS (mkCl S.it_NP (mkAP (L.confident_A (mkVP possible-01)))))))))) fullStopPunct)
TXT: [constant not found: possible]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl (mkNP S.i_Pron (mkCN L.politics_N)) (mkVP L.concern_V2 S.that_NP)))) fullStopPunct)
TXT: [my politics doesn't concern that .]

SNT: 
AST: (s string-entity)
TXT: [command not parsed: cc -one (s string-entity)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (have-org-role-91 (mkNP (P.mkPN "Associated Press")) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Washington")))) (mkVP L.contribute_V)))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (have-org-role-91 (mkNP (P.mkPN "Associated Press")) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Washington")))) (mkVP L.contribute_V)))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl have-org-role-91 (mkVP L.decide_V)))))))) questMarkPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkQS (mkQCl (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl have-org-role-91 (mkVP L.decide_V)))))))) questMarkPunct)]

SNT: 
AST: (mkText (mkUtt (mkNP (P.mkPN "Los Angeles"))))
TXT: [Los Angeles .]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl (mkNP S.a_Quant (mkCN (mkCN L.thing_N) (mkRS (mkRCl S.which_RP (passiveVP L.argue_V2))))) have-org-role-91 (mkVP (mkVP (passiveVP L.hear_V2) (E.PurposeVP (mkVP L.determine_VS (mkS (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl (mkVP (mkVP (mkVP L.sentence_V2 (mkNP (P.mkPN "Roman Polanski"))) (S.mkAdv S.when_Subj (mkS (mkCl (passiveVP L.absent_V2))))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "California")))))))))))) (weekdayPunctualAdv friday_Weekday)))))) questMarkPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkQS (mkQCl (mkCl (mkNP S.a_Quant (mkCN (mkCN L.thing_N) (mkRS (mkRCl S.which_RP (passiveVP L.argue_V2))))) have-org-role-91 (mkVP (mkVP (passiveVP L.hear_V2) (E.PurposeVP (mkVP L.determine_VS (mkS (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl (mkVP (mkVP (mkVP L.sentence_V2 (mkNP (P.mkPN "Roman Polanski"))) (S.mkAdv S.when_Subj (mkS (mkCl (passiveVP L.absent_V2))))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "California")))))))))))) (weekdayPunctualAdv friday_Weekday)))))) questMarkPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.person_N)) (mkVP L.say_VS (mkS (mkCl (mkVP L.recommend_VS (mkS (mkCl (mkVP (mkVP (passiveVP L.sentence_V2) (S.mkAdv S.when_Subj (mkS (mkCl (passiveVP L.absent_V2))))) (E.PurposeVP (mkVP L.serve_V2 (mkNP (mkCN L.time_N)))))))))))))) fullStopPunct)
TXT: [a person says that it recommends that it is sentenced when it is absented to serve time .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.prosecute_V))))) (mkVP L.insist_VS (mkS (mkCl (mkVP L.obligate_VV (mkVP (mkVP appear-01) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN (mkCN L.courtroom_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Los Angeles"))))))) (mkNP (P.mkPN "Polanski"))))))))) fullStopPunct)
TXT: [constant not found: appear]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Polanski")) (mkVP (mkVP L.spend_V) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN (mkCN L.jail_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Switzerland")))))))))) fullStopPunct)
TXT: [Polanski spends in a jail in Switzerland .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.person_N)) (mkVP (P.mkAdV "also") (mkVP L.urge_VV (mkVP (mkVP sentence-01) (S.mkAdv S.when_Subj (mkS (mkCl (passiveVP L.absent_V2))))) (have-org-role-91 (mkNP (P.mkPN "Superior Court")))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.person_N)) (mkVP (P.mkAdV "also") (mkVP L.urge_VV (mkVP (mkVP sentence-01) (S.mkAdv S.when_Subj (mkS (mkCl (passiveVP L.absent_V2))))) (have-org-role-91 (mkNP (P.mkPN "Superior Court")))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (S.mkAdv S.because_Subj (mkS (mkCl S.it_NP (mkAP (mkAP L.likely_A) (mkS (mkCl (mkNP S.a_Quant (E.CompoundCN L.either_N L.side_N)) (mkVP L.appeal_VS (mkS (mkCl (mkNP (P.mkPN "Espinoza")) (mkVP L.decide_V)))))))))) (mkS negativePol (mkCl (mkVP (mkVP (P.mkAdV "immediate") (mkVP L.impact_V)) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.rule_V))))))))) fullStopPunct)
TXT: [unknown qualified constant L.either_N]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP (P.mkPN "Polanski")) (mkVP (mkVP (mkVP L.flee_V) (yearAdv (intYear (ss "1978")))) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "France")))))) (mkS (mkCl (mkAP L.fugitive_A)))))) fullStopPunct)
TXT: [no overload instance of mkCl]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (mkCN (mkCN (P.mkN2 L.professor_N L.of_Prep) (mkNP (P.mkPN "University of Southern California"))) (mkNP (P.mkPN "Michael Brennan")))) (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.contrast_VV (mkVP believe-01) (mkS (mkCl (mkNP S.a_Quant (mkCN L.defendant_N)) (mkVP (passiveVP L.sentence_V2) (S.mkAdv S.when_Subj (mkS (mkCl (passiveVP L.absent_V2))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.contrast_VV]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Brennan")) (mkVP L.say_VS (mkS (mkCl (mkVP L.think_VS (mkS (mkCl S.it_NP (mkAP L.most_AdA (mkAP (mkAP L.likely_A) (mkS (mkCl have-org-role-91 (mkVP (passiveVP L.require_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (P.mkPN "Polanski")) (mkVP (mkVP (passiveVP L.come_V2) (E.PurposeVP (mkVP L.sentence_V))) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN L.back_N))))))))))))))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Brennan")) (mkVP L.say_VS (mkS (mkCl (mkVP L.think_VS (mkS (mkCl S.it_NP (mkAP L.most_AdA (mkAP (mkAP L.likely_A) (mkS (mkCl have-org-role-91 (mkVP (passiveVP L.require_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (P.mkPN "Polanski")) (mkVP (mkVP (passiveVP L.come_V2) (E.PurposeVP (mkVP L.sentence_V))) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN L.back_N))))))))))))))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.he_NP (mkVP L.say_VS (mkS negativePol (mkCl (mkVP (passiveVP L.sense_V2) (S.mkAdv S.that_Subj (mkS (mkCl S.he_NP (mkVP (passiveVP L.come_V2) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN L.back_N)))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.come_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.person_N)) (mkVP L.say_VS (mkS (mkCl (have-org-role-91 (mkNP (P.mkPN "Superior Court"))) (mkVP (passiveVP L.sentence_V2) (E.PurposeVP (mkVP (mkVP study-01) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN (mkCN L.prison_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "California"))))))))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.person_N)) (mkVP L.say_VS (mkS (mkCl (have-org-role-91 (mkNP (P.mkPN "Superior Court"))) (mkVP (passiveVP L.sentence_V2) (E.PurposeVP (mkVP (mkVP study-01) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN (mkCN L.prison_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "California"))))))))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP L.renege_VS (mkS (mkCl (mkVP (mkVP L.bargain_V) (S.mkAdv L.COM_Prep (mkNP (P.mkPN "Polanski"))))))))) (mkS (mkCl (mkVP (mkVP L.give_VS (mkS (mkCl (mkVP L.sentence_V)))) (S.mkAdv S.when_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.hearing_N)))))))))) have-org-role-91 (passiveVP L.indicate_V2)))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP L.renege_VS (mkS (mkCl (mkVP (mkVP L.bargain_V) (S.mkAdv L.COM_Prep (mkNP (P.mkPN "Polanski"))))))))) (mkS (mkCl (mkVP (mkVP L.give_VS (mkS (mkCl (mkVP L.sentence_V)))) (S.mkAdv S.when_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.hearing_N)))))))))) have-org-role-91 (passiveVP L.indicate_V2)))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Polanski")) (mkVP L.flee_V)))) fullStopPunct)
TXT: [Polanski flees .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.person_N)) (mkVP L.say_VS (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP L.bind_V))) (mkS (mkCl (mkVP L.serve_VS (mkS (mkCl (mkVP L.sentence_V)))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.serve_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.they_NP (mkVP L.ask_VS (mkS (mkCl (mkNP (P.mkPN "Espinoza")) (mkNP S.a_Quant (mkCN (L.hearing_N (mkVP L.allege_V2 (mkNP S.a_Quant (E.CompoundCN L.judiciary_N L.misconduct_N)))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.ask_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.senator_N L.of_Prep)) (mkVP L.assure_VV (mkVP recommend-01))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.senator_N L.of_Prep)) (mkVP L.assure_VV (mkVP recommend-01))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkNP (P.mkPN "Washington"))))
TXT: [Washington .]

SNT: 
AST: (mkText (mkUtt (mkS (S.mkAdv S.because_Subj (mkS (mkCl (have-org-role-91 (P.mkN2 L.senator_N L.of_Prep)) (mkVP (passiveVP L.predict_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN (L.term_N (S.mkOrd (mkDigits "2"))))) (passiveVP L.confirm_V2)))))))) (mkS (mkCl (have-org-role-91 (P.mkN2 L.president_N L.of_Prep)) (mkVP (mkVP (passiveVP L.phone_V2) (weekdayPunctualAdv saturday_Weekday)) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (mkVP L.ally_V) (S.mkAdv L.COM_Prep (mkNP (P.mkPN "Senate")))))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (S.mkAdv S.because_Subj (mkS (mkCl (have-org-role-91 (P.mkN2 L.senator_N L.of_Prep)) (mkVP (passiveVP L.predict_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN (L.term_N (S.mkOrd (mkDigits "2"))))) (passiveVP L.confirm_V2)))))))) (mkS (mkCl (have-org-role-91 (P.mkN2 L.president_N L.of_Prep)) (mkVP (mkVP (passiveVP L.phone_V2) (weekdayPunctualAdv saturday_Weekday)) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (mkVP L.ally_V) (S.mkAdv L.COM_Prep (mkNP (P.mkPN "Senate")))))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP (P.mkPN "Barack Obama")) (mkVP L.call_V))) (mkS (mkCl (mkVP (passiveVP L.assure_V2) (E.PurposeVP (mkVP (win-01 (mkNP (P.mkPN "Bernanke")))))))))) (mkNP (mkCN (P.mkN2 L.official_N L.of_Prep) (mkNP (P.mkPN "White House")))) (mkVP (passiveVP L.tell_V2) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "The Associated Press"))))))) fullStopPunct)
TXT: [constant not found: win]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.official_N L.of_Prep)) (mkVP (passiveVP L.speak_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.discuss_VS (mkS (mkCl (mkVP L.call_V))))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.official_N L.of_Prep)) (mkVP (passiveVP L.speak_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.discuss_VS (mkS (mkCl (mkVP L.call_V))))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Jim Manley")) (mkVP L.say_VS (mkS (mkCl (mkVP (passiveVP L.schedule_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.vote_VS (mkS (mkCl (mkNP (P.mkPN "Bernanke")) (passiveVP L.confirm_V2)))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.vote_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (P.mkAdV "meanwhile") (mkVP (mkVP L.say_VS (mkS (mkCl S.it_NP (mkAP (mkAP (L.right_A (mkVP help-01))) (mkS (mkCl (mkNP (P.mkPN "Bernanke")))))))) (weekdayPunctualAdv saturday_Weekday)))))) fullStopPunct)
TXT: [constant not found: help]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkNum (mkDigits "2")) (mkCN (mkCN L.other_A L.and_N) (mkRS (mkRCl S.which_RP (passiveVP L.remain_V2))))) (mkVP (mkVP L.say_VS (mkS (mkCl (mkVP L.support_V2 S.he_NP)))) (weekdayPunctualAdv saturday_Weekday))))) fullStopPunct)
TXT: [unknown qualified constant L.and_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Kerry")) (mkVP L.say_VS (mkS negativePol (mkCl (mkVP (passiveVP L.recommend_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (P.mkPN "Bernanke")) (mkVP (passiveVP L.scapegoat_V2) (E.PurposeVP (mkVP L.fail_V2 (mkNP S.a_Quant (mkCN L.system_N))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.scapegoat_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.term_N) (S.mkAdv S.possess_Prep (mkNP (P.mkPN "Bernanke"))))) (mkVP (passiveVP L.expire_V2) (dayMonthAdv (intMonthday (ss "31")) january_Month))))) fullStopPunct)
TXT: [a term of Bernanke is expired on 31 January .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (have-org-role-91 (mkNP (P.mkPN "Senate Democrat"))) (mkVP (mkVP (P.mkAdV "already") (passiveVP L.say_V2)) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.vote_V)))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (have-org-role-91 (mkNP (P.mkPN "Senate Democrat"))) (mkVP (mkVP (P.mkAdV "already") (passiveVP L.say_V2)) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.vote_V)))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Bernanke")) (passiveVP L.become_V2)))) fullStopPunct)
TXT: [Bernanke is become .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (S.and_Conj (mkRS negativePol (mkRCl S.which_RP (mkVP (P.mkAdV "either") (mkVP (mkVP L.seek_VS (mkS (mkCl (passiveVP L.reelect_V2)))) (monthAdv november_Month)))))) (mkListNP (mkNP (P.mkPN "Dodd")) (mkNP (P.mkPN "Gregg")))) (mkVP L.say_VS (mkS (mkCl S.it_NP (mkAP L.very_AdA (mkAP (L.confident_A (mkVP (win-01 (mkNP (P.mkPN "Bernanke"))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.seek_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.senator_N L.of_Prep)) (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (P.mkPN "Bernanke")) (mkVP L.do_VS (mkS (mkCl (mkS (mkCl (mkVP L.respond_V2 (mkNP S.a_Quant (mkNum (mkDigits "1")) (mkCN (mkCN (mkCN L.financial_A L.crisis_N) (mkRS (mkRCl S.which_RP (mkNP S.we_Pron (mkCN L.country_N)) L.encounter_V2))) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.include_V2) (S.mkAdv (mkNP S.a_Quant (mkCN (mkCN L.crisis_N) (mkRS (mkRCl S.which_RP (mkAP L.most_AdA (mkAP L.significant_A))))))))))))))) (mkNP S.a_Quant (mkCN L.excellent_A (mkCN L.job_N))))))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.senator_N L.of_Prep)) (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (P.mkPN "Bernanke")) (mkVP L.do_VS (mkS (mkCl (mkS (mkCl (mkVP L.respond_V2 (mkNP S.a_Quant (mkNum (mkDigits "1")) (mkCN (mkCN (mkCN L.financial_A L.crisis_N) (mkRS (mkRCl S.which_RP (mkNP S.we_Pron (mkCN L.country_N)) L.encounter_V2))) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.include_V2) (S.mkAdv (mkNP S.a_Quant (mkCN (mkCN L.crisis_N) (mkRS (mkRCl S.which_RP (mkAP L.most_AdA (mkAP L.significant_A))))))))))))))) (mkNP S.a_Quant (mkCN L.excellent_A (mkCN L.job_N))))))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (S.mkAdv S.because_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.right_A (mkCN L.person_N)) (mkRS (mkRCl S.which_RP (mkVP L.lead_VV (mkVP (mkVP (L.guide_V2 S.he_NP) (mkNP (P.mkPN "Federal Reserve"))) (S.mkAdv L.GOL_Prep (mkNP S.this_Det (mkCN (mkCN L.economy_N) (mkRS (mkRCl S.which_RP (passiveVP L.recover_V2))))))))))))))) (mkS (mkCl S.we_NP (mkVP L.support_VS (mkS (mkCl (passiveVP L.nominate_V2)))))))) fullStopPunct)
TXT: [unknown qualified constant L.lead_VV]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP support-01 (mkCN (P.mkN2 L.chief_N L.of_Prep) (mkNP (P.mkPN "Fed")))))))) (mkVP (mkVP L.need_VS (mkS (mkCl (mkVP L.vote_V)))) (E.PurposeVP (mkVP L.prevent_VS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.oppose_V))))) (mkVP L.block_VS (mkS (mkCl (mkVP L.confirm_V)))))))))))) fullStopPunct)
TXT: [constant not found: support]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.spearhead_VS (mkS (mkCl (mkVP L.campaign_VS (mkS (mkCl (mkVP L.block_VS (mkS (mkCl (mkNP (P.mkPN "Bernanke")) (passiveVP L.confirm_V2))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.spearhead_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Bernanke")) (mkVP (passiveVP L.credit_V2) (E.PurposeVP (mkVP help-01)))))) fullStopPunct)
TXT: [constant not found: help]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.contrast_VV (mkVP L.anger_V2 (mkNP S.a_Quant (mkCN (mkCN (mkCN L.person_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "America")))) (mkRS (mkRCl S.which_RP (mkVP L.struggle_VS (mkS S.and_Conj (mkListS (mkS negativePol (mkCl (mkVP L.employ_V))) (mkS (mkCl (mkNP S.a_Quant (mkCN L.home_N)) (passiveVP L.foreclose_V2))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.contrast_VV]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.senator_N L.of_Prep)) (mkNP (mkCN (mkCN (P.mkN2 (L.chief_N (S.mkAdv L.about_Prep (mkNP S.a_Quant (mkCN L.staff_N)))) L.of_Prep) (mkNP (P.mkPN "White House"))) (mkNP (P.mkPN "Rahm Emanuel")))) (mkVP (passiveVP L.phone_V2) (weekdayPunctualAdv friday_Weekday))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.senator_N L.of_Prep)) (mkNP (mkCN (mkCN (P.mkN2 (L.chief_N (S.mkAdv L.about_Prep (mkNP S.a_Quant (mkCN L.staff_N)))) L.of_Prep) (mkNP (P.mkPN "White House"))) (mkNP (P.mkPN "Rahm Emanuel")))) (mkVP (passiveVP L.phone_V2) (weekdayPunctualAdv friday_Weekday))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.official_N L.of_Prep)) (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.legislate_V))))) (mkNP (mkCN (mkCN (P.mkN2 L.secretary_N L.of_Prep) (mkNP (P.mkPN "Treasury"))) (mkNP (P.mkPN "Timothy Geithner")))) (mkVP (P.mkAdV "also") (passiveVP L.call_V2))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.official_N L.of_Prep)) (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.legislate_V))))) (mkNP (mkCN (mkCN (P.mkN2 L.secretary_N L.of_Prep) (mkNP (P.mkPN "Treasury"))) (mkNP (P.mkPN "Timothy Geithner")))) (mkVP (P.mkAdV "also") (passiveVP L.call_V2))))))))) fullStopPunct)]

SNT: 
AST: (a amr-unintelligible)
TXT: [command not parsed: cc -one (a amr-unintelligible)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Philip Elliott")) (mkVP (mkVP L.contribute_V) (S.mkAdv L.GOL_Prep (mkNP S.this_Det (mkCN (mkCN L.thing_N) (mkRS (mkRCl S.which_RP (passiveVP L.report_V2)))))))))) fullStopPunct)
TXT: [Philip Elliott contributes to this thing that is reported .]

SNT: 
AST: (mkText (mkUtt (mkNP (P.mkPN "Tehran"))))
TXT: [Tehran .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (E.CompoundCN L.news_N L.agency_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Iran"))))) (mkVP L.say_VS (mkS (mkCl (mkNP S.a_Quant (mkNum (mkDigits "2")) (mkCN (mkCN L.man_N) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.convict_V2) (E.PurposeVP (mkVP charge-05))))))) (passiveVP L.execute_V2))))))) fullStopPunct)
TXT: [constant not found: charge]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.approve_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.estate_N) (S.mkAdv S.possess_Prep (mkNP (P.mkPN "Jackson"))))) (mkVP (passiveVP L.compensate_V2) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.administer_V)))))))))))))) fullStopPunct)
TXT: [it is approved that an estate of Jackson is compensated to a person that administers .]

SNT: 
AST: (mkText (mkUtt (mkNP (P.mkPN "Los Angeles"))))
TXT: [Los Angeles .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl have-org-role-91 (mkVP (mkVP (passiveVP L.agree_V2) (weekdayPunctualAdv wednesday_Weekday)) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkNum (mkDigits "2")) (mkCN (mkCN L.man_N) (mkRS (mkRCl S.which_RP (mkVP L.administer_V2 (mkNP S.a_Quant (mkCN (mkCN L.estate_N) (S.mkAdv S.possess_Prep (mkNP (P.mkPN "Michael Jackson")))))))))) (mkVP L.receive_V)))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl have-org-role-91 (mkVP (mkVP (passiveVP L.agree_V2) (weekdayPunctualAdv wednesday_Weekday)) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkNum (mkDigits "2")) (mkCN (mkCN L.man_N) (mkRS (mkRCl S.which_RP (mkVP L.administer_V2 (mkNP S.a_Quant (mkCN (mkCN L.estate_N) (S.mkAdv S.possess_Prep (mkNP (P.mkPN "Michael Jackson")))))))))) (mkVP L.receive_V)))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl have-org-role-91 (mkVP (passiveVP L.approve_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (mkVP L.compensate_V) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN (mkCN L.and_N) (mkRS (mkRCl S.which_RP (mkVP L.administer_V2 (mkNP S.a_Quant (mkCN (mkCN L.estate_N) (S.mkAdv S.possess_Prep (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.sing_V)))))))))))))))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl have-org-role-91 (mkVP (passiveVP L.approve_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (mkVP L.compensate_V) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN (mkCN L.and_N) (mkRS (mkRCl S.which_RP (mkVP L.administer_V2 (mkNP S.a_Quant (mkCN (mkCN L.estate_N) (S.mkAdv S.possess_Prep (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.sing_V)))))))))))))))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.and_Conj (mkListNP (mkNP (P.mkPN "Branca")) (mkNP (P.mkPN "McClain")))) (mkVP L.receive_V)))) fullStopPunct)
TXT: [Branca and McClain receive .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Beckloff")) (mkVP L.approve_V2 (mkNP S.a_Quant (mkCN (mkCN L.thing_N) (mkRS (mkRCl S.which_RP (passiveVP L.arrange_V2))))))))) fullStopPunct)
TXT: [Beckloff approves a thing that is arranged .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.raise_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.none_N)) (mkVP (P.mkAdV "any") (mkVP L.object_V2 (mkNP S.a_Quant (mkCN (mkCN L.thing_N) (mkRS (mkRCl S.which_RP (passiveVP L.arrange_V2))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.raise_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Howard Weitzman")) (mkVP L.say_VS (mkS (mkCl (mkVP L.contrast_VV (mkVP likely-01) (mkS (mkCl (mkVP (mkVP L.compensate_V) (P.mkAdv "fair"))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.contrast_VV]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Howard Weitzman")) (mkVP L.say_VS (mkS (mkCl (mkVP (mkVP (mkVP L.compensate_V) (S.mkAdv L.GOL_Prep S.they_NP)) (P.mkAdv "fair")))))))) fullStopPunct)
TXT: [Howard Weitzman says that it compensates to them fair .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Adam Streisand")) (mkVP L.agree_V)))) fullStopPunct)
TXT: [Adam Streisand agrees .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.he_NP (mkVP L.say_VS (mkS (mkCl (mkVP L.think_VS (mkS (mkCl S.it_NP (mkAP L.very_AdA (mkAP (mkAP L.reasonable_A) (mkS (mkCl S.this_NP))))))))))))) fullStopPunct)
TXT: [he says that it thinks that it is very reasonable that there is this .]

SNT: 
AST: (a and)
TXT: [constant not found: a]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Weitzman")) (mkVP L.note_V)))) fullStopPunct)
TXT: [Weitzman notes .]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP (P.mkPN "Beckloff")) (mkVP L.retain_VS (mkS (mkCl (mkVP L.oversee_V2 (mkNP S.a_Quant (mkCN (mkCN L.thing_N) (mkRS (mkRCl S.which_RP (passiveVP L.pay_V2))))))))))) (mkS (mkCl (mkVP L.schedule_VS (mkS (mkCl (mkVP L.progress_V))))))))) fullStopPunct)
TXT: [unknown qualified constant L.retain_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.contrast_VV (mkVP (L.express_V2 S.he_NP) (mkNP (mkCN L.faith_N))))))) fullStopPunct)
TXT: [unknown qualified constant L.contrast_VV]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl have-org-role-91 (mkVP (passiveVP L.recall_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN (L.hearing_N (mkVP (L.testify_V2 (mkNP (P.mkPN "Branca"))) (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN (E.CompoundCN L.memorabilia_N L.thing_N) (mkRS (mkRCl S.which_RP (passiveVP L.exhibit_V2))))) (mkListNP (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkAP L.business_AdA (mkAP L.connect_A)))))) (mkNP S.a_Quant (mkCN (mkCN L.thing_N) (mkRS (mkRCl S.which_RP (mkNP (P.mkPN "Jackson")) L.merchandise_V2)))))))))))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl have-org-role-91 (mkVP (passiveVP L.recall_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN (L.hearing_N (mkVP (L.testify_V2 (mkNP (P.mkPN "Branca"))) (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN (E.CompoundCN L.memorabilia_N L.thing_N) (mkRS (mkRCl S.which_RP (passiveVP L.exhibit_V2))))) (mkListNP (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkAP L.business_AdA (mkAP L.connect_A)))))) (mkNP S.a_Quant (mkCN (mkCN L.thing_N) (mkRS (mkRCl S.which_RP (mkNP (P.mkPN "Jackson")) L.merchandise_V2)))))))))))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Beckloff")) (mkVP L.say_V)))) fullStopPunct)
TXT: [Beckloff says .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.organization_N) (mkRS (mkRCl S.which_RP (mkVP L.govern_V))))) (mkVP L.hint_VS (mkS (mkCl (mkVP L.crack_down_V))))))) fullStopPunct)
TXT: [an organization that governs hints that it cracks down .]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN (mkCN (mkCN L.thing_N) (dayMonthYearAdv (intMonthday (ss "12")) may_Month (intYear (ss "2010")))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Bangkok")))))))
TXT: [a thing on 12 May 2010 in Bangkok .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.bleak_N)) (mkVP (mkVP (passiveVP L.look_V2) (S.mkAdv S.because_Subj (mkS (mkCl (have-org-role-91 (P.mkN2 L.minister_N L.of_Prep)) (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (mkVP L.offer_VS (mkS (mkCl (mkVP L.compromise_V)))) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.protest_V2 (mkNP S.a_Quant (mkCN (mkCN L.organization_N) (mkRS (mkRCl S.which_RP (mkVP L.govern_V)))))))))))))))))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.chance_N))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.bleak_N)) (mkVP (mkVP (passiveVP L.look_V2) (S.mkAdv S.because_Subj (mkS (mkCl (have-org-role-91 (P.mkN2 L.minister_N L.of_Prep)) (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (mkVP L.offer_VS (mkS (mkCl (mkVP L.compromise_V)))) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.protest_V2 (mkNP S.a_Quant (mkCN (mkCN L.organization_N) (mkRS (mkRCl S.which_RP (mkVP L.govern_V)))))))))))))))))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.chance_N))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (mkCN (P.mkN2 L.spokesman_N L.of_Prep) (mkNP S.a_Quant (mkCN (mkCN L.organization_N) (mkRS (mkRCl S.which_RP (mkVP L.govern_V))))))) (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS (mkCl (have-org-role-91 (P.mkN2 L.minister_N L.of_Prep)) (mkVP (mkVP (P.mkAdV "now") (mkVP (passiveVP L.issue_V2) (E.PurposeVP (mkVP L.deal_V)))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.instruct_V)))))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (mkNP (mkCN (P.mkN2 L.spokesman_N L.of_Prep) (mkNP S.a_Quant (mkCN (mkCN L.organization_N) (mkRS (mkRCl S.which_RP (mkVP L.govern_V))))))) (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS (mkCl (have-org-role-91 (P.mkN2 L.minister_N L.of_Prep)) (mkVP (mkVP (P.mkAdV "now") (mkVP (passiveVP L.issue_V2) (E.PurposeVP (mkVP L.deal_V)))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.instruct_V)))))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl (have-org-role-91 (P.mkN2 L.spokesman_N L.of_Prep)) (mkVP (mkVP (mkVP (mkVP (passiveVP L.tell_V2) (S.mkAdv S.when_Subj (mkS (mkCl (mkVP (passiveVP L.ask_V2) (S.mkAdv S.that_Subj (mkS (mkCl S.this_NP (mkVP L.imply_VS (mkS (mkCl (mkNP S.a_Quant (E.CompoundCN L.security_N L.force_N)) (mkVP L.crack_down_V)))))))))))) (weekdayPunctualAdv tuesday_Weekday)) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "Associated Press")))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.somePl_Det (mkCN L.guideline_N)) (have-org-role-91 (P.mkN2 L.minister_N L.of_Prep)) (mkVP (P.mkAdV "already") (passiveVP L.hand_out_V2)))))))))) questMarkPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkQS (mkQCl (mkCl (have-org-role-91 (P.mkN2 L.spokesman_N L.of_Prep)) (mkVP (mkVP (mkVP (mkVP (passiveVP L.tell_V2) (S.mkAdv S.when_Subj (mkS (mkCl (mkVP (passiveVP L.ask_V2) (S.mkAdv S.that_Subj (mkS (mkCl S.this_NP (mkVP L.imply_VS (mkS (mkCl (mkNP S.a_Quant (E.CompoundCN L.security_N L.force_N)) (mkVP L.crack_down_V)))))))))))) (weekdayPunctualAdv tuesday_Weekday)) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "Associated Press")))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.somePl_Det (mkCN L.guideline_N)) (have-org-role-91 (P.mkN2 L.minister_N L.of_Prep)) (mkVP (P.mkAdV "already") (passiveVP L.hand_out_V2)))))))))) questMarkPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.they_NP (mkVP (P.mkAdV "tomorrow") (passiveVP L.implement_V2))))) fullStopPunct)
TXT: [they are tomorrow implemented .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN (mkCN L.home_A L.portion_N) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.center_N)))) (S.mkAdv L.part_Prep (mkNP (P.mkPN "Bangkok"))))) (mkVP (passiveVP L.paralyze_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.protest_V)))))))) fullStopPunct)
TXT: [a home portion in a center of Bangkok is paralyzed that it protests .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Abhisit")) (mkVP (mkVP L.tell_VS (mkS (mkCl (mkVP L.will_VS (mkS (mkCl (mkVP L.hold_V2 (mkNP S.a_Quant (mkCN L.new_A (mkCN L.poll_N)))))))))) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "Red Shirts"))))))) fullStopPunct)
TXT: [unknown qualified constant L.will_VS]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl S.that_NP (mkVP (passiveVP L.present_V2) (S.mkAdv L.PRD_Prep (mkNP S.a_Quant (mkCN (mkCN L.part_N) (S.mkAdv L.part_Prep (mkNP S.a_Quant (mkCN L.package_N))))))))) (mkS (mkCl (mkVP (passiveVP L.see_V2) (S.mkAdv L.PRD_Prep (mkNP S.a_Quant (mkCN L.way_N))))))))) fullStopPunct)
TXT: [that is presented a part of a package and it is seen a way .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.contrast_V2) (E.PurposeVP (mkVP (P.mkAdV "gradual") (mkVP L.add_V2 (mkNP S.a_Quant (mkCN (mkCN L.list_N) (mkRS (mkRCl S.which_RP (mkAP (mkAP L.include_A) (mkS (mkCl (mkNP S.and_Conj (mkListNP (mkNP (P.mkPN "Abhisit")) (mkNP S.a_Quant (E.CompoundCN L.top_N L.person_N)))) (mkVP (mkVP L.surrender_VS (mkS (mkCl (mkNP S.a_Quant (E.CompoundCN L.security_N L.force_N)) (mkVP (mkVP L.attempt_VS (mkS (mkCl (mkVP L.disperse_V2 (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.protest_V))))))))) (dayMonthAdv (intMonthday (ss "10")) april_Month))))) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN L.police_N))))))))))))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (P.mkPN "The Red Shirts")) (mkVP L.say_VS (mkS (mkCl (mkVP (P.mkAdV "principle") (mkVP L.agree_V)))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.include_A]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP (P.mkPN "Abhisit")) (mkVP (mkVP L.tell_VS (mkS (mkCl (mkVP (mkVP (passiveVP L.have_condition_V2) (E.PurposeVP (mkVP keep-02))) (S.mkAdv S.that_Subj (mkS negativePol (mkCl S.it_NP (mkVP (passiveVP L.end_V2) (S.mkAdv S.because_Subj (mkS negativePol (mkCl (mkNP S.a_Quant (mkCN (mkCN L.organization_N) (mkRS (mkRCl S.which_RP (mkVP L.govern_V))))) (mkVP L.compromise_V)))))))))))) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.report_V))))))))) (mkS (mkCl (mkVP L.add_VS (mkS (mkCl (mkVP (passiveVP L.fray_V2) (S.mkAdv S.that_Subj (mkS (mkCl S.it_NP (mkAP (mkAP L.patient_A) (mkS (mkCl (mkNP S.a_Quant (mkCN L.person_N))))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.have_condition_V2]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl S.he_NP (mkVP L.say_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.normalcy_N)) (mkVP (passiveVP L.return_V2) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN L.society_N))))))))) (mkS (mkCl (mkVP L.add_VS (mkS (mkCl (mkVP L.obligate_V))))))))) fullStopPunct)
TXT: [unknown qualified constant L.obligate_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Panitan")) (mkVP L.say_VS (mkS (mkCl (mkVP (mkVP (P.mkAdV "now") (passiveVP L.withdraw_V2)) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (mkVP (P.mkAdV "initially") (passiveVP L.offer_V2)) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.elect_V))))))))))))))) fullStopPunct)
TXT: [Panitan says that it is now withdrawn that it is initially offered that it elects .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.he_NP (mkVP L.say_VS (mkS (mkCl (mkVP (mkVP (passiveVP L.mean_V2) (E.PurposeVP (mkVP L.cancel_V2 (mkNP S.a_Quant (mkCN (mkCN (mkCN L.condition_N) (mkRS (mkRCl S.which_RP (mkAP (mkAP L.include_A) (mkS (mkCl (mkVP (passiveVP L.date_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.elect_V))))))))))) (mkRS (mkRCl S.which_RP (passiveVP L.set_V2)))))))) (S.mkAdv S.that_Subj (mkS (mkCl S.they_NP (mkVP L.refuse_VS (mkS (mkCl (mkVP L.stop_VS (mkS (mkCl (mkVP L.protest_V))))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.include_A]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Abhisit")) (mkVP L.take_VS (mkS (mkCl (mkVP L.stand_V))))))) fullStopPunct)
TXT: [unknown qualified constant L.take_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.contrast_VV (mkVP (say-01 (mkNP S.a_Quant (mkCN (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP (mkVP (P.mkAdV "formal") (passiveVP L.know_V2)) (S.mkAdv L.PRD_Prep (mkNP (P.mkPN "United Front for Democracy Against Dictatorship"))))))) (mkRS (mkRCl S.which_RP (mkVP L.protest_V))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.contrast_VV]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.they_NP (mkVP L.want_VS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.lead_V))))) (passiveVP L.charge_V2))))))) fullStopPunct)
TXT: [they want that a person that leads is charged .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.file_V2) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN (mkCN L.either_N) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.include_V2) (S.mkAdv (mkNP S.a_Quant (mkCN L.man_N)))))))))) (S.mkAdv S.that_Subj (mkS negativePol (mkCl (mkVP L.charge_V)))))))) fullStopPunct)
TXT: [unknown qualified constant L.either_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.violent_A L.incident_N) (mkRS (mkRCl S.which_RP (passiveVP L.relate_V2))))) (mkVP L.kill_V2 (mkNP S.a_Quant (mkNum (mkDigits "29")) (mkCN L.person_N))))) (mkS (mkCl (mkVP L.wound_V2 (mkNP S.a_Quant (mkCN L.person_N))))))) (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (P.mkPN "Health Ministry")) (mkVP L.announce_V)))))))) fullStopPunct)
TXT: [unknown qualified constant L.announce_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Nicolas Hayek")) (passiveVP L.die_V2)))) fullStopPunct)
TXT: [unknown qualified constant L.die_V2]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN (mkCN (mkCN L.thing_N) (dayMonthYearAdv (intMonthday (ss "29")) june_Month (intYear (ss "2010")))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Geneva")))))))
TXT: [a thing on 29 June 2010 in Geneva .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (mkCN (mkCN (P.mkN2 L.and_N L.of_Prep) (mkNP (ss "giant") (mkNP (P.mkPN "Swatch")))) (mkNP (P.mkPN "Nicolas Hayek")))) (passiveVP L.die_V2)))) fullStopPunct)
TXT: [unknown qualified constant L.and_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.he_NP (passiveVP L.age_V2)))) fullStopPunct)
TXT: [unknown qualified constant L.age_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Swatch Group")) (mkVP L.say_VS (mkS (mkCl (mkNP (P.mkPN "Hayek")) (mkVP (mkVP (mkVP (passiveVP L.die_V2) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN (mkCN L.office_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Biel"))))))) (weekdayPunctualAdv monday_Weekday)) (S.mkAdv S.because_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.heart_N)) (passiveVP L.fail_V2))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.die_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Swatch Group")) (mkVP L.say_VS (mkS (mkCl (mkNP (P.mkPN "Nicolas G Hayek")) (mkVP L.merit_VS (mkS (mkCl (mkVP (P.mkAdV "enormous") (mkVP L.contribute_V))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.merit_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Mr. Swatch")) (mkVP (passiveVP L.credit_V2) (E.PurposeVP (mkVP reinvent-01)))))) fullStopPunct)
TXT: [constant not found: reinvent]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkNum (mkDigits "2")) (mkCN (mkCN L.main_A L.company_N) (mkRS (mkRCl S.which_RP (mkVP L.manufacture_V))))) (mkVP (mkVP (passiveVP L.verge_V2) (S.mkAdv S.when_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.bank_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "Switzerland"))))) (mkVP (mkVP L.ask_VS (mkS (mkCl (mkVP L.report_V2 (mkNP S.a_Quant (mkCN (mkCN L.alpine_A L.industry_N) (mkRS (mkRCl S.which_RP (mkVP L.make_V2 (mkNP S.a_Quant (mkCN L.watch_N))))))))))) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN (mkCN (mkCN L.firm_N) (S.mkAdv S.possess_Prep (mkNP (P.mkPN "Hayek")))) (mkRS (mkRCl S.which_RP (mkVP L.consult_V))))))))))) (E.PurposeVP (mkVP bankrupt-01)))))) fullStopPunct)
TXT: [unknown qualified constant L.manufacture_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.bank_N)) (mkVP L.think_VS (mkS (mkCl (mkVP (passiveVP L.have_condition_V2) (S.mkAdv S.that_Subj (mkS negativePol (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.watch_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "Switzerland"))))) (mkVP L.compete_V2 (mkNP S.a_Quant (mkCN (E.CompoundCN L.digit_N L.watch_N) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.make_V2) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Far East")))))))))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.have_condition_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Hayek")) (mkVP L.maintain_VS (mkS (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl S.they_NP (mkVP L.survive_V)))))))))) fullStopPunct)
TXT: [Hayek maintains that it is possible that they survive .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.company_N) (mkRS (mkRCl S.which_RP (mkVP L.make_V2 (mkNP S.a_Quant (mkCN L.watch_N))))))) (mkVP (passiveVP L.merge_V2) (E.PurposeVP (mkVP L.form_V2 (mkNP (P.mkPN "SMH")))))))) fullStopPunct)
TXT: [a company that makes a watch is merged to form SMH .]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP (P.mkPN "Hayek")) (mkVP L.reason_VS (mkS (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN L.cheap_A (mkCN L.watch_N))) (mkNP S.a_Quant (mkCN L.expensive_A L.watch_N)))) (mkVP L.tell_V2 (mkNP (mkCN L.time_N))))))))))) (mkS (mkCl (mkNP (P.mkPN "SMH")) (mkVP L.start_VS (mkS (mkCl (mkVP L.produce_V2 (mkNP S.a_Quant (mkCN (mkCN (mkCN L.wristwatch_N) (mkRS (mkRCl S.which_RP (mkVP L.revolutionize_V2 (mkNP S.a_Quant (mkCN L.industry_N)))))) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.nickname_V2) (S.mkAdv L.PRD_Prep (mkNP (P.mkPN "Swatch"))))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.start_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "SMH")) (mkVP (mkVP (passiveVP L.rename_V2) (yearAdv (intYear (ss "1998")))) (S.mkAdv L.PRD_Prep (mkNP (P.mkPN "Swatch Group"))))))) fullStopPunct)
TXT: [SMH is renamed in 1998 Swatch Group .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.he_NP (mkVP (mkVP L.introduce_VS (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP (P.mkAdV "mass") (mkVP L.produce_V)))) (mkListS (mkS (mkCl (mkNP S.a_Quant (mkCN L.case_N)) (passiveVP L.use_V2))) (mkS (mkCl (mkNP S.a_Quant (mkCN L.quartz_N)) (mkVP L.move_V))))))) (E.PurposeVP (mkVP L.hold_VS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.watch_N) (mkRS (mkRCl S.which_RP (mkAP L.more_AdA (mkAP L.cheap_A)))))) (passiveVP L.price_V2))))))))) fullStopPunct)
TXT: [unknown qualified constant L.introduce_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.have_concession_V2) (E.PurposeVP (mkVP (mkVP L.become_V2 (mkNP (P.mkPN "Swatch"))) (S.mkAdv L.PRD_Prep (mkNP S.a_Quant (E.CompoundCN L.fashion_N L.success_N)))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (P.mkPN "Hayek")) (mkVP (mkVP (P.mkAdV "also") (mkVP L.make_V2 (mkNP (mkCN L.money_N)))) (S.mkAdv L.VSP_Prep (mkNP S.a_Quant (mkCN (E.CompoundCN L.upmarket_N L.brand_N) (S.mkAdv S.possess_Prep (mkNP S.a_Quant (mkCN L.company_N)))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.have_concession_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.he_NP (mkVP (mkVP (mkVP L.tell_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.person_N)) (mkVP L.buy_V2 (mkNP S.this_Det (mkCN L.watch_N)))))) (yearAdv (intYear (ss "2004")))) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "International Herald Tribune"))))))) fullStopPunct)
TXT: [he tells in 2004 to International Herald Tribune that a person buys this watch .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Hayek")) (mkVP (passiveVP L.become_V2) (S.mkAdv L.PRD_Prep (mkNP S.a_Quant (E.CompoundCN L.nation_N L.figure_N))))))) fullStopPunct)
TXT: [Hayek is become a nation figure .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.he_NP (mkVP (mkVP L.come_up_V2 (mkNP S.a_Quant (mkCN (mkCN L.idea_N) (S.mkAdv L.about_Prep (mkNP S.a_Quant (mkCN (mkCN (mkCN L.smart_A (mkCN L.car_N)) (mkRS (mkRCl S.which_RP (mkNP S.a_Quant (mkCN (mkCN L.subsidiary_N) (S.mkAdv L.part_Prep (mkNP (P.mkPN "DaimlerChrysler AG"))))) L.make_V2))) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.compact_V2) (P.mkAdv "ultra")))))))))) (yearAdv (intYear (ss "1998"))))))) fullStopPunct)
TXT: [unknown qualified constant L.come_up_V2]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl S.he_NP (mkVP (passiveVP L.become_V2) (E.PurposeVP (mkVP (P.mkAdV "vocal") (mkVP L.criticize_V2 (mkNP S.a_Quant (mkNum (mkDigits "2")) (mkCN (mkCN L.big_A L.bank_N) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.mean_V2) (S.mkAdv L.PPT_Prep (mkNP S.and_Conj (mkListNP (mkNP (P.mkPN "Credit Suisse Group")) (mkNP (P.mkPN "UBS AG")))))))))))))))) (mkS (mkCl (mkVP L.say_VS (mkS (mkCl (mkVP (mkVP (mkVP L.threaten_V) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN (mkCN L.economy_N) (S.mkAdv S.possess_Prep (mkNP (P.mkPN "Switzerland"))))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (P.mkAdV "business") (mkVP L.practice_V)))))))))))))) fullStopPunct)
TXT: [he is become to vocal criticize 2 big banks that are meant Credit Suisse Group and UBS AG and it says that it threatens to an economy of Switzerland that it business practices .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Hayek")) (mkVP (mkVP (passiveVP L.bear_V2) (yearAdv (intYear (ss "1928")))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Beirut"))))))) fullStopPunct)
TXT: [Hayek is born in 1928 in Beirut .]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.a_Quant (mkCN L.family_N)) (mkVP (mkVP (passiveVP L.move_V2) (S.mkAdv S.when_Subj (mkS (mkCl (mkNP (P.mkPN "Hayek")) (passiveVP L.age_V2))))) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "Switzerland")))))) (mkS (mkCl (mkVP L.go_VS (mkS (mkCl (mkVP (mkVP L.study_V2 (mkNP S.and_Conj (mkListNP (mkNP (mkCN L.physics_N)) (mkListNP (mkNP (mkCN L.chemistry_N)) (mkNP (mkCN L.mathematics_N)))))) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN (mkCN L.university_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Lyon"))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.age_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.he_NP (mkVP (mkVP (mkVP L.found_V2 (mkNP (P.mkPN "Hayek Engineering"))) (yearAdv (intYear (ss "1963")))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Zurich"))))))) fullStopPunct)
TXT: [he founds Hayek Engineering in 1963 in Zurich .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.contrast_VV (mkVP (mkVP come-01) (yearAdv (intYear (ss "1982")))))))) fullStopPunct)
TXT: [unknown qualified constant L.contrast_VV]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl S.he_NP (mkAP (L.passionate_A (S.mkAdv L.about_Prep (mkNP S.a_Quant (mkCN L.timepiece_N))))))) (mkS (mkCl (mkVP (mkVP L.tell_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.watch_N)) (mkNP S.a_Quant (E.CompoundCN L.emotion_N L.product_N))))) (S.mkAdv L.GOL_Prep (mkNP (mkNP (P.mkPN "Sunday Times")) (S.mkAdv L.from_Prep (mkNP (P.mkPN "Britain"))))))))))) fullStopPunct)
TXT: [A function type is expected for passionate_A instead of type A]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.he_NP (mkVP (mkVP L.explain_VS (mkS (mkCl (S.something_NP (mkRS (mkRCl S.which_RP (mkNP S.a_Quant (mkCN L.person_N)) (L.carry_V2 (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.bare_A (mkCN L.skin_N)))))))) (mkNP S.a_Quant (mkCN L.watch_N))))) (yearAdv (intYear (ss "2000"))))))) fullStopPunct)
TXT: [A function type is expected for something_NP instead of type NP]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.we_NP (mkVP (passiveVP L.obligate_V2) (E.PurposeVP (mkVP L.convince_VV (mkVP (mkVP L.fit_V2 (mkNP S.this_Det (mkCN L.particular_A L.watch_N))) (S.mkAdv L.GOL_Prep (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN L.personal_A (mkCN L.style_N))) (mkNP S.a_Quant (mkCN L.lifestyle_N)))))) (mkNP S.every_Det (mkCN L.individual_N)))))))) fullStopPunct)
TXT: [unknown qualified constant L.convince_VV]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Hayek")) (mkVP L.say_VS (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP (P.mkPN "Swatch")) (mkVP (mkVP L.produce_V2 (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN L.emotionality_N)) (mkListNP (mkNP (mkCN L.beauty_N)) (mkNP S.a_Quant (mkCN L.sensuality_N)))))) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.watch_N)))))) (mkS (mkCl (mkVP (P.mkAdV "also") (mkVP L.produce_V2 (mkNP S.a_Quant (mkCN L.high_A (mkCN L.technology_N))))))))))))) fullStopPunct)
TXT: [Hayek says that Swatch produces an emotionality , beauty and a sensuality in a watch and it also produces a high technology .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Hayek")) (mkVP (mkVP L.begin_VS (mkS (mkCl (mkVP L.wind_down_V2 (mkNP S.a_Quant (mkCN L.career_N)))))) (S.mkAdv S.when_Subj (mkS (mkCl (mkNP (P.mkPN "Nick Hayek")) (mkVP (mkVP take_over-12 (mkCN (P.mkN2 L.executive_N L.of_Prep) (mkNP (P.mkPN "Swatch")))) (yearAdv (intYear (ss "2003"))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.begin_VS]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (have-org-role-91 (P.mkN2 L.president_N L.of_Prep)) (passiveVP L.stay_on_V2))) (mkS (mkCl (passiveVP L.remain_V2)))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (have-org-role-91 (P.mkN2 L.president_N L.of_Prep)) (passiveVP L.stay_on_V2))) (mkS (mkCl (passiveVP L.remain_V2)))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.aPl_Det (mkCN (mkCN L.other_A L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.survive_V))))) (passiveVP L.detail_V2))) (mkS (mkCl (mkNP S.a_Quant (mkCN L.funeral_N)) (passiveVP L.arrange_V2))))) (mkVP (P.mkAdV "immediate") (passiveVP L.know_V2))))) fullStopPunct)
TXT: [other persons that survive are detailed and a funeral is arranged isn't immediate known .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "Iraq"))))) (mkVP (passiveVP L.convict_V2) (E.PurposeVP (mkVP (mkVP L.smuggle_V2 (mkNP S.a_Quant (mkCN L.person_N))) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "Australia"))))))))) fullStopPunct)
TXT: [a person from Iraq is convicted to smuggle a person to Australia .]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN (mkCN (mkCN L.thing_N) (dayMonthYearAdv (intMonthday (ss "12")) august_Month (intYear (ss "2010")))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Perth")))))))
TXT: [a thing on 12 August 2010 in Perth .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.man_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "Iraq"))))) (mkVP (passiveVP L.convict_V2) (E.PurposeVP (mkVP L.smuggle_V2 (mkNP S.a_Quant (mkCN L.person_N)))))))) fullStopPunct)
TXT: [a man from Iraq is convicted to smuggle a person .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN (E.CompoundCN L.district_N L.court_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Perth")))) (S.mkAdv L.from_Prep (mkNP (P.mkPN "Australia"))))) (mkVP (mkVP L.find_VS (mkS (mkCl S.it_NP (mkAP (mkAP L.guilty_A) (mkS (mkCl (mkNP (P.mkPN "Hadi Ahmadi")))))))) (weekdayPunctualAdv wednesday_Weekday))))) fullStopPunct)
TXT: [a district court in Perth from Australia finds on Wednesday that it is guilty that there is Hadi Ahmadi .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl S.he_NP (mkVP (passiveVP L.sentence_V2) (S.mkAdv L.PPT_Prep (mkNP S.a_Quant (mkCN L.prison_N)))))))))) fullStopPunct)
TXT: [it is possible that he is sentenced a prison .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.he_NP (mkVP L.plead_VV (mkVP L.charge_VV (mkVP help-01)) (mkS negativePol (mkCl S.it_NP (mkAP L.guilty_A))))))) fullStopPunct)
TXT: [unknown qualified constant L.plead_VV]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.jury_N)) (mkVP L.find_VS (mkS (mkCl S.it_NP (mkAP (mkAP (L.guilty_A (mkVP help-01))) (mkS (mkCl S.he_NP))))))))) fullStopPunct)
TXT: [constant not found: help]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP (mkVP (P.mkAdV "then") (mkVP L.pay_V)) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.smuggle_V2 (mkNP S.a_Quant (mkCN L.person_N)))))))))))) (mkRS (mkRCl S.which_RP (mkVP L.fly_V)))) (mkRS (mkRCl S.which_RP (mkVP L.seek_V2 (mkNP S.a_Quant (mkCN L.asylum_N))))))) (mkVP L.target_V2 (mkNP (P.mkPN "Australia")))))) fullStopPunct)
TXT: [a person that then pays to a person that smuggles a person that flies that seeks an asylum targets Australia .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.prosecute_V))))) (mkVP (mkVP L.tell_VS (mkS (mkCl (mkNP (P.mkPN "Ahmadi")) (mkVP (mkVP L.work_V) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "Achmad Olong"))))))) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN L.court_N))))))) fullStopPunct)
TXT: [a person that prosecutes tells to a court that Ahmadi works to Achmad Olong .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Olong")) (mkVP (mkVP L.serve_V2 (mkNP S.a_Quant (E.CompoundCN L.prison_N L.term_N))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Australia"))))))) fullStopPunct)
TXT: [Olong serves a prison term in Australia .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Jonathan Davies")) (mkVP L.say_VS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN (mkCN L.refugee_N) (mkRS negativePol (mkRCl S.which_RP (mkAP L.pay_A)))) (mkRS (mkRCl S.which_RP (mkVP L.flee_V2 (mkNP (P.mkPN "Iraq"))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.pay_A]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Spain")) (mkVP (mkVP L.extradite_V2 (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkAP (mkAP L.suspect_A) (mkS (mkCl (mkNP S.a_Quant (E.CompoundCN L.war_N L.crime_N)))))))))) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "Bosnia"))))))) fullStopPunct)
TXT: [Spain extradites a person that is suspect that there is a war crime to Bosnia .]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN (mkCN (mkCN L.thing_N) (dayMonthYearAdv (intMonthday (ss "26")) august_Month (intYear (ss "2010")))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Sarajevo")))))))
TXT: [a thing on 26 August 2010 in Sarajevo .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN (mkCN L.man_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "Montenegro")))) (mkRS (mkRCl S.which_RP (mkAP (mkAP L.suspect_A) (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP L.torture_V))) (mkListS (mkS (mkCl (mkVP L.murder_V2 (mkNP S.a_Quant (mkCN L.civilian_N))))) (mkS (mkCl (mkVP L.rape_V))))))))))) (mkVP (mkVP (passiveVP L.extradite_V2) (E.PurposeVP (mkVP L.face_VS (mkS (mkCl (passiveVP L.try_V2)))))) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN (mkCN L.country_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Balkan")))))))))) fullStopPunct)
TXT: [unknown qualified constant L.torture_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Veselin Vlahovic")) (mkVP (mkVP (passiveVP L.extradite_V2) (weekdayPunctualAdv thursday_Weekday)) (S.mkAdv L.DIR_Prep (mkNP (P.mkPN "Spain"))))))) fullStopPunct)
TXT: [Veselin Vlahovic is extradited on Thursday to Spain .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Vlahovic")) (mkVP (passiveVP L.know_V2) (S.mkAdv L.PRD_Prep (mkNP S.a_Quant (mkCN (mkCN L.monster_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Grbavica")))))))))) fullStopPunct)
TXT: [Vlahovic is known a monster in Grbavica .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.organization_N) (mkRS (mkRCl S.which_RP (mkVP L.govern_V2 (mkNP (P.mkPN "Spain"))))))) (mkVP L.decide_VS (mkS (mkCl (mkVP L.allow_VS (mkS (mkCl S.he_NP (mkVP (passiveVP L.extradite_V2) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "Bosnia"))))))))))))) fullStopPunct)
TXT: [an organization that governs Spain decides that it allows that he is extradited to Bosnia .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.contrast_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (P.mkPN "Vlahovic")) (mkVP (passiveVP L.jail_V2) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Montenegro"))))))))))) fullStopPunct)
TXT: [it is contrasted that Vlahovic is jailed in Montenegro .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.person_N)) (mkVP L.sue_VV (mkVP harass-01))))) fullStopPunct)
TXT: [unknown qualified constant L.sue_VV]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN (mkCN (mkCN L.thing_N) (dayMonthYearAdv (intMonthday (ss "9")) september_Month (intYear (ss "2010")))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Los Angeles")))))))
TXT: [a thing on 9 September 2010 in Los Angeles .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.person_N)) (mkVP L.claim_VS (mkS (mkCl S.it_NP (mkAP (mkAP (L.subject_A (mkVP (harass-01 (mkNP (P.mkPN "Britney Spears")))))) (mkS (mkCl S.he_NP))))))))) fullStopPunct)
TXT: [constant not found: harass]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Fernando Flores")) (mkVP (mkVP (mkVP L.sue_V2 (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN L.pop_A L.superstar_N)) (mkNP (P.mkPN "Advanced Security Concepts Corp"))))) (weekdayPunctualAdv wednesday_Weekday)) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN (E.CompoundCN L.suburb_N L.court_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Los Angeles")))))))))) fullStopPunct)
TXT: [Fernando Flores sues a pop superstar and Advanced Security Concepts Corp on Wednesday in a suburb court in Los Angeles .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.he_NP (mkVP L.claim_VS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.sing_V))))) (mkVP L.expose_V))))))) fullStopPunct)
TXT: [he claims that a person that sings exposes .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP (P.mkPN "Spears")) (mkVP (mkVP L.berate_V2 S.he_NP) (S.mkAdv L.in_Prep (mkNP S.a_Quant (E.CompoundCN L.movie_N L.theater_N)))))) (mkS (mkCl (mkVP L.witness_VS (mkS (mkCl (mkVP L.act_V)))))))) (mkVP (mkVP (P.mkAdV "also") (passiveVP L.claim_V2)) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.sue_V)))))))) fullStopPunct)
TXT: [unknown qualified constant L.theater_N]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl (mkNP S.a_Quant (mkCN L.email_N)) (passiveVP L.return_V2)))) fullStopPunct)
TXT: [an email isn't returned .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.woman_N) (mkRS (mkRCl S.which_RP (mkVP (mkVP L.answer_V2 (mkNP S.a_Quant (mkCN L.phone_N))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Advanced Security")))))))) (passiveVP L.decline_V2)))) fullStopPunct)
TXT: [a woman that answers a phone in Advanced Security is declined .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.contrast_V2) (E.PurposeVP (mkVP state-01))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (P.mkPN "Flores")) (mkVP (passiveVP L.hire_V2) (monthYearAdv february_Month (intYear (ss "2010"))))))))))) fullStopPunct)
TXT: [constant not found: state]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.lawyer_N L.of_Prep)) (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (P.mkPN "Kid Rock")) (mkVP L.defend_V)))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.lawyer_N L.of_Prep)) (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (P.mkPN "Kid Rock")) (mkVP L.defend_V)))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkNP (P.mkPN "Decatur"))))
TXT: [Decatur .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN (mkCN L.person_N) (weekdayPunctualAdv tuesday_Weekday)) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.court_N))))) (mkVP L.say_VS (mkS (mkCl (mkVP L.try_VS (mkS (mkCl (mkVP (mkVP (mkVP L.defend_V) (S.mkAdv S.when_Subj (mkS (mkCl (mkVP (mkVP (passiveVP L.break_out_V2) (yearAdv (intYear (ss "2007")))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.fight_V))))))))) (S.mkAdv L.in_Prep (mkNP S.a_Quant (E.CompoundCN L.suburb_N L.facility_N))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.try_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (passiveVP L.name_V2)))) (mkRS (mkRCl S.which_RP (mkVP L.entertain_V))))) (mkNP S.a_Quant (mkNum (mkDigits "5")) (mkCN L.person_N)))) (passiveVP L.sue_V2)))) fullStopPunct)
TXT: [unknown qualified constant L.entertain_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.person_N)) (mkVP L.say_VS (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP (P.mkPN "Harlen Akins")) (mkVP L.claim_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.group_N)) (mkVP L.beat_V)))))) (mkS (mkCl (mkVP L.seek_V2 (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN (mkCN L.punitive_A L.damage_N) (mkRS negativePol (mkRCl S.which_RP (passiveVP L.specify_V2))))) (mkNP S.a_Quant (mkNum (mkDigits "6000")) (mkCN L.dollar_N))))))))))))) fullStopPunct)
TXT: [a person says that Harlen Akins claims that a group beats and it seeks a punitive damage that isn't specified and 6 Predef.BIND , Predef.BIND 0 Predef.BIND 0 Predef.BIND 0 dollars .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Eric Hertz")) (mkVP L.say_VS (mkS (mkCl (mkVP (mkVP L.state_VS (mkS (mkCl (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.entertain_V))))) (mkNP S.a_Quant (mkCN L.party_N)))) (mkVP L.behave_V)))) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN (mkCN L.court_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "DeKalb County"))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.entertain_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "William Horton")) (mkVP L.say_VS (mkS (mkCl (mkNP (P.mkPN "Akins")) (mkVP (mkVP L.demonstrate_V2 (mkNP S.a_Quant (mkCN L.pattern_N))) (S.mkAdv S.when_Subj (mkS (mkCl (mkVP L.try_VS (mkS (mkCl (mkVP L.defuse_V2 (mkNP S.a_Quant (mkCN L.situation_N)))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.try_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (ss "alone") (mkNP (P.mkPN "Akins"))) (mkVP (passiveVP L.arrive_V2) (S.mkAdv L.LOC_Prep (mkNP S.a_Quant (mkCN L.restaurant_N))))))) fullStopPunct)
TXT: [unknown qualified constant L.arrive_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Kid Rock")) (passiveVP L.arrive_V2)))) fullStopPunct)
TXT: [unknown qualified constant L.arrive_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.and_Conj (mkListNP (mkNP (P.mkPN "Akins")) (mkNP S.a_Quant (mkNum (mkDigits "2")) (mkCN (mkCN (mkCN L.woman_N) (S.mkAdv L.part_Prep (mkNP S.a_Quant (mkCN (mkCN L.party_N) (S.mkAdv S.possess_Prep (mkNP (P.mkPN "Kid Rock"))))))) (mkRS (mkRCl S.which_RP (mkAP (mkAP L.include_A) (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.woman_N) (mkRS (mkRCl S.which_RP know-01))))))))))))) (mkVP L.begin_VS (mkS (mkCl (mkVP L.talk_V))))))) fullStopPunct)
TXT: [unknown qualified constant L.include_A]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Hertz")) (mkVP L.say_VS (mkS (mkCl (mkVP (passiveVP L.have_concession_V2) (S.mkAdv S.that_Subj (mkS negativePol (mkCl (mkVP (passiveVP L.justify_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (P.mkAdV "physical") (mkVP L.attack_V)))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.have_concession_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Horton")) (mkVP L.counter_VV (mkVP L.get_VV (mkVP (L.argue_V2 (mkNP (P.mkPN "Akins"))) (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN L.woman_N)) (mkNP (P.mkPN "Kid Rock")))))))))) fullStopPunct)
TXT: [unknown qualified constant L.counter_VV]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Horton")) (mkVP L.say_VS (mkS (mkCl (mkNP (P.mkPN "Akins")) (mkVP L.keep_VS (mkS (mkCl (mkVP L.try_VS (mkS (mkCl (mkVP L.provoke_VS (mkS (mkCl (mkVP L.argue_V)))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.keep_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.jury_N)) (mkVP (mkVP L.see_V2 (mkNP S.a_Quant (mkCN (mkCN L.part_N) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.include_V2) (S.mkAdv (mkNP S.a_Quant (mkCN (mkCN (mkCN L.video_N) (mkRS (mkRCl S.which_RP (mkVP L.contain_VS (mkS (mkCl (mkVP L.fight_V))))))) (mkRS (mkRCl S.which_RP (mkVP L.surveil_V)))))))))))) (S.mkAdv S.when_Subj (mkS (mkCl (mkVP (mkVP (passiveVP L.get_V2) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN L.underway_N)))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.witness_V))))) (mkVP L.testify_V)))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.contain_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.contrast_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.video_N)) (mkVP L.show_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.party_N)) (mkVP L.fight_V))))))))))) fullStopPunct)
TXT: [it is contrasted that a video shows that a party fights .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Kid Rock")) (mkVP (mkVP L.plead_VS (mkS (mkCl S.it_NP (mkAP L.guilty_A)))) (monthYearAdv march_Month (intYear (ss "2008"))))))) fullStopPunct)
TXT: [Kid Rock pleads in March 2008 that it is guilty .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl have-org-role-91 (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (passiveVP L.expect_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (passiveVP L.wrap_up_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (P.mkAdV "civil") (mkVP L.try_V))))))))))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl have-org-role-91 (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (passiveVP L.expect_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (passiveVP L.wrap_up_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (P.mkAdV "civil") (mkVP L.try_V))))))))))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.attorney_N L.of_Prep)) (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.finalize_VS (mkS (mkCl (mkVP L.divorce_V))))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.attorney_N L.of_Prep)) (mkVP (passiveVP L.say_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.finalize_VS (mkS (mkCl (mkVP L.divorce_V))))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkNP (P.mkPN "Jackson"))))
TXT: [Jackson .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.and_Conj (mkListNP (mkNP (P.mkPN "Morgan Freeman")) (mkNP S.a_Quant (mkCN L.person_N)))) (mkVP (mkVP L.finalize_VS (mkS (mkCl (mkVP L.divorce_V)))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Mississippi"))))))) fullStopPunct)
TXT: [unknown qualified constant L.finalize_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.attorney_N L.of_Prep) (mkRS (mkRCl S.which_RP (mkVP L.represent_V2 (mkNP (P.mkPN "Freeman")))))) (mkVP (mkVP (passiveVP L.tell_V2) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "Associated Press")))) (S.mkAdv S.that_Subj (mkS (mkCl (have-org-role-91 (mkNP (P.mkPN "Tallahatchie"))) (mkVP (mkVP (passiveVP L.enter_V2) (dayMonthAdv (intMonthday (ss "15")) september_Month)) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (passiveVP L.decree_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.divorce_V)))))))))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.attorney_N L.of_Prep) (mkRS (mkRCl S.which_RP (mkVP L.represent_V2 (mkNP (P.mkPN "Freeman")))))) (mkVP (mkVP (passiveVP L.tell_V2) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "Associated Press")))) (S.mkAdv S.that_Subj (mkS (mkCl (have-org-role-91 (mkNP (P.mkPN "Tallahatchie"))) (mkVP (mkVP (passiveVP L.enter_V2) (dayMonthAdv (intMonthday (ss "15")) september_Month)) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (passiveVP L.decree_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.divorce_V)))))))))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Wright")) (mkVP L.say_VS (mkS (mkCl (mkVP (passiveVP L.seal_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.divorce_N)) (passiveVP L.term_V2))))))))))) fullStopPunct)
TXT: [Wright says that it is sealed that a divorce is termed .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Wright")) (mkVP (mkVP L.say_VS (mkS (mkCl S.it_NP (passiveVP L.do_V2)))) (weekdayPunctualAdv friday_Weekday))))) fullStopPunct)
TXT: [Wright says on Friday that it is done .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.over_N)) (mkAP (mkAP L.glad_A) (mkS (mkCl (mkNP S.a_Quant (mkCN L.everybody_N)))))))) fullStopPunct)
TXT: [unknown qualified constant L.everybody_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkAP (mkAP (L.separate_A (monthYearAdv december_Month (intYear (ss "2007"))) (S.mkAdv (P.mkPrep "after") (mkNP S.a_Quant (mkNum (mkDigits "26")) (mkCN L.year_N))))) (mkS (mkCl (mkNP S.and_Conj (mkListNP (mkNP (P.mkPN "Freeman")) (mkNP (P.mkPN "Myrna Colley-Lee")))))))))) fullStopPunct)
TXT: [A function type is expected for separate_A instead of type A]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.file_V2) (monthYearAdv july_Month (intYear (ss "2008")))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.divorce_V)))))))) fullStopPunct)
TXT: [unknown qualified constant L.divorce_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Wright")) (mkVP L.say_VS (mkS (mkCl (mkNP S.and_Conj (mkListNP (mkNP (P.mkPN "Freeman")) (mkNP (P.mkPN "Colley-Lee")))) (mkVP (mkVP L.live_V) (S.mkAdv L.in_Prep (mkNP S.the_Quant (mkCN (mkCN L.north_N) (S.mkAdv L.part_Prep (mkNP (P.mkPN "Tallahatchie"))))))))))))) fullStopPunct)
TXT: [{s = "Wright"]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl S.it_NP (mkAP L.immediate_AdA (mkAP (L.available_A (E.PurposeVP (mkVP L.comment_V)))))))) fullStopPunct)
TXT: [unknown qualified constant L.immediate_AdA]

SNT: 
AST: (mkText (mkUtt (mkNP (P.mkPN "Colley-Lee"))))
TXT: [Colley-Lee .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.couple_N)) (mkVP (passiveVP L.marry_V2) (dayMonthYearAdv (intMonthday (ss "16")) june_Month (intYear (ss "1984"))))))) fullStopPunct)
TXT: [a couple is married on 16 June 1984 .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Freeman")) (mkVP (mkVP L.settle_VS (mkS (mkCl (mkVP (P.mkAdV "law") (mkVP L.sue_V))))) (monthYearAdv november_Month (intYear (ss "2009"))))))) fullStopPunct)
TXT: [unknown qualified constant L.settle_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Demaris Meyer")) (mkVP L.file_VS (mkS (mkCl (mkNP (P.mkPN "Freeman")) (mkVP (P.mkAdV "law") (passiveVP L.sue_V2)))))))) fullStopPunct)
TXT: [unknown qualified constant L.file_VS]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl (mkVP (passiveVP L.file_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.charge_V)))))))) fullStopPunct)
TXT: [it isn't filed that it charges .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Bill Luckett")) (mkVP (mkVP (mkVP L.tell_VS (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP (passiveVP L.separate_V2) (S.mkAdv L.DIR_Prep (mkNP S.a_Quant (mkCN L.person_N)))))) (mkS (mkCl (mkVP L.file_V)))))) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.report_V))))))))))) fullStopPunct)
TXT: [no overload instance of mkCl]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Meyer")) (mkVP L.complain_VS (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP (mkVP (passiveVP L.label_V2) (S.mkAdv L.after_Prep (mkNP L.accident_N))) (S.mkAdv L.PRD_Prep (mkNP S.aPl_Det (mkCN L.other_A L.woman_N)))))) (mkS (mkCl (passiveVP L.accuse_V2))))))))) fullStopPunct)
TXT: [{s = "Meyer"]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Freeman")) (mkVP L.win_V2 (mkNP (P.mkPN "Oscar")))))) fullStopPunct)
TXT: [Freeman wins Oscar .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.and_Conj (mkListNP (mkNP (P.mkPN "Driving Miss Daisy")) (mkListNP (mkNP (P.mkPN "The Shawshank Redemption")) (mkListNP (mkNP (P.mkPN "The Dark Knight")) (mkNP (P.mkPN "Bruce Almighty")))))) (mkVP (mkVP (P.mkAdV "also") (passiveVP L.include_V2)) (E.PurposeVP (mkVP (mkVP L.credit_V2 S.he_NP) (S.mkAdv L.PPT_Prep (mkNP S.a_Quant (mkCN L.screen_N))))))))) fullStopPunct)
TXT: [Driving Miss Daisy , The Shawshank Redemption , The Dark Knight and Bruce Almighty are also included to credit him a screen .]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl S.it_NP (mkAP L.too_AdA (mkAP L.really_AdA (mkAP (mkAP L.bright_A) (mkS (mkCl S.you_NP)))))))) fullStopPunct)
TXT: [it isn't too really bright that there is you .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.try_VS (mkS (mkCl S.this_NP (mkVP L.get_through_V2 (mkNP S.you_Pron (mkCN L.noggin_N))))))))) exclMarkPunct)
TXT: [unknown qualified constant L.try_VS]

SNT: 
AST: (mkText (mkUtt (mkNP (P.mkPN "YouTube"))))
TXT: [YouTube .]

SNT: 
AST: (mkText (mkUtt (mkNP (P.mkPN "YouTube"))))
TXT: [YouTube .]

SNT: 
AST: (mkText (mkUtt (mkNP (P.mkPN "YouTube"))))
TXT: [YouTube .]

SNT: 
AST: (mkText (mkUtt (mkNP (P.mkPN "YouTube"))))
TXT: [YouTube .]

SNT: 
AST: (multi-sentence (mkText (mkUtt (mkS (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl (mkNP S.a_Quant (mkCN L.private_A (mkCN L.citizen_N))) (mkVP L.post_V2 (mkNP S.a_Quant (mkCN L.video_N))))))))) fullStopPunct) (mkText (mkUtt (mkS (mkCl S.it_NP (mkNP S.a_Quant (mkCN L.public_A (mkCN L.forum_N)))))) fullStopPunct))
TXT: [it is possible that a private citizen posts a video .] [it is a public forum .]

SNT: 
AST: (mkText (mkUtt (mkNP S.and_Conj (mkListNP (mkNP (P.mkPN "FOX")) (mkListNP (mkNP (P.mkPN "NBC")) (mkListNP (mkNP (P.mkPN "CNN")) (mkNP (P.mkPN "ABC"))))))))
TXT: [FOX , NBC , CNN and ABC .]

SNT: 
AST: (mkText (mkUtt (mkS (S.mkAdv S.because_Subj (mkS (mkCl (mkNP (P.mkPN "BP")) (mkVP L.own_VS (mkS (mkCl (mkNP S.a_Quant (mkCN (E.CompoundCN L.media_N L.stock_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "America"))))) (mkVP (P.mkAdV "large") (passiveVP L.share_V2)))))))) S.this_NP)) fullStopPunct)
TXT: [unknown qualified constant L.own_VS]

SNT: 
AST: (multi-sentence (mkText (mkUtt (mkS negativePol (mkCl (mkVP L.contrast_VV (mkVP (L.own_V2 (mkNP (P.mkPN "BP"))) (mkNP S.a_Quant (mkCN (E.CompoundCN L.video_N L.camera_N) (S.mkAdv S.possess_Prep (mkNP S.a_Quant (mkCN (mkCN (mkCN L.citizen_N) (S.mkAdv L.in_Prep (mkNP S.a_Quant (E.CompoundCN L.gulf_N L.coast_N)))) (mkRS (mkRCl S.which_RP (mkVP L.broadcast_VS (mkS (mkCl (mkVP (passiveVP L.account_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.document_VS (mkS (mkCl (mkVP L.take_over_V2 (mkNP S.a_Quant (mkCN L.public_A (mkCN L.beach_N)))))))))))))))))))))))))) fullStopPunct) (mkText (mkUtt (mkS negativePol (mkCl (mkNP S.this_Det (mkCN L.corporate_A L.thug_N)) (mkVP L.allow_VS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.report_V))))) (mkVP L.interview_V2 (mkNP S.a_Quant (mkCN (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.do_VS (mkS (mkCl (mkVP L.clean_up_V))))))) (mkRS (mkRCl S.which_RP (mkVP L.work_V)))))))))))) fullStopPunct) (mkText (mkUtt (mkNP S.a_Quant (mkCN (mkCN (mkCN L.scandal_N) (S.mkAdv L.about_Prep (mkNP S.a_Quant (mkCN L.local_A (mkCN L.town_N))))) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.explode_V2) (S.mkAdv S.when_Subj (mkS (mkCl S.they_NP (mkVP L.find_out_V2 (mkNP S.this_Det (mkCN (mkCN (mkCN (mkCN L.just_A L.person_N) (E.PurposeVP (mkVP L.show_V))) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.there_N)))) (mkRS (mkRCl S.which_RP (mkVP L.work_V)))))))))))))))) (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (P.mkAdV "before") (mkVP L.warn_V)) (S.mkAdv L.GOL_Prep S.they_NP))))) fullStopPunct) (mkText (mkUtt (mkS (mkCl S.they_NP (mkVP L.stop_VS (mkS (mkCl (mkVP L.work_V))))))) fullStopPunct))
TXT: [unknown qualified constant L.contrast_VV] [unknown qualified constant L.do_VS] [unknown qualified constant L.there_N] [it before warns to them .] [unknown qualified constant L.stop_VS]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.a_Quant (mkCN L.local_A (mkCN L.group_N))) (mkVP (mkVP L.picket_V2 (mkNP (P.mkPN "BP"))) (E.PurposeVP (mkVP L.save_V2 (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN L.marshland_N)) (mkNP S.a_Quant (mkCN L.dolphin_N))))))))) (mkS (mkCl (mkVP L.receive_VS (mkS negativePol (mkCl (mkVP L.respond_V))))))))) fullStopPunct)
TXT: [unknown qualified constant L.marshland_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.this_Det (mkCN L.local_A (mkCN L.group_N))) (mkVP (P.mkAdV "still") (mkVP L.fight_V))))) fullStopPunct)
TXT: [this local group still fights .]

SNT: 
AST: (multi-sentence (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.take_off_V2) (S.mkAdv L.in_Prep (mkNP (P.mkPN "YouTube")))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (P.mkAdV "all") (mkVP L.post_V))))))))) fullStopPunct))
TXT: [it is taken off in YouTube that it all posts .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (P.mkAdV "now") (mkVP L.last_V))))) fullStopPunct)
TXT: [it now lasts .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (P.mkAdV "now") (passiveVP L.allow_V2)) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.human_A L.being_N) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.earth_N))))) (mkVP (mkVP L.post_V2 (mkNP S.a_Quant (mkCN (mkCN L.anything_N) (S.mkAdv L.about_Prep (mkNP S.a_Quant (E.CompoundCN L.gulf_N L.crisis_N)))))) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "YouTube"))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.anything_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkS (mkCl (mkNP (mkCN (mkCN L.mass_A L.media_N) (S.mkAdv S.possess_Prep (mkNP (mkCN L.corporate_A L.news_N))))) (mkVP L.black_out_V2 (mkNP (mkCN L.media_N))))) (mkNP S.a_Quant (E.CompoundCN L.one_N L.thing_N))))) fullStopPunct)
TXT: [unknown qualified constant L.black_out_V2]

SNT: 
AST: (multi-sentence (mkText (mkUtt (mkS (mkCl (mkVP L.contrast_VV (mkVP (mkVP (L.have_V2 S.you_NP) (mkNP S.a_Quant (mkCN (E.CompoundCN L.police_N L.state_N) (mkRS negativePol (mkRCl S.which_RP (mkVP L.let_VS (mkS (mkCl (mkVP L.know_V2 (mkNP S.a_Quant (mkCN L.anything_N))))))))))) (S.mkAdv S.when_Subj (mkS (mkCl (mkVP (passiveVP L.extend_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.corporate_N)) (mkVP L.control_V))))))))))))) fullStopPunct) (mkText (mkUtt (mkS (mkCl (mkVP L.exemplify_V)))) fullStopPunct))
TXT: [unknown qualified constant L.contrast_VV] [unknown qualified constant L.exemplify_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "BP")) (passiveVP L.catch_V2)))) fullStopPunct)
TXT: [BP is caught .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "BP")) (passiveVP L.catch_V2)))) fullStopPunct)
TXT: [BP is caught .]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl S.you_NP (mkVP (P.mkAdV "yet") (mkVP L.get_V2 (mkNP S.a_Quant (mkCN L.picture_N)))))))) questMarkPunct)
TXT: [do you yet get a picture ?]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.and_Conj (mkListNP (mkNP (P.mkPN "BP")) (mkNP (mkCN L.media_N)))) (mkVP L.brainwash_V2 S.you_NP)))) fullStopPunct)
TXT: [BP and media brainwash you .]

SNT: 
AST: (multi-sentence (mkText (mkUtt (mkS negativePol (mkCl (mkVP (passiveVP L.exist_V2) (S.mkAdv S.that_Subj (mkS (mkCl S.it_NP (mkAP L.entire_AdA (mkAP (mkAP L.free_A) (mkS (mkCl S.you_NP))))))))))) fullStopPunct) (mkText (mkUtt (mkS negativePol (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl S.you_NP (mkVP (mkVP (mkVP L.tell_V2 (mkNP S.a_Quant (mkCN (mkCN L.thing_N) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.go_on_V2) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.gulf_N))))))))) (S.mkAdv L.GOL_Prep L.anyone_NP)) (S.mkAdv L.in_Prep (mkNP S.a_Quant (E.CompoundCN L.internet_N L.large_A L.website_N)))))))))) fullStopPunct) (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP L.delete_VS (mkS (mkCl (mkVP (mkVP L.post_V2 (mkNP S.a_Quant (mkCN L.anything_N))) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "YouTube"))))))))) (mkListS (mkS (mkCl S.they_NP (mkVP L.cut_out_V2 S.you_NP))) (mkS (mkCl (mkVP L.block_V))))))) fullStopPunct))
TXT: [unknown qualified constant L.exist_V2] [missing record fields: s, g type of large_A] [unknown qualified constant L.delete_VS]

SNT: 
AST: (multi-sentence (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.extend_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (mkCN L.media_N)) (passiveVP L.black_out_V2)))))))) fullStopPunct) (mkText (mkUtt (mkS (mkCl (mkVP L.wake_up_V2 S.you_NP)))) exclMarkPunct))
TXT: [unknown qualified constant L.black_out_V2] [it wakes up you !]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkVP L.escape_V2 (mkNP S.a_Quant (mkCN L.loony_A L.bin_N)))))) fullStopPunct)
TXT: [{s = "you" ++ "escape" ++ "a" ++ "loony" ++ "bin" ++ ".";]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl L.anyone_NP (mkVP L.notice_VS (mkS (mkCl (mkNP (mkCN L.media_N)) (passiveVP L.black_out_V2)))))))) questMarkPunct)
TXT: [unknown qualified constant L.black_out_V2]

SNT: 
AST: (mkText (mkUtt (mkNP (mkCN L.conventional_A L.media_N))))
TXT: [conventional media .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.contrast_V2) (E.PurposeVP (mkVP (mkVP L.fit_V2 S.something_NP) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN L.agenda_N)))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN (E.CompoundCN L.sort_N L.media_N) (mkRS negativePol (mkRCl S.which_RP (mkVP L.depend_V))))) (mkVP L.report_V2 (mkNP S.a_Quant (mkCN L.story_N)))))))))) fullStopPunct)
TXT: [it is contrasted to fit something to an agenda that a sort media that doesn't depend reports a story .]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN (mkCN L.much_N) (S.mkAdv L.about_Prep (mkNP (P.mkPN "Faux Nooz")))))))
TXT: [a much about Faux Nooz .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.contrast_V2) (E.PurposeVP (mkVP run-09))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.one_N)) (mkVP L.think_VS (mkS (mkCl S.they_NP (mkVP L.run_V2 (mkNP S.a_Quant (mkCN L.story_N))))))))))))) fullStopPunct)
TXT: [constant not found: run]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.story_N) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.here_N))))) (passiveVP L.cause_V2)))) fullStopPunct)
TXT: [unknown qualified constant L.here_N]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl S.it_NP (mkNP S.a_Quant (mkCN L.big_A L.mess_N)))) (mkS (mkCl (mkVP L.need_VS (mkS (mkCl (mkVP (P.mkAdV "big") (mkVP L.clean_up_V)))))))))) fullStopPunct)
TXT: [it is a big mess and it needs that it big cleans up .]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.a_Quant (mkCN L.catastrophe_N)) (passiveVP L.report_V2))) (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.boat_N) (E.PurposeVP (mkVP L.fish_V)))) (mkVP L.head_V2 (mkNP S.a_Quant (mkCN L.out_N)))))))) fullStopPunct)
TXT: [a catastrophe is reported and a boat to fish heads an out .]

SNT: 
AST: (mkText (mkUtt (mkS (S.mkAdv S.because_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.stigma_N)) (mkNP S.a_Quant (mkCN L.big_A L.problem_N))))) (mkS (mkCl (mkNP S.a_Quant (mkCN L.person_N)) (mkVP L.avoid_V2 (mkNP S.a_Quant (mkCN L.entire_A L.area_N))))))) fullStopPunct)
TXT: [because a stigma is a big problem a person avoids an entire area .]

SNT: 
AST: (multi-sentence (mkText (mkUtt (mkS (mkCl S.it_NP (mkAP L.good_A)))) fullStopPunct) (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.contrast_V2) (E.PurposeVP (mkVP think-01))) (S.mkAdv S.that_Subj (mkS negativePol (mkCl S.i_NP (mkAP (mkAP L.sure_A) (mkS (S.mkAdv S.because_Subj) (mkS (mkCl (mkNP S.that_Det (mkCN (mkCN L.stronghold_N) (S.mkAdv S.possess_Prep (mkNP (P.mkPN "Obama"))))) (mkVP L.get_VS (mkS (mkCl (mkVP (mkVP L.win_V) (S.mkAdv L.DIR_Prep (mkNP S.aPl_Det (mkCN (mkCN L.other_A L.stronghold_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "St. Petersburg"))))))))))))))))))))) fullStopPunct))
TXT: [it is good .] [constant not found: think]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkVP L.mean_V)))) fullStopPunct)
TXT: [unknown qualified constant L.mean_V]

SNT: 
AST: (b (be-located-at-91 S.i_NP))
TXT: [command not parsed: cc -one (b (be-located-at-91 S.i_NP))]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkAP L.more_AdA (mkAP L.fruity_A)) (mkVP (passiveVP L.say_V2) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN L.dude_N))))))) fullStopPunct)
TXT: [no overload instance of mkCl]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkAP L.busy_A)))) fullStopPunct)
TXT: [it is busy .]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (E.CompoundCN L.ecology_N L.great_A L.disaster_N))))
TXT: [missing record fields: s, g type of great_A]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN L.ever_N))))
TXT: [unknown qualified constant L.ever_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.day_N)) (passiveVP L.sad_V2)))) fullStopPunct)
TXT: [unknown qualified constant L.sad_V2]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl S.they_NP (mkVP L.hope_VS (mkS (mkCl (mkNP L.all_Det (mkCN L.life_N)) (mkVP (passiveVP L.eliminate_V2) (S.mkAdv L.DIR_Prep (mkNP S.a_Quant (mkCN L.earth_N))))))))) (mkS (mkCl (mkNP S.a_Quant (mkCN L.event_N)) (mkVP (P.mkAdV "just") (passiveVP L.look_V2))))))) fullStopPunct)
TXT: [they hope that all lives are eliminated to an earth and an event is just looked .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.this_NP (mkNP S.a_Quant (E.CompoundCN L.now_N L.proper_A L.forum_N))))) fullStopPunct)
TXT: [missing record fields: s, g type of proper_A]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (S.we_NP (mkRS negativePol (mkRCl S.which_RP (mkAP L.just_AdA (mkAP L.bright_A))))) (passiveVP L.look_V2)))) fullStopPunct)
TXT: [A function type is expected for we_NP instead of type NP]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.we_NP (mkVP (mkVP (P.mkAdV "soon") (passiveVP L.entertain_V2)) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (P.mkPN "Obama")) (mkNP S.a_Quant (mkCN L.effort_N))))))))) fullStopPunct)
TXT: [we are soon entertained that Obama is an effort .]

SNT: 
AST: (a and)
TXT: [constant not found: a]

SNT: 
AST: (a3 and)
TXT: [constant not found: a3]

SNT: 
AST: (mkText (mkUtt (mkS (S.mkAdv S.because_Subj (mkS (mkCl S.nothing_NP (mkVP (passiveVP L.see_V2) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.here_N))))))) (mkS (mkCl S.you_NP (mkVP (mkVP L.move_V2 (mkNP S.a_Quant (mkCN L.folk_N))) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN L.along_N)))))))) exclMarkPunct)
TXT: [unknown qualified constant L.here_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.person_N)) (mkVP (P.mkAdV "still") (mkVP L.care_V2 (mkNP S.a_Quant (mkCN L.event_N))))))) fullStopPunct)
TXT: [unknown qualified constant L.care_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.contrast_VV (mkVP (agree-01 S.i_NP)))))) fullStopPunct)
TXT: [unknown qualified constant L.contrast_VV]

SNT: 
AST: NULL
TXT: [constant not found: NULL]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl S.i_NP (mkVP (P.mkAdV "still") (mkVP L.believe_VS (mkS (mkCl S.they_NP (mkVP L.cap_V2 S.it_NP))))))))))) fullStopPunct)
TXT: [it isn't possible that I still believe that they cap it .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.amaze_V)))) fullStopPunct)
TXT: [unknown qualified constant L.amaze_V]

SNT: 
AST: (multi-sentence (mkText (mkUtt (mkS (mkCl (S.you_NP (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.resemble_V2) (S.mkAdv L.DIR_Prep (mkNP L.all_Det (mkCN (mkCN L.other_A L.person_N) (mkRS (mkRCl S.which_RP (passiveVP L.addict_V2)))))))))) (mkVP (passiveVP L.detach_V2) (S.mkAdv L.PPT_Prep (mkNP (mkCN L.reality_N))))))) fullStopPunct) (mkText (mkUtt (mkS (mkCl (mkVP L.have_V2 (mkNP S.this_Det (E.CompoundCN L.idiot_N L.idea_N)))))) fullStopPunct))
TXT: [A function type is expected for you_NP instead of type NP] [it has this idiot idea .]

SNT: 
AST: NULL
TXT: [constant not found: NULL]

SNT: 
AST: (multi-sentence (mkText (mkUtt (mkNP S.a_Quant (mkCN L.still_A L.event_N)))) (mkText (mkUtt (mkS negativePol (mkCl (mkNP S.a_Quant (mkCN L.event_N)) (passiveVP L.stop_V2)))) fullStopPunct))
TXT: [a still event .] [an event isn't stopped .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.kill_VS (mkS (mkCl (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN L.shrimp_N)) (mkListNP (mkNP S.a_Quant (mkCN L.bird_N)) (mkListNP (mkNP S.a_Quant (mkCN L.crab_N)) (mkListNP (mkNP S.a_Quant (mkCN L.dolphin_N)) (mkNP S.a_Quant (mkCN L.fish_N))))))) (mkVP L.live_V))))))) fullStopPunct)
TXT: [unknown qualified constant L.kill_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (E.CompoundCN L.sea_N L.entire_A L.ocean_N)) (passiveVP L.poison_V2)))) fullStopPunct)
TXT: [missing record fields: s, g type of entire_A]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (mkCN L.oil_N)) (passiveVP L.wash_up_V2)))) fullStopPunct)
TXT: [oil is washed up .]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.a_Quant (E.CompoundCN L.oil_N L.slick_N)) (mkVP (P.mkAdV "still") (passiveVP L.move_V2)))) (mkS (mkCl (mkVP L.poison_V2 (mkNP S.and_Conj (mkListNP (mkNP (P.mkPN "Gulf Ocean")) (mkNP (P.mkPN "Atlantic Ocean")))))))))) fullStopPunct)
TXT: [an oil slick is still moved and it poisons Gulf Ocean and Atlantic Ocean .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.event_N)) (passiveVP L.continue_V2)))) fullStopPunct)
TXT: [an event is continued .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "BP")) (mkVP L.use_VV (mkVP L.hide_V2 (mkNP (mkCN L.oil_N))) (mkNP S.a_Quant (mkCN L.toxic_A L.dispersant_N)))))) fullStopPunct)
TXT: [unknown qualified constant L.dispersant_N]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN (E.CompoundCN L.cancer_N L.poison_N) (mkRS (mkRCl S.which_RP (mkVP L.kill_V)))))))
TXT: [a cancer poison that kills .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkVP L.kill_V)))) fullStopPunct)
TXT: [it kills .]

SNT: 
AST: NULL
TXT: [constant not found: NULL]

SNT: 
AST: (mkText (mkUtt (mkNP (mkCN (mkCN L.oil_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Miami Beach")))))))
TXT: [oil in Miami Beach .]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl S.i_NP (mkVP L.hear_V2 S.that_NP)))) fullStopPunct)
TXT: [I don't hear that .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP (mkVP L.get_V2 (mkNP S.a_Quant (mkCN (mkCN L.member_N) (S.mkAdv L.part_Prep (mkNP S.a_Quant (mkCN L.family_N)))))) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.there_N))))))) fullStopPunct)
TXT: [unknown qualified constant L.there_N]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl S.he_NP (mkVP (P.mkAdV "either") (mkVP L.see_V2 (mkNP S.a_Quant (mkCN L.any_N))))))) fullStopPunct)
TXT: [unknown qualified constant L.any_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.have_concession_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.beach_N)) (passiveVP L.fill_V2)))))))) fullStopPunct)
TXT: [unknown qualified constant L.have_concession_V2]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl (mkNP (ss "entire") (mkNP (P.mkPN "Caribbean"))) (passiveVP L.poison_V2))))) questMarkPunct)
TXT: [is entire Caribbean poisoned ?]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN L.hardly_N))))
TXT: [unknown qualified constant L.hardly_N]

SNT: 
AST: (b (be-located-at-91 S.you_NP (yearAdv (intYear (ss "1992")))))
TXT: [command not parsed: cc -one (b (be-located-at-91 S.you_NP (yearAdv (intYear (ss "1992")))))]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN L.horseshit_N))))
TXT: [unknown qualified constant L.horseshit_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkVP (P.mkAdV "otherwise") (mkVP L.know_V2 (mkNP S.a_Quant (mkCN (mkCN L.thing_N) (mkRS (mkRCl S.which_RP S.i_NP L.talk_V2))))))))) fullStopPunct)
TXT: [you otherwise know a thing that I talk .]

SNT: 
AST: (b (be-located-at-91 S.i_NP (S.mkAdv S.when_Subj (mkS (mkCl (mkNP (P.mkPN "George W. Bush")) (mkVP (passiveVP L.nominate_V2) (S.mkAdv L.PRD_Prep (mkNP S.a_Quant (mkCN (L.term_N (S.mkOrd (mkDigits "2")))))))))) (yearAdv (intYear (ss "2004")))))
TXT: [command not parsed: cc -one (b (be-located-at-91 S.i_NP (S.mkAdv S.when_Subj (mkS (mkCl (mkNP (P.mkPN "George W. Bush")) (mkVP (passiveVP L.nominate_V2) (S.mkAdv L.PRD_Prep (mkNP S.a_Quant (mkCN (L.term_N (S.mkOrd (mkDigits "2")))))))))) (yearAdv (intYear (ss "2004")))))]

SNT: 
AST: NULL
TXT: [constant not found: NULL]

SNT: 
AST: (multi-sentence (mkText (mkUtt (mkNP S.a_Quant (mkCN (mkCN (mkCN L.idea_N) (S.mkAdv L.about_Prep (mkNP S.a_Quant (mkCN L.stigma_N)))) (mkRS (mkRCl S.which_RP (mkVP L.make_VS (mkS (mkCl S.i_NP (mkVP L.vomit_V)))))))))) (mkText (mkUtt (mkS (mkCl (mkNP S.you_Pron (mkCN L.idea_N)) (mkNP S.a_Quant (mkCN (mkCN (mkCN L.arrogance_N) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.come_V2) (S.mkAdv L.MNR_Prep (mkNP S.a_Quant (mkCN (mkCN (mkCN L.freak_N) (mkRS (mkRCl S.which_RP (mkVP (mkVP L.hide_V) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN (mkCN L.chamber_N) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.tiny_A L.room_N)))))))))) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.marry_V2) (S.mkAdv L.PPT_Prep (mkNP S.a_Quant (mkCN L.machine_N))))))))))))) (mkRS (mkRCl S.which_RP (passiveVP L.insulate_V2)))))))) fullStopPunct))
TXT: [an idea about a stigma that makes that I vomit .] [unknown qualified constant L.come_V2]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl (mkNP S.you_Pron (mkCN L.generation_N)) (mkVP (passiveVP L.last_V2) (S.mkAdv L.in_Prep (mkNP (P.mkPN "America"))))))) fullStopPunct)
TXT: [unknown qualified constant L.last_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.we_NP (mkVP (passiveVP L.free_V2) (S.mkAdv L.PPT_Prep (mkNP S.a_Quant (mkCN (mkCN L.infantile_A L.asshole_N) (mkRS (mkRCl S.which_RP (mkVP L.treat_V2 (mkNP S.a_Quant (mkCN (E.CompoundCN L.globe_N L.disaster_N) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.resemble_V2) (E.PurposeVP (mkVP exist-01))))))))))))))))) fullStopPunct)
TXT: [constant not found: exist]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN L.wow_N))))
TXT: [a wow .]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN L.hyperbole_N))))
TXT: [a hyperbole .]

SNT: 
AST: (mkText (mkUtt (mkS negativePol negativePol (mkCl S.i_NP (mkVP L.treat_VV (mkVP exist-01) (mkNP S.a_Quant (mkCN L.disaster_N)))))) fullStopPunct)
TXT: [unknown qualified constant L.treat_VV]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkVP L.look_V2 (mkNP S.a_Quant (mkCN (mkCN L.just_A L.bitter_N) (S.mkAdv S.because_Subj (mkNP S.a_Quant (mkCN (mkCN L.situation_N) (mkRS (mkRCl S.which_RP (mkVP (P.mkAdV "rapid") (passiveVP L.improve_V2))))))))))))) fullStopPunct)
TXT: [no overload instance of mkAdv]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP L.think_VS (mkS (mkCl S.it_NP (mkAP (mkAP (L.ignorant_A (S.mkAdv S.because_Subj (mkS negativePol (mkCl (mkVP (P.mkAdV "even") (mkVP L.know_V2 (mkNP S.a_Quant (mkCN L.generation_N))))))))) (mkS (mkCl S.you_NP))))))))) fullStopPunct)
TXT: [A function type is expected for ignorant_A instead of type A]

SNT: 
AST: (multi-sentence (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (E.CompoundCN L.tar_N L.ball_N)) (mkVP (passiveVP L.find_V2) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Cocoa Beach"))))))) fullStopPunct) (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Gulf Stream")) (mkVP (mkVP L.go_V) (S.mkAdv L.along_Prep (mkNP S.a_Quant (mkCN L.shore_N))))))) fullStopPunct) (mkText (mkUtt (mkS negativePol (mkCl S.it_NP (mkVP travel-01 (S.mkAdv L.against_Prep (mkNP S.a_Quant (mkCN L.shore_N))))))) fullStopPunct) (mkText (mkUtt (mkS (mkCl S.you_NP (mkVP L.find_V2 (mkNP (mkCN L.oil_N)))))) fullStopPunct))
TXT: [a tar ball is found in Cocoa Beach .] [Gulf Stream goes along a shore .] [constant not found: travel] [you find oil .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkAP L.total_AdA (mkAP L.blase_A))))) fullStopPunct)
TXT: [unknown qualified constant L.total_AdA]

SNT: 
AST: (mkText (mkUtt (mkS (S.mkAdv S.because_Subj) (b (be-located-at-91 S.you_NP)))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (S.mkAdv S.because_Subj) (b (be-located-at-91 S.you_NP)))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP L.contribute_VV (mkVP (L.depend_V2 (mkNP (P.mkPN "U.S."))) (mkNP (mkCN L.foreign_A L.oil_N)))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.organization_N) (mkRS (mkRCl S.which_RP (mkVP L.govern_V))))) (mkVP L.restrict_VS (mkS (mkCl (mkNP (mkCN L.domestic_A L.energy_N)) (passiveVP L.develop_V2))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.contribute_VV]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (E.CompoundCN L.most_N L.person_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "America"))))) (mkVP (passiveVP L.surprise_V2) (E.PurposeVP (mkVP learn-01)))))) fullStopPunct)
TXT: [unknown qualified constant L.most_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.conclude_V2) (S.mkAdv S.that_Subj (mkS (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl (mkNP L.another_Det (mkCN (mkCN L.oil_N) (mkRS negativePol (mkRCl S.which_RP (passiveVP L.discover_V2))))) (passiveVP L.recover_V2)))))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN (E.CompoundCN L.oil_N L.resource_N) (S.mkAdv S.possess_Prep (mkNP (P.mkPN "U.S."))))) (mkNP S.a_Quant (E.CompoundCN L.gas_N L.resource_N)))) (mkVP (P.mkAdV "nation") (mkVP (passiveVP L.assess_V2) (yearAdv (intYear (ss "1995")))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.recover_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.reserve_N) (mkRS (mkRCl S.which_RP (passiveVP L.infer_V2))))) (passiveVP L.recover_V2))))))) fullStopPunct)
TXT: [unknown qualified constant L.recover_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "USGS")) (mkVP L.believe_VS (mkS (mkCl (mkNP (P.mkPN "U.S.")) (mkVP L.have_V2 (mkNP (mkCN L.oil_N))))))))) fullStopPunct)
TXT: [USGS believes that U.S. has oil .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (L.available_A (E.PurposeVP (mkVP (mkVP L.explore_V2 (mkNP S.the_Quant (mkCN (mkCN L.west_N) (S.mkAdv L.part_Prep (mkNP (P.mkPN "U.S.")))))) (S.mkAdv L.PPT_Prep (mkNP S.and_Conj (mkListNP (mkNP (mkCN L.oil_N)) (mkNP (mkCN L.gas_N)))))))) (mkCN L.federal_A L.land_N))) (passiveVP L.decrease_V2)))) fullStopPunct)
TXT: [A function type is expected for available_A instead of type A]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.federal_A L.land_N) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.onshore_N))))) (mkVP (mkVP (passiveVP L.remove_V2) (E.PurposeVP (mkVP (mkVP L.explore_V) (S.mkAdv L.PPT_Prep (mkNP (mkCN L.oil_N)))))) (S.mkAdv L.DIR_Prep (mkNP S.a_Quant (mkCN L.market_N))))))) fullStopPunct)
TXT: [unknown qualified constant L.onshore_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (mkVP (mkVP (passiveVP L.reduce_V2) (S.mkAdv S.because_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.area_N)) (mkVP (passiveVP L.affect_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.roadless_N)) (passiveVP L.ban_V2))))))))) (P.mkAdv "further")) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (mkVP L.develop_V) (S.mkAdv L.PPT_Prep (mkNP (mkCN L.oil_N)))))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN (E.CompoundCN L.person_N L.organization_N) (mkRS (mkRCl S.which_RP (mkVP L.administrate_V))))) (mkVP L.propose_VS (mkS (mkCl (mkVP L.prohibit_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.new_A (mkCN L.road_N))) (mkVP (passiveVP L.construct_V2) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.federal_A L.land_N))))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.roadless_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.number_N)) (mkVP L.disturb_V)))) fullStopPunct)
TXT: [unknown qualified constant L.disturb_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Congress")) (mkVP (mkVP L.prohibit_VS (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP L.explore_V))) (mkS (mkCl (mkVP (mkVP L.produce_V) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN (mkCN L.acre_N) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.offshore_N)))))))))))) (S.mkAdv L.over_Prep (mkNP L.year_N)))))) fullStopPunct)
TXT: [unknown qualified constant L.prohibit_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.this_Det (mkCN L.narrow_A (mkCN (mkCN L.portion_N) (S.mkAdv L.part_Prep (mkNP (P.mkPN "Gulf of Mexico")))))) (mkVP L.produce_V2 (mkNP S.and_Conj (mkListNP (mkNP (mkCN L.oil_N)) (mkNP (mkCN L.gas_N)))))))) fullStopPunct)
TXT: [this narrow portion of Gulf of Mexico produces oil and gas .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Department of Energy")) (mkVP L.estimate_VS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.federal_A L.portion_N) (mkRS (mkRCl S.which_RP (mkVP (P.mkAdV "currently") (passiveVP L.comprise_V2)))))) (passiveVP L.rise_V2))))))) fullStopPunct)
TXT: [Department of Energy estimates that a federal portion that is currently comprised is risen .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.amount_V2) (E.PurposeVP (mkVP L.strangle_V2 (mkNP S.a_Quant (mkCN L.capacity_N))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (passiveVP L.fail_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (mkVP (passiveVP L.relax_V2) (S.mkAdv L.in_Prep (mkNP S.and_Conj (mkListNP (mkNP (P.mkPN "Pacific Coast")) (mkListNP (mkNP S.the_Quant (mkCN (mkCN L.east_N) (S.mkAdv L.part_Prep (mkNP (P.mkPN "Gulf of Mexico"))))) (mkNP (P.mkPN "Atlantic Ocean"))))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (P.mkAdV "federal") (mkVP L.restrict_V))))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.amount_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (mkVP (passiveVP L.exemplify_V2) (P.mkAdv "by far")) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.federal_A L.organization_N) (mkRS (mkRCl S.which_RP (mkVP L.govern_V))))) (mkVP L.war_VS (mkS (mkCl (mkNP (mkCN L.domestic_A L.oil_N)) (passiveVP L.produce_V2)))))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (passiveVP L.prohibit_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (mkVP L.develop_V) (S.mkAdv L.PPT_Prep (mkNP (P.mkPN "Arctic National Wildlife Refuge"))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.war_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "American Association of Petroleum Geologists")) (mkVP L.estimate_VS (mkS (mkCl (mkNP (P.mkPN "ANWR")) (mkVP L.contain_V2 (mkNP (mkCN L.oil_N))))))))) fullStopPunct)
TXT: [American Association of Petroleum Geologists estimates that ANWR contains oil .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.show_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (P.mkPN "ANWR")) (mkVP (P.mkAdV "probable") (mkVP L.contain_V)))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (P.mkAdV "other") (mkVP L.estimate_V))))))))) fullStopPunct)
TXT: [unknown qualified constant L.contain_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.contrast_VV (mkVP (stop-01 (mkNP S.a_Quant (mkCN (mkCN L.environmentalist_N) (mkRS (mkRCl S.which_RP (mkVP L.cite_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.ecology_N)) (mkVP L.concern_V)))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.contrast_VV]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN L.um_N))))
TXT: [unknown qualified constant L.um_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkVP L.know_VS (mkS S.or_Conj (mkListS (mkS (mkCl S.it_NP (mkAP (mkAP L.true_A) (mkS (mkCl (mkVP L.predict_V)))))) (mkS negativePol (mkCl S.it_NP (mkAP L.true_A))))))))) fullStopPunct)
TXT: [unknown qualified constant L.predict_V]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl S.you_NP (mkVP L.know_VS (mkS (mkCl (mkS (mkCl (mkVP L.forecast_V))) (mkNP S.a_Quant (mkCN L.thing_N))))))))) questMarkPunct)
TXT: [no overload instance of mkCl]

SNT: 
AST: (mkText (mkUtt S.that_NP))
TXT: [that .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.forecast_V)))) fullStopPunct)
TXT: [it forecasts .]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl (mkS (mkCl (mkNP S.that_Det (mkCN L.entity_N)) (mkVP (mkVP L.lie_V) (S.mkAdv S.when_Subj (mkS (mkCl (mkVP L.forecast_V2 (mkNP S.a_Quant (mkCN L.such_A (mkCN L.imminent_A L.shortfall_N)))))))))) (mkNP S.a_Quant (mkCN L.point_N)))))) questMarkPunct)
TXT: [no overload instance of mkCl]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.infer_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.and_Conj (mkListNP (mkNP (P.mkPN "EIA")) (mkListNP (mkNP (P.mkPN "DoE")) (mkListNP (mkNP (P.mkPN "IEA")) (mkNP (P.mkPN "Pentagon")))))) (mkVP (P.mkAdV "just") (mkVP L.pump_V2 (mkNP S.a_Quant (mkCN L.card_N))))))))))) fullStopPunct)
TXT: [it is inferred that EIA , DoE , IEA and Pentagon just pump a card .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.thing_N) (mkRS (mkRCl S.which_RP (passiveVP L.forecast_V2))))) (mkNP S.a_Quant (mkCN (mkCN L.thing_N) (mkRS (mkRCl S.which_RP (passiveVP L.guess_V2)))))))) fullStopPunct)
TXT: [a thing that is forecasted is a thing that is guessed .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.contrast_V2) (E.PurposeVP (mkVP possible-01))) (S.mkAdv S.that_Subj (mkS (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl S.i_NP (mkVP L.forecast_VS (mkS (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl (mkVP (P.mkAdV "tomorrow") (mkVP L.rain_V)))))))))))))))))) fullStopPunct)
TXT: [constant not found: possible]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl S.you_NP (mkVP (P.mkAdV "ever") (mkVP L.see_VS (mkS (mkCl (mkVP (mkVP (passiveVP L.resemble_V2) (S.mkAdv L.DIR_Prep (mkNP S.a_Quant (mkCN L.thing_N)))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (P.mkAdV "proper") (passiveVP L.manage_V2)))))))))))))) questMarkPunct)
TXT: [do you ever see that it is resembled to a thing that it is proper managed ?]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl S.you_NP (mkVP L.bring_up_V2 (mkNP S.a_Quant (mkCN L.stuff_N))))) (mkS (mkCl (mkNP (P.mkPN "EPA")) (mkVP L.monitor_V)))))) fullStopPunct)
TXT: [you bring up a stuff and EPA monitors .]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN (mkCN L.area_N) (mkRS (mkRCl S.which_RP (mkVP (mkVP (passiveVP L.include_V2) (S.mkAdv (mkNP S.a_Quant (mkCN L.some_N)))) (S.mkAdv (mkNP S.a_Quant (mkCN (mkCN L.area_N) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.beautiful_V2) (P.mkAdv "most"))))))))))))))
TXT: [unknown qualified constant L.some_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.past_N)) (passiveVP L.bring_up_V2)))) fullStopPunct)
TXT: [a past is brought up .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkVP L.read_V2 (mkNP S.a_Quant (mkCN L.bull_N)))))) fullStopPunct)
TXT: [you read a bull .]

SNT: 
AST: (multi-sentence (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP (mkVP L.live_V) (S.mkAdv L.in_Prep (mkNP S.the_Quant (mkCN (mkCN L.east_N) (S.mkAdv L.part_Prep (mkNP (P.mkPN "KY")))))))))) fullStopPunct) (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP L.see_VS (mkS (mkCl (mkVP (mkVP (mkVP L.run_V) (S.mkAdv S.because_Subj (mkS (mkCl (mkVP L.mine_V))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.stream_V))))))))))) fullStopPunct))
TXT: [I live in the East of KY .] [I see that it runs because it mines that it streams .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP (P.mkAdV "also") (mkVP L.remember_V2 (mkNP (mkCN L.last_A L.time_N))))))) fullStopPunct)
TXT: [I also remember last time .]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.a_Quant (mkCN L.lot_N)) (passiveVP L.rip_off_V2))) (mkS (mkCl S.nothing_NP (mkVP (passiveVP L.come_V2) (S.mkAdv L.MNR_Prep S.it_NP))))))) fullStopPunct)
TXT: [unknown qualified constant L.come_V2]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl (mkNP S.a_Quant (mkCN (mkCN L.part_N) (S.mkAdv L.part_Prep (mkNP S.a_Quant (mkCN L.country_N))))) (mkVP L.have_V2 (mkNP S.a_Quant (E.CompoundCN L.shale_N L.reserve_N)))))) fullStopPunct)
TXT: [a part of a country doesn't have a shale reserve .]

SNT: 
AST: (mkText (mkUtt (mkS (S.mkAdv S.because_Subj (mkS S.and_Conj (mkListS (mkS negativePol (mkCl (mkNP (mkCN L.coal_N)) (passiveVP L.regulate_V2))) (mkS (mkCl (mkVP L.mine_V)))))) (mkNP S.that_Det (mkCN (mkCN L.yuck_N) (S.mkAdv L.in_Prep (mkNP S.you_Pron (mkCN L.stream_N))))))) fullStopPunct)
TXT: [unknown qualified constant L.yuck_N]

SNT: 
AST: NULL
TXT: [constant not found: NULL]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl (mkNP (P.mkPN "EPA")) (mkVP (P.mkAdV "now") (mkVP L.allow_V2 S.that_NP))))) fullStopPunct)
TXT: [EPA doesn't now allow that .]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl S.you_NP (mkVP L.see_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.good_A (mkCN L.wise_A L.technique_N))) (mkVP (passiveVP L.result_V2) (S.mkAdv L.LOC_Prep (mkNP S.a_Quant (mkCN L.thing_N))))))))))) questMarkPunct)
TXT: [unknown qualified constant L.result_V2]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl S.you_NP (mkVP L.post_V2 (mkNP S.a_Quant (mkCN L.yuck_N)))))) fullStopPunct)
TXT: [unknown qualified constant L.yuck_N]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl S.it_NP (mkAP (mkAP L.serious_A) (mkS (mkCl S.you_NP))))))))) fullStopPunct)
TXT: [it isn't possible that it is serious that there is you .]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.and_Conj (mkListNP (mkNP (P.mkPN "OSHA")) (mkNP (P.mkPN "EPA")))) (have-org-role-91 (mkNP (P.mkPN "Republican"))) (passiveVP L.deregulate_V2))) (mkS (mkCl (mkVP L.replace_VS (mkS (mkCl (mkVP L.regulate_V))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.and_Conj (mkListNP (mkNP (P.mkPN "OSHA")) (mkNP (P.mkPN "EPA")))) (have-org-role-91 (mkNP (P.mkPN "Republican"))) (passiveVP L.deregulate_V2))) (mkS (mkCl (mkVP L.replace_VS (mkS (mkCl (mkVP L.regulate_V))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN L.way_N))))
TXT: [a way .]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN L.thing_N))))
TXT: [a thing .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.and_Conj (mkListNP (mkNP (P.mkPN "OSHA")) (mkNP (P.mkPN "EPA")))) (have-org-role-91 (mkNP (P.mkPN "Republican"))) (passiveVP L.deregulate_V2)))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (mkNP S.and_Conj (mkListNP (mkNP (P.mkPN "OSHA")) (mkNP (P.mkPN "EPA")))) (have-org-role-91 (mkNP (P.mkPN "Republican"))) (passiveVP L.deregulate_V2)))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "OSHA")) (mkNP S.a_Quant (mkCN L.agency_N))))) fullStopPunct)
TXT: [OSHA is an agency .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.become_V2) (E.PurposeVP (mkVP L.deregulate_V2 (mkNP S.a_Quant (mkCN L.agency_N)))))))) fullStopPunct)
TXT: [it is become to deregulate an agency .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP (mkVP L.say_VS (mkS negativePol (mkCl (mkNP S.a_Quant (mkCN L.market_N)) (mkVP L.lie_V)))) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "Mr. Malthus"))))))) fullStopPunct)
TXT: [I say to Mr. Malthus that a market doesn't lie .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP L.see_V2 (mkNP S.a_Quant (mkCN (mkCN (mkCN L.market_N) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.get_V2) (E.PurposeVP (mkVP (mkVP sick-05) (P.mkAdv "more"))))))) (mkRS (mkRCl S.which_RP (mkAP L.very_AdA (mkAP L.sick_A)))))))))) fullStopPunct)
TXT: [constant not found: sick]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.cause_V2) (S.mkAdv S.that_Subj (mkS negativePol (mkCl S.they_NP (mkVP L.lie_V)))))))) fullStopPunct)
TXT: [it is caused that they don't lie .]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl S.i_NP (mkVP (P.mkAdV "just") (mkVP L.check_V2 (mkNP S.a_Quant (E.CompoundCN L.organization_N L.chart_N)))))) (mkS (mkCl (mkVP (mkVP (passiveVP L.rise_V2) (S.mkAdv L.in_Prep (mkNP S.every_Det (mkCN (mkCN L.sector_N) (S.mkAdv L.part_Prep (mkNP S.a_Quant (mkCN L.globe_N))))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (mkCN L.crude_A L.oil_N)) (passiveVP L.produce_V2)))))))))) fullStopPunct)
TXT: [I just check an organization chart and it is risen in every sector of a globe that crude oil is produced .]

SNT: 
AST: (mkText (mkUtt (mkNP (P.mkPN "United States"))))
TXT: [United States .]

SNT: 
AST: (multi-sentence (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.rise_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.produce_V)))))))) fullStopPunct) (mkText (mkUtt (mkNP (ss "other") (mkNP (P.mkPN "OECD"))))))
TXT: [it is risen that it produces .] [other OECD .]

SNT: 
AST: (multi-sentence (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.decline_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.produce_V)))))))) fullStopPunct) (mkText (mkUtt (mkNP (P.mkPN "OECD")))))
TXT: [it is declined that it produces .] [OECD .]

SNT: 
AST: (multi-sentence (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.rise_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.produce_V)))))))) fullStopPunct) (mkText (mkUtt (mkNP (P.mkPN "OECD")))))
TXT: [it is risen that it produces .] [OECD .]

SNT: 
AST: (multi-sentence (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.rise_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.produce_V)))))))) fullStopPunct) (mkText (mkUtt (mkNP S.a_Quant (mkCN L.organization_N)))))
TXT: [it is risen that it produces .] [an organization .]

SNT: 
AST: (multi-sentence (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.rise_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.produce_V)))))))) fullStopPunct) (mkText (mkUtt (mkNP (P.mkPN "U.S.S.R.")))))
TXT: [it is risen that it produces .] [U.S.S.R. .]

SNT: 
AST: (multi-sentence (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.rise_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.produce_V)))))))) fullStopPunct) (mkText (mkUtt (mkNP (ss "other") (mkNP (P.mkPN "OECD"))))))
TXT: [it is risen that it produces .] [other OECD .]

SNT: 
AST: (multi-sentence (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.rise_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.produce_V)))))))) fullStopPunct) (mkText (mkUtt (mkNP (P.mkPN "OECD")))))
TXT: [it is risen that it produces .] [OECD .]

SNT: 
AST: (multi-sentence (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.rise_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.produce_V)))))))) fullStopPunct) (mkText (mkUtt (mkNP S.a_Quant (mkCN (E.CompoundCN L.world_N L.supply_N) (mkRS (mkRCl S.which_RP (passiveVP L.total_V2))))))))
TXT: [it is risen that it produces .] [{s = "a"]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.rise_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.produce_V)))))))) fullStopPunct)
TXT: [it is risen that it produces .]

SNT: 
AST: (o or)
TXT: [constant not found: o]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP (mkVP L.give_V2 (mkNP S.a_Quant (mkCN L.source_N))) (S.mkAdv L.GOL_Prep S.you_NP))))) fullStopPunct)
TXT: [I give a source to you .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP L.say_V2 S.it_NP)))) fullStopPunct)
TXT: [I say it .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkNP S.a_Quant (E.CompoundCN L.product_N L.spreadsheet_N))))) fullStopPunct)
TXT: [it is a product spreadsheet .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.link_N) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.here_N))))) (passiveVP L.hyperlink_V2)))) fullStopPunct)
TXT: [unknown qualified constant L.here_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.they_NP (mkVP (P.mkAdV "always") (mkVP L.manage_VS (mkS (mkCl (mkVP L.keep_VS (mkS (mkCl (mkVP (mkVP L.align_VS (mkS (mkCl (mkVP L.produce_V)))) (E.PurposeVP (mkVP L.hard_VS (mkS (mkCl (mkVP (passiveVP L.tell_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.thing_N)) (passiveVP L.go_on_V2)))))))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.manage_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.pipeline_N)) (mkVP (passiveVP L.blow_up_V2) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Nigeria"))))))) fullStopPunct)
TXT: [a pipeline is blown up in Nigeria .]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN L.capacity_N))))
TXT: [a capacity .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.drop_V2) (S.mkAdv S.because_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.recession_N)))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.demand_V)))))))) fullStopPunct)
TXT: [unknown qualified constant L.demand_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (P.mkAdV "now") (passiveVP L.rise_V2)) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.demand_V)))))))) fullStopPunct)
TXT: [unknown qualified constant L.demand_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (P.mkAdV "currently") (mkVP L.supply_V)) (S.mkAdv L.GOL_Prep S.we_NP))))) fullStopPunct)
TXT: [unknown qualified constant L.supply_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (P.mkAdV "oil") (mkVP L.glut_V))))) fullStopPunct)
TXT: [unknown qualified constant L.glut_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkVP L.see_V2 (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN L.doom_N)) (mkNP S.a_Quant (mkCN L.gloom_N)))))))) fullStopPunct)
TXT: [you see a doom and a gloom .]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN (mkCN L.secret_N) (mkRS (mkRCl S.which_RP (mkVP (mkVP (passiveVP L.include_V2) (S.mkAdv (mkNP S.a_Quant (mkCN L.one_N)))) (S.mkAdv (mkNP S.a_Quant (mkCN L.great_A L.secret_N))))))))))
TXT: [unknown qualified constant L.one_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.person_N)) (mkVP (passiveVP L.worry_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (mkCN L.natural_A (mkCN L.gas_N))) (mkVP (passiveVP L.run_out_V2) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "U.S."))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.run_out_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.we_NP (mkVP L.use_V2 (mkNP S.a_Quant (mkCN L.vital_A L.commodity_N)))))) fullStopPunct)
TXT: [we use a vital commodity .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.fall_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (mkCN L.natural_A (mkCN L.domestic_A L.gas_N))) (passiveVP L.reserve_V2)))))))) fullStopPunct)
TXT: [unknown qualified constant L.fall_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.rate_entity_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (passiveVP L.grow_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.produce_V)))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.rate_entity_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.we_NP (mkVP (mkVP L.pump_out_V) (S.mkAdv L.PPT_Prep (mkNP L.more_Det (mkCN L.thing_N))))))) fullStopPunct)
TXT: [we pump out more things .]

SNT: 
AST: (n nearly)
TXT: [constant not found: n]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkNum (mkDigits "2")) (mkCN L.incredible_A L.technology_N)) (mkVP (P.mkAdV "then") (mkVP L.enter_V2 (mkNP S.a_Quant (mkCN L.industry_N))))))) fullStopPunct)
TXT: [2 incredible technologies then enter an industry .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.we_NP (mkVP L.learn_VS (mkS (mkCl (mkNP (P.mkPN "U.S.")) (passiveVP L.sit_V2))))))) fullStopPunct)
TXT: [we learn that U.S. is sat .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.we_NP (passiveVP L.go_V2)))) fullStopPunct)
TXT: [we are gone .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.go_V)))) fullStopPunct)
TXT: [it goes .]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl S.you_NP (mkVP L.want_V2 (mkNP S.a_Quant (E.CompoundCN L.energy_N L.security_N))))))) questMarkPunct)
TXT: [do you want an energy security ?]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkVP L.want_V2 (mkNP (mkCN L.natural_A (mkCN L.gas_N))))))) fullStopPunct)
TXT: [you want natural gas .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.thin_A (mkCN L.layer_N)) (mkRS (mkRCl S.which_RP (passiveVP L.stack_V2))))) (mkNP S.a_Quant (E.CompoundCN L.shale_N L.rock_N))))) fullStopPunct)
TXT: [a thin layer that is stacked is a shale rock .]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl (mkNP S.a_Quant (mkCN L.shale_N)) (mkVP (P.mkAdV "near") (passiveVP L.conduct_V2))))) fullStopPunct)
TXT: [a shale isn't near conducted .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.contrast_V)))) fullStopPunct)
TXT: [it contrasts .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.we_NP (mkVP L.learn_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.shale_N)) (mkNP S.a_Quant (mkCN (E.CompoundCN L.oil_N L.kitchen_N) (mkRS (mkRCl S.which_RP (mkVP L.source_V2 (mkNP (mkCN L.black_A (mkCN (mkCN L.gold_N) (mkRS (mkRCl S.which_RP (passiveVP L.find_V2))))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.source_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.somePl_Det (mkCN L.good_A (mkCN L.stuff_N))) (mkVP L.migrate_VV (mkVP out-06))))) fullStopPunct)
TXT: [unknown qualified constant L.migrate_VV]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.we_NP (mkVP L.ignore_V2 (mkNP S.a_Quant (mkCN L.shale_N)))))) fullStopPunct)
TXT: [we ignore a shale .]

SNT: 
AST: (u until)
TXT: [constant not found: u]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.process_N))))) fullStopPunct)
TXT: [there is a process .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (mkCN (mkCN L.tiny_A L.grain_N) (mkRS (mkRCl S.which_RP (mkVP L.hold_V2 (mkNP S.a_Quant (E.CompoundCN L.shale_N L.layer_N))))))) (passiveVP L.carry_V2)))) fullStopPunct)
TXT: [tiny grain that holds a shale layer is carried .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.number_N) (monthAdv august_Month))) (mkVP (P.mkAdV "again") (mkVP L.bust_V2 (mkNP S.a_Quant (mkCN (mkCN L.doomer_N) (S.mkAdv L.of_Prep (mkNP (mkCN (mkCN L.oil_N) (mkRS (mkRCl S.which_RP (passiveVP L.peak_V2))))))))))))) exclMarkPunct)
TXT: [unknown qualified constant L.doomer_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.chart_N) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.below_N))))) (mkVP L.show_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.capacity_N)) (mkVP L.outpace_VS (mkS (mkCl (mkVP L.produce_V)))))))))) fullStopPunct)
TXT: [unknown qualified constant L.below_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.we_NP (mkVP (P.mkAdV "also") (mkVP L.have_VS (mkS (mkCl (mkVP (P.mkAdV "oil") (mkVP L.glut_V))))))))) fullStopPunct)
TXT: [unknown qualified constant L.have_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.drop_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (mkCN L.oil_N)) (passiveVP L.price_V2)))))))) fullStopPunct)
TXT: [it is dropped that oil is priced .]

SNT: 
AST: (mkText (mkUtt (mkNP (mkCN (mkCN L.oil_N) (mkRS (mkRCl S.which_RP (passiveVP L.peak_V2)))))))
TXT: [oil that is peaked .]

SNT: 
AST: (multi-sentence (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.capacity_N)) (mkVP (passiveVP L.increase_V2) (E.PurposeVP (mkVP rate_entity-91)))))) fullStopPunct) (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.capacity_N)) (mkVP (mkVP (passiveVP L.measure_V2) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.here_N)))) (S.mkAdv L.VSP_Prep (mkNP S.a_Quant (mkCN L.sum_N))))))) fullStopPunct))
TXT: [constant not found: rate_entity] [unknown qualified constant L.here_N]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl S.you_NP (mkVP L.try_VS (mkS (mkCl (mkVP L.compensate_V2 (mkNP S.a_Quant (mkCN (mkCN L.tiny_A L.thing_N) (mkRS (mkRCl S.which_RP argue-01)))))))))))) questMarkPunct)
TXT: [unknown qualified constant L.try_VS]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl (mkVP (passiveVP L.suggest_V2) (S.mkAdv S.that_Subj (mkS (mkCl S.you_NP (mkVP (mkVP L.provide_V2 (mkNP S.a_Quant (mkCN L.actual_A (mkCN L.link_N)))) (E.PurposeVP (mkVP L.possible_VS (mkS (mkCl (mkVP (mkVP (passiveVP L.hold_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkAP L.accountable_A))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN (L.round_N (S.mkAdv L.about_Prep (mkNP S.a_Quant (mkCN L.drivel_N))))))))))))))))))))))) questMarkPunct)
TXT: [unknown qualified constant L.possible_VS]

SNT: 
AST: (o or)
TXT: [constant not found: o]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl (mkNP S.a_Quant (mkCN L.capacity_N)) (mkVP (mkVP (P.mkAdV "meantime") (passiveVP L.mean_V2)) (S.mkAdv L.PPT_Prep (mkNP S.a_Quant (mkCN L.squat_N))))))) fullStopPunct)
TXT: [a capacity isn't meantime meant a squat .]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl S.you_NP (mkVP (P.mkAdV "even") (mkVP L.know_V2 (mkNP S.a_Quant (mkCN L.thing_N)))))))) questMarkPunct)
TXT: [do you even know a thing ?]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN L.probable_N))))
TXT: [a probable .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkVP (P.mkAdV "more") (mkVP L.refer_V2 (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN (mkCN L.infrastructure_N) (mkRS (mkRCl S.which_RP (passiveVP L.exist_V2))))) (mkNP S.a_Quant (mkCN (E.CompoundCN L.reserve_N L.capacity_N) (mkRS (mkRCl S.which_RP (passiveVP L.know_V2)))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.exist_V2]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN L.reserve_N))))
TXT: [a reserve .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (mkCN L.new_A (mkCN L.oil_N))) (passiveVP L.discover_V2)))) fullStopPunct)
TXT: [new oil is discovered .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP (mkVP (P.mkAdV "still") (passiveVP L.wait_V2)) (E.PurposeVP (mkVP (L.provide_V2 S.you_NP) (mkNP S.that_Det (mkCN L.data_N)))))))) fullStopPunct)
TXT: [A function type is expected for provide_V2 instead of type V2]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl S.you_NP (mkVP (mkVP L.provide_V2 (mkNP S.that_Det (mkCN L.data_N))) (S.mkAdv S.because_Subj (mkS (mkCl S.it_NP (mkAP L.possible_A)))))))) fullStopPunct)
TXT: [you don't provide that data because it is possible .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Joint Chiefs")) (mkVP (mkVP (mkVP (P.mkAdV "meanwhile") (mkVP L.assess_V2 (mkNP S.a_Quant (mkCN (mkCN L.capacity_N) (mkRS (mkRCl S.which_RP (passiveVP L.long_V2))))))) (S.mkAdv L.PRD_Prep (mkNP S.a_Quant (mkCN (mkCN L.and_N) (mkRS (mkRCl S.which_RP say-01)))))) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.here_N))))))) fullStopPunct)
TXT: [unknown qualified constant L.long_V2]

SNT: 
AST: (a3 and)
TXT: [constant not found: a3]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.hyperlink_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.military_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "US"))))) (mkVP (mkVP L.warn_VS (mkS (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl (mkNP S.a_Quant (E.CompoundCN L.oil_N L.output_N)) (passiveVP L.dip_V2))))))) (S.mkAdv L.part_Prep (mkNP S.a_Quant (mkCN L.business_N))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.hyperlink_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP (mkVP L.say_VS (mkS (mkCl (mkVP (passiveVP L.have_condition_V2) (S.mkAdv S.that_Subj (mkS negativePol (mkCl (mkVP L.know_V2 (mkNP S.a_Quant (mkCN L.thing_N)))))))))) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN (E.CompoundCN L.shale_N L.fan_N) (mkRS negativePol (mkRCl S.which_RP (mkVP (P.mkAdV "probable") (mkVP L.read_V2 (mkNP S.a_Quant (mkCN L.thread_N))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.have_condition_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkVP L.do_V)))) exclMarkPunct)
TXT: [unknown qualified constant L.do_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.chart_N)) (mkVP (mkVP L.say_V2 (mkNP S.a_Quant (mkCN L.source_N))) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.bottom_N))))))) fullStopPunct)
TXT: [a chart says a source in a bottom .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP L.source_V) (S.mkAdv L.DIR_Prep (mkNP (P.mkPN "Energy Information Administration"))))))) fullStopPunct)
TXT: [unknown qualified constant L.source_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Oilwatch Monthly")) (passiveVP L.hyperlink_V2)))) fullStopPunct)
TXT: [unknown qualified constant L.hyperlink_V2]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN (E.CompoundCN L.document_N L.file_N) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.right_A (mkCN L.side_N))))))))
TXT: [a document file in a right side .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (P.mkAdV "just") (mkVP L.resemble_V))))) fullStopPunct)
TXT: [unknown qualified constant L.resemble_V]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl S.you_NP (mkVP (P.mkAdV "now") (mkVP L.look_V2 (mkNP S.a_Quant (mkCN (mkCN (L.chart_N (S.mkOrd (mkDigits "2")))) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.left_N))))))))) (mkS (mkCl (mkVP L.notice_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.liquid_A L.fuel_N)) (mkVP L.account_VS (mkS (mkCl (mkVP (P.mkAdV "total") (mkVP L.increase_V))))))))))))) exclMarkPunct)
TXT: [unknown qualified constant L.account_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.figure_N) (S.mkAdv S.possess_Prep (mkNP (P.mkPN "International Energy Agency"))))) (mkVP L.say_VS (mkS (mkCl (mkVP (mkVP (passiveVP L.increase_V2) (E.PurposeVP (mkVP rate_entity-91))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.liquid_A L.fuel_N)) (mkVP (P.mkAdV "world") (passiveVP L.produce_V2)))))))))))) fullStopPunct)
TXT: [constant not found: rate_entity]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.result_VV (mkVP (mkVP L.produce_V2 (mkNP S.a_Quant (mkCN L.liquid_A L.fuel_N))) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.total_A L.world_N)))))))) fullStopPunct)
TXT: [unknown qualified constant L.result_VV]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN (mkCN L.thing_N) (mkRS (mkRCl S.which_RP (passiveVP L.define_V2)))))))
TXT: [a thing that is defined .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (mkCN (mkCN L.crude_A L.oil_N) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.mean_V2) (S.mkAdv L.PPT_Prep (mkNP (mkCN L.petroleum_N)))))))) (passiveVP L.find_V2)))) fullStopPunct)
TXT: [crude oil that is meant petroleum is found .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (E.CompoundCN L.lease_N L.condensate_N)) (mkListNP (mkNP S.a_Quant (mkCN (mkCN L.liquid_N) (S.mkAdv L.of_Prep (mkNP (mkCN L.natural_A (mkCN L.gas_N)))))) (mkListNP (mkNP S.a_Quant (E.CompoundCN L.oil_N L.sand_N)) (mkListNP (mkNP S.a_Quant (E.CompoundCN L.oil_N L.shale_N)) (mkListNP (mkNP (mkCN L.extra_A (mkCN L.heavy_A L.oil_N))) (mkListNP (mkNP (mkCN L.conventional_A L.oil_N)) (mkNP (mkCN L.heavy_A L.oil_N))))))))) (passiveVP L.include_V2)))) fullStopPunct)
TXT: [a lease condensate , a liquid of natural gas , an oil sand , an oil shale , extra heavy oil , conventional oil and heavy oil are included .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkS S.or_Conj (mkListS (mkS (mkCl (mkVP (passiveVP L.flatline_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.light_A (mkCN L.crude_N))) (passiveVP L.produce_V2))))))) (mkS (mkCl (passiveVP L.drop_V2))))) (mkVP (passiveVP L.continue_V2) (S.mkAdv S.when_Subj (mkS (mkCl (mkVP (mkVP (mkVP (passiveVP L.make_up_V2) (E.PurposeVP (mkVP L.meet_VS (mkS (mkCl (mkVP L.demand_V)))))) (S.mkAdv L.VSP_Prep (mkNP (mkCN (mkCN (mkCN L.heavy_A L.oil_N) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.efficient_V2) (P.mkAdv "less"))))) (mkRS (mkRCl S.which_RP (mkAP L.more_AdA (mkAP L.dirty_A)))))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.differ_V)))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.flatline_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkAP (mkAP L.funny_A) (mkS S.and_Conj (mkListS (mkS (mkCl S.you_NP (mkVP L.think_VS (mkS (mkCl (mkVP L.find_V2 S.something_NP)))))) (mkS (mkCl (mkVP (mkVP (P.mkAdV "again") (mkVP L.pat_V)) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.back_N)))))))))))) fullStopPunct)
TXT: [it is funny that you think that it finds something and it again pats in a back .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkAP (L.horrible_A (S.mkAdv L.about_Prep S.this_NP)))))) fullStopPunct)
TXT: [A function type is expected for horrible_A instead of type A]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.okay_V)))) fullStopPunct)
TXT: [unknown qualified constant L.okay_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Drudge")) (mkVP L.say_VS (mkS (mkCl (mkNP S.a_Quant (mkNum (mkDigits "87")) (mkCN L.dollar_N)) (passiveVP L.rate_entity_V2))))))) fullStopPunct)
TXT: [unknown qualified constant L.rate_entity_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP (P.mkAdV "still") (mkVP L.recall_VS (mkS (mkCl (mkVP L.read_VS (mkS (mkCl (mkVP (passiveVP L.price_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (E.CompoundCN L.oil_N L.shale_N)) (passiveVP L.extract_V2))))))))))))))) fullStopPunct)
TXT: [I still recall that it reads that it is priced that an oil shale is extracted .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.we_NP (mkVP (mkVP (P.mkAdV "now") (mkVP L.have_V2 (mkNP (mkCN (mkCN L.oil_N) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.lock_up_V2) (S.mkAdv L.in_Prep (mkNP S.a_Quant (E.CompoundCN L.oil_N L.shale_N)))))))))) (S.mkAdv L.in_Prep (mkNP (P.mkPN "USA"))))))) fullStopPunct)
TXT: [we now have oil that is locked up in an oil shale in USA .]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl S.we_NP (mkVP L.open_up_V2 (mkNP S.few_Det (E.CompoundCN L.token_N L.area_N))))) (mkS (mkCl (mkNP S.a_Quant (mkCN L.everyone_N)) (mkVP (mkVP (passiveVP L.suppose_V2) (S.mkAdv S.because_Subj (mkS (mkCl (mkVP L.head_VS (mkS negativePol (mkCl (mkVP (P.mkAdV "energy") (mkVP L.depend_V2 (mkNP (P.mkPN "OPEC"))))))))))) (E.PurposeVP (mkVP L.wet_V2 (mkNP S.a_Quant (mkCN L.collective_A L.pants_N)))))))))) fullStopPunct)
TXT: [unknown qualified constant L.everyone_N]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN L.oh_N))))
TXT: [unknown qualified constant L.oh_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkVP (mkVP L.give_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.break_N))))) (S.mkAdv L.GOL_Prep S.i_NP))))) exclMarkPunct)
TXT: [unknown qualified constant L.give_VS]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl (mkNP S.a_Quant (mkCN L.sheep_N)) (mkVP L.buy_into_V2 S.this_NP))))) questMarkPunct)
TXT: [does a sheep buy into this ?]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP L.exceed_VS (mkS (mkCl (mkNP (P.mkPN "Middle East")) (mkVP (P.mkAdV "total") (mkVP L.reserve_V2 (mkNP (mkCN L.oil_N))))))) (P.mkAdv "far"))))) fullStopPunct)
TXT: [unknown qualified constant L.exceed_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.and_Conj (mkListNP S.you_NP S.i_NP)) (mkVP L.know_VS (mkS negativePol (mkCl (mkVP (passiveVP L.stop_V2) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.there_N)))))))))) fullStopPunct)
TXT: [unknown qualified constant L.there_N]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl (mkNP S.this_Det (mkCN (mkCN L.organization_N) (mkRS (mkRCl S.which_RP (mkVP L.administrate_V))))) (mkVP (P.mkAdV "gusto") (mkVP (mkVP L.greenlight_V2 (mkNP S.this_Det (mkCN L.potential_A L.area_N))) (S.mkAdv S.because_Subj (a3 amr-unknown))))))) exclMarkPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS negativePol (mkCl (mkNP S.this_Det (mkCN (mkCN L.organization_N) (mkRS (mkRCl S.which_RP (mkVP L.administrate_V))))) (mkVP (P.mkAdV "gusto") (mkVP (mkVP L.greenlight_V2 (mkNP S.this_Det (mkCN L.potential_A L.area_N))) (S.mkAdv S.because_Subj (a3 amr-unknown))))))) exclMarkPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP L.joke_V) (S.mkAdv L.COM_Prep (mkNP S.a_Quant (mkCN L.ethanol_N))))))) fullStopPunct)
TXT: [it jokes of an ethanol .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.we_NP (mkVP (passiveVP L.obligate_V2) (E.PurposeVP (mkVP (mkVP use-01) (S.mkAdv L.PRP_Prep (mkNP S.a_Quant (mkCN L.nation_N))))))))) fullStopPunct)
TXT: [constant not found: use]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl S.we_NP (mkVP (mkVP L.have_V2 (mkNP S.a_Quant (E.CompoundCN L.cane_N L.climate_N))) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN (mkCN L.here_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "U.S.")))))))))) fullStopPunct)
TXT: [unknown qualified constant L.here_N]

SNT: 
AST: (a and)
TXT: [constant not found: a]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkAP (mkAP L.wrong_A) (mkS (mkCl S.nothing_NP)))))) fullStopPunct)
TXT: [it is wrong that there is nothing .]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl (mkVP L.contrast_VV (mkVP possible-01))))) fullStopPunct)
TXT: [unknown qualified constant L.contrast_VV]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN (mkCN L.and_N) (mkRS (mkRCl S.which_RP S.i_NP L.opine_V2))))))
TXT: [unknown qualified constant L.and_N]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl (mkVP (P.mkAdV "nucleus") (mkVP (mkVP L.plant_V) (S.mkAdv S.because_Subj (a amr-unknown))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS negativePol (mkCl (mkVP (P.mkAdV "nucleus") (mkVP (mkVP L.plant_V) (S.mkAdv S.because_Subj (a amr-unknown))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkAP L.more_AdA (mkAP (mkAP L.clean_A) (mkS (mkCl S.they_NP))))))) fullStopPunct)
TXT: [it is more clean that there are them .]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN (mkCN L.and_N) (mkRS (mkRCl S.which_RP (mkVP L.interest_V)))))))
TXT: [unknown qualified constant L.and_N]

SNT: 
AST: (e et-cetera)
TXT: [command not parsed: cc -one (e et-cetera)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Wattenberg")) (mkVP (P.mkAdV "emphatic") (mkVP (mkVP L.say_VS (mkS S.and_Conj (mkListS (mkS (mkCl (mkS (mkCl (mkNP S.a_Quant (mkCN L.clean_A (mkCN (mkCN L.even_A L.plant_N) (mkRS (mkRCl S.which_RP (mkVP L.power_VV (mkVP L.burn_V2 (mkNP (mkCN L.coal_N))))))))) (mkVP L.emit_V2 (mkNP S.a_Quant (mkCN L.amount_N))))) (mkAP L.so_AdA (mkAP L.immense_A)))) (mkS (mkCl (mkVP (mkVP L.endanger_V2 (mkNP (mkCN L.health_N))) (P.mkAdv "so"))))))) (S.mkAdv L.over_Prep (mkNP L.year_N))))))) fullStopPunct)
TXT: [unknown qualified constant L.power_VV]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP (P.mkPN "Wattenberg")) (mkVP (mkVP L.advocate_V2 (mkNP S.a_Quant (mkCN (mkCN L.plant_N) (mkRS (mkRCl S.which_RP (mkVP (mkVP L.power_V) (S.mkAdv L.PPT_Prep (mkNP S.a_Quant (mkCN L.nucleus_N))))))))) (S.mkAdv (P.mkPrep "multiple") (mkNP S.a_Quant (mkNum (mkDigits "1")) (mkCN L.year_N)))))) (mkS (mkCl (mkVP L.try_VS (mkS (mkCl (mkVP L.fight_V2 (mkNP S.a_Quant (mkCN (mkCN (mkCN L.and_N) (S.mkAdv L.about_Prep (mkNP S.a_Quant (mkCN L.horror_N)))) (mkRS (mkRCl S.which_RP (mkNP S.a_Quant (mkCN L.left_A (mkCN L.green_A (mkCN L.wingnut_N)))) L.pour_V2))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.power_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "France")) (mkVP L.head_VS (mkS negativePol (mkCl (mkVP L.depend_V2 (mkNP (P.mkPN "OPEC"))))))))) fullStopPunct)
TXT: [unknown qualified constant L.head_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (mkCN (mkCN L.electric_A L.power_N) (S.mkAdv S.possess_Prep (mkNP (P.mkPN "France"))))) (mkVP (passiveVP L.come_V2) (S.mkAdv L.MNR_Prep (mkNP S.a_Quant (mkCN (mkCN L.plant_N) (mkRS (mkRCl S.which_RP (mkVP (mkVP L.power_V) (S.mkAdv L.PPT_Prep (mkNP S.a_Quant (mkCN L.nucleus_N))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.come_V2]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP (P.mkPN "France")) (mkVP L.produce_V2 (mkNP S.a_Quant (mkCN L.excess_N))))) (mkS (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl (mkVP (mkVP L.sell_off_V) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN (mkCN L.grid_N) (S.mkAdv S.possess_Prep (mkNP S.aPl_Det (mkCN L.other_A L.country_N))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.sell_off_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP (P.mkAdV "also") (mkVP (mkVP L.understand_VS (mkS (mkCl (mkNP (P.mkPN "France")) (mkVP L.stockpile_V2 (mkNP (mkCN L.hydrogen_N)))))) (S.mkAdv S.because_Subj (mkS (mkCl (mkNP (mkCN L.excess_A L.electricity_N)) (mkVP L.allow_VS (mkS (mkCl (mkVP L.split_V2 (mkNP S.a_Quant (E.CompoundCN L.hydrogen_N L.gas_N)))))))))))))) fullStopPunct)
TXT: [I also understand because excess electricity allows that it splits a hydrogen gas that France stockpiles hydrogen .]

SNT: 
AST: (mkText (mkUtt (mkNP S.or_Conj (mkListNP S.we_NP (mkNP (P.mkPN "U.S."))))))
TXT: [we or U.S. .]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP (P.mkPN "Harry Reid")) (have-org-role-91 (P.mkN2 L.president_N L.of_Prep)) (passiveVP L.give_in_V2))) (mkS (mkCl (mkVP L.close_V2 (mkNP (P.mkPN "Yucca Mountain")))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP (P.mkPN "Harry Reid")) (have-org-role-91 (P.mkN2 L.president_N L.of_Prep)) (passiveVP L.give_in_V2))) (mkS (mkCl (mkVP L.close_V2 (mkNP (P.mkPN "Yucca Mountain")))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.this_NP (mkNP S.a_Quant (mkCN (mkCN (mkCN L.major_A (mkCN L.project_N)) (mkRS (mkRCl S.which_RP (passiveVP L.cost_V2)))) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.design_V2) (E.PurposeVP (mkVP L.store_V2 (mkNP S.a_Quant (mkCN (mkCN (E.CompoundCN L.nucleus_N L.fuel_N) (S.mkAdv S.possess_Prep (mkNP S.we_Pron (mkCN L.nation_N)))) (mkRS (mkRCl S.which_RP (passiveVP L.spend_V2))))))))))))))) fullStopPunct)
TXT: [this is a major project that is costed that is designed to store a nucleus fuel of our nation that is spent .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Yucca Mountain")) (mkVP (P.mkAdV "geology") (passiveVP L.study_V2))))) fullStopPunct)
TXT: [Yucca Mountain is geology studied .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.fuel_N) (mkRS (mkRCl S.which_RP (passiveVP L.spend_V2))))) (passiveVP L.containerize_V2))) (mkAP L.beyond_AdA (mkAP (L.adequate_A (S.mkAdv S.because_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.container_N)) (mkVP (mkVP L.exceed_V) (P.mkAdv "far"))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.containerize_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.contrast_V)))) fullStopPunct)
TXT: [it contrasts .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP L.hold_VS (mkS negativePol (mkCl (mkNP (P.mkPN "U.S.")) (mkVP (P.mkAdV "energy") (mkVP L.depend_V))))) (S.mkAdv L.PRD_Prep (mkNP S.a_Quant (mkCN L.hostage_N))))))) fullStopPunct)
TXT: [it holds a hostage that U.S. doesn't energy depend .]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP (passiveVP L.destroy_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.industrialize_V))))))) (mkS (mkCl (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN L.agrarian_A L.mentality_N)) (mkNP S.a_Quant (mkCN L.culture_N)))) (passiveVP L.adopt_V2)))))) fullStopPunct)
TXT: [unknown qualified constant L.industrialize_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkNP S.a_Quant (mkCN L.idealist_N))))) fullStopPunct)
TXT: [I am an idealist .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.contrast_V)))) fullStopPunct)
TXT: [it contrasts .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.we_NP (mkVP L.have_V2 (mkNP S.a_Quant (mkCN (mkCN (mkCN L.slash_N) (S.mkAdv L.in_Prep (mkNP (mkCN L.power_N)))) (mkRS (mkRCl S.which_RP (mkVP L.have_V2 (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN (mkCN L.logical_A L.mentality_N) (mkRS (mkRCl S.which_RP (passiveVP L.skew_V2))))) (mkNP S.a_Quant (mkCN (mkCN L.outlook_N) (S.mkAdv L.about_Prep (mkNP S.a_Quant (mkCN (mkCN L.future_N) (S.mkAdv S.possess_Prep (mkNP S.this_Det (mkCN L.country_N))))))))))))))))))) fullStopPunct)
TXT: [we have a slash in power that has a logical mentality that is skewed and an outlook about a future of this country .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.contrast_V2) (S.mkAdv S.that_Subj (mkS (mkCl (S.nothing_NP (mkRS (mkRCl S.which_RP S.they_NP L.propose_V2))) (mkVP L.encourage_V2 (mkNP S.a_Quant (mkCN L.entrepreneurialism_N)))))))))) fullStopPunct)
TXT: [unknown qualified constant L.entrepreneurialism_N]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl (mkNP S.this_Det (mkCN (mkCN L.organization_N) (mkRS (mkRCl S.which_RP (mkVP L.administrate_V))))) (mkVP L.speak_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.entrepreneurialism_N)) (mkNP S.a_Quant (E.CompoundCN L.swear_N L.word_N)))))))) fullStopPunct)
TXT: [unknown qualified constant L.administrate_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.have_condition_VV (mkVP (mkVP L.fit_V2 S.it_NP) (S.mkAdv L.GOL_Prep (mkNP S.they_Pron (mkCN L.logical_A L.paradigm_N)))))))) fullStopPunct)
TXT: [unknown qualified constant L.have_condition_VV]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP (mkVP L.live_V) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Silicon Valley"))))))) fullStopPunct)
TXT: [I live in Silicon Valley .]

SNT: 
AST: (a amr-unknown)
TXT: [command not parsed: cc -one (a amr-unknown)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkNP S.a_Quant (mkCN L.empty_A (mkCN (mkCN L.lot_N) (E.PurposeVP (mkVP L.park_V)))))))) fullStopPunct)
TXT: [it is an empty lot to park .]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN (mkCN L.banner_N) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.everywhere_N)))))))
TXT: [unknown qualified constant L.everywhere_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (mkVP (P.mkAdV "now") (passiveVP L.go_V2)) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "India")))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (P.mkAdV "technology") (mkVP L.support_V))))))))) fullStopPunct)
TXT: [unknown qualified constant L.support_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.we_NP (mkVP (mkVP (mkVP L.have_VS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN (mkCN (E.CompoundCN L.nation_N L.person_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "India")))) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.educate_V2) (P.mkAdv "high"))))) (mkRS (mkRCl S.which_RP (mkVP (P.mkAdV "computer") (mkVP L.engineer_V)))))) (mkVP (P.mkAdV "incredibly") (passiveVP L.flux_V2))))) (S.mkAdv (P.mkPrep "multiple") (mkNP S.a_Quant (mkNum (mkDigits "1")) (mkCN L.year_N)))) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN (mkCN L.here_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Silicon Valley")))))))))) fullStopPunct)
TXT: [unknown qualified constant L.have_VS]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.a_Quant (mkCN L.many_N)) (mkVP L.gain_V2 (mkNP S.a_Quant (mkCN L.legal_A (mkCN L.citizenship_N)))))) (mkS (mkCl (mkVP L.continue_VS (mkS (mkCl (mkVP (mkVP L.contribute_V2 (mkNP S.a_Quant (mkCN L.ethics_N))) (S.mkAdv L.GOL_Prep (mkNP S.we_Pron (mkCN L.economy_N)))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.many_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.contrast_V)))) fullStopPunct)
TXT: [it contrasts .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP L.research_V))) (mkS (mkCl (mkVP L.develop_V))))) (mkVP (mkVP (P.mkAdV "now") (passiveVP L.job_out_V2)) (S.mkAdv (mkNP S.and_Conj (mkListNP (mkNP (ss "away") (mkNP (P.mkPN "India"))) (mkNP S.aPl_Det (mkCN (mkCN L.other_A L.part_N) (S.mkAdv L.part_Prep (mkNP S.a_Quant (mkCN L.world_N)))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.job_out_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.go_V2) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN (mkCN L.far_A L.reach_N) (S.mkAdv S.possess_Prep (mkNP S.a_Quant (mkCN L.world_N))))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (mkCN L.hardware_N)) (passiveVP L.manufacture_V2)))))))) fullStopPunct)
TXT: [it is gone to a far reach of a world that hardware is manufactured .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkAP (mkAP L.okay_A) (mkS (mkCl S.that_NP)))))) fullStopPunct)
TXT: [it is okay that there is that .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.contrast_V)))) fullStopPunct)
TXT: [it contrasts .]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP L.research_V))) (mkS (mkCl (mkVP L.develop_V)))))) fullStopPunct)
TXT: [it researches and it develops .]

SNT: 
AST: (mkText (mkUtt (mkNP (S.and_Conj (S.mkAdv S.possess_Prep (mkNP S.a_Quant (mkCN L.entrepreneurialism_N)))) (mkListNP (mkNP (mkCN L.bread_N)) (mkNP (mkCN L.butter_N))))))
TXT: [unknown qualified constant L.entrepreneurialism_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.we_NP (mkNP S.a_Quant (mkCN (mkCN L.country_N) (mkRS (mkRCl S.which_RP (mkVP L.innovate_V)))))))) fullStopPunct)
TXT: [we are a country that innovates .]

SNT: 
AST: (a amr-unknown)
TXT: [command not parsed: cc -one (a amr-unknown)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.we_NP (mkVP L.make_V2 (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN L.game_A L.windmill_N)) (mkNP S.a_Quant (E.CompoundCN L.residence_N L.solar_A L.panel_N)))))))) exclMarkPunct)
TXT: [missing record fields: s, g type of solar_A]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN L.big_A L.whoopee_N))))
TXT: [unknown qualified constant L.whoopee_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl (mkNP (ss "only") (mkNP (P.mkPN "Sean Penn"))) (mkVP L.afford_V2 (mkNP (P.mkPN "Tesla Motors"))))))))) fullStopPunct)
TXT: [it is possible that only Sean Penn affords Tesla Motors .]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN L.oh_N))))
TXT: [unknown qualified constant L.oh_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl S.i_NP (mkVP L.go_on_V))))))) fullStopPunct)
TXT: [it is possible that I go on .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.organization_N) (mkRS (mkRCl S.which_RP (mkVP L.administrate_V))))) (mkVP (mkVP (passiveVP L.obligate_V2) (S.mkAdv S.because_Subj (a2 amr-unknown))) (E.PurposeVP (mkVP L.greenlight_V2 S.it_NP)))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.organization_N) (mkRS (mkRCl S.which_RP (mkVP L.administrate_V))))) (mkVP (mkVP (passiveVP L.obligate_V2) (S.mkAdv S.because_Subj (a2 amr-unknown))) (E.PurposeVP (mkVP L.greenlight_V2 S.it_NP)))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (E.CompoundCN L.ecology_N L.issue_N))))) fullStopPunct)
TXT: [there is an ecology issue .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkS S.or_Conj (mkListS (mkS (mkCl (mkVP (passiveVP L.flatline_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.light_A (mkCN L.crude_N))) (passiveVP L.produce_V2))))))) (mkS (mkCl (passiveVP L.drop_V2))))) (passiveVP L.continue_V2)))) fullStopPunct)
TXT: [unknown qualified constant L.flatline_V2]

SNT: 
AST: (a and)
TXT: [constant not found: a]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN L.well_N))))
TXT: [a well .]

SNT: 
AST: (mkText (mkUtt (mkNP (mkCN L.true_A (mkCN L.oil_N)))))
TXT: [true oil .]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl S.it_NP (mkAP (mkAP L.true_A) (mkS (mkCl (mkNP S.aPl_Det (mkCN L.other_A L.stuff_N)))))))) fullStopPunct)
TXT: [it isn't true that there are other stuffs .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.come_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.true_A (mkCN L.scotsman_N))) (passiveVP L.argue_V2)))))))) fullStopPunct)
TXT: [unknown qualified constant L.come_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (mkCN L.true_A (mkCN L.oil_N))) (mkVP (mkVP (P.mkAdV "only") (passiveVP L.come_V2)) (S.mkAdv L.DIR_Prep (mkNP S.a_Quant (mkCN (mkCN L.can_N) (mkRS (mkRCl S.which_RP (passiveVP L.size_V2)))))))))) fullStopPunct)
TXT: [unknown qualified constant L.come_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.black_A (mkCN (mkCN L.stuff_N) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN (mkCN L.land_N) (mkRS (mkRCl S.which_RP (passiveVP L.green_V2))))))))) (passiveVP L.hyperlink_V2)))) fullStopPunct)
TXT: [unknown qualified constant L.green_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.find_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (mkCN L.oil_N)) (mkVP L.evidence_V)))))))) fullStopPunct)
TXT: [unknown qualified constant L.evidence_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "United States Geological Survey")) (mkVP L.suggest_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.seabed_N)) (mkVP L.hold_V))))))) fullStopPunct)
TXT: [United States Geological Survey suggests that a seabed holds .]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl S.we_NP (mkVP (P.mkAdV "now") (mkVP L.see_VS (mkS (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.organization_N) (mkRS (mkRCl S.which_RP (mkVP L.administrate_V))))) (mkVP (mkVP L.do_V2 (mkNP S.a_Quant (mkCN L.thing_N))) (E.PurposeVP (mkVP L.keep_VV (mkVP (mkVP L.obtain_V2 (mkNP S.a_Quant (mkCN (mkCN L.workable_A L.tract_N) (S.mkAdv L.part_Prep (mkNP S.a_Quant (mkCN (mkCN L.land_N) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.undersea_N))))))))) (E.PurposeVP (mkVP (mkVP L.drill_V) (S.mkAdv L.PRP_Prep (mkNP (mkCN L.oil_N)))))) (mkNP S.a_Quant (mkCN (mkCN L.company_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "United States"))))))))))))))))))) questMarkPunct)
TXT: [unknown qualified constant L.administrate_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkVP L.know_VS (mkS (mkCl S.they_NP (mkVP (P.mkAdV "darndest") (mkVP L.try_VS (mkS (mkCl (mkVP (mkVP L.drive_V2 S.we_NP) (S.mkAdv L.PRD_Prep (mkNP (mkCN L.stone_A L.age_N)))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.try_VS]

SNT: 
AST: (t tongue-in-cheek)
TXT: [command not parsed: cc -one (t tongue-in-cheek)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.that_NP (mkVP (passiveVP L.come_V2) (S.mkAdv L.DIR_Prep (mkNP S.a_Quant (mkCN L.green_A (mkCN L.playbook_N)))))))) fullStopPunct)
TXT: [unknown qualified constant L.come_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.bar_V2) (S.mkAdv S.that_Subj (mkS negativePol (mkCl (mkVP L.hold_V)))))))) fullStopPunct)
TXT: [it is barred that it doesn't hold .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.everything_N)) (passiveVP L.wager_V2)))) fullStopPunct)
TXT: [unknown qualified constant L.everything_N]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.a_Quant (mkCN L.progressive_A (mkCN L.old_A L.agenda_N))) (passiveVP L.push_V2))) (mkS (mkCl (mkVP (P.mkAdV "then") (mkVP (mkVP L.retire_V) (yearAdv (intYear (ss "2012")))))))))) fullStopPunct)
TXT: [a progressive old agenda is pushed and it then retires in 2012 .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.hyperlink_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (P.mkPN "Greenpeace")) (mkVP L.claim_VS (mkS (mkCl (mkVP L.shut_down_V2 (mkNP S.a_Quant (mkCN (E.CompoundCN L.oil_N L.well_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Greenland")))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.hyperlink_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (E.CompoundCN L.environment_N L.group_N)) (mkVP L.say_VS (mkS (mkCl (mkNP S.a_Quant (mkNum (mkDigits "4")) (mkCN L.expert_A (mkCN L.person_N))) (mkVP (mkVP L.evade_V2 (mkNP S.a_Quant (mkCN (mkCN L.navy_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "Denmark")))))) (E.PurposeVP (mkVP L.climb_V2 (mkNP S.a_Quant (mkCN (mkCN L.inside_N) (S.mkAdv L.part_Prep (mkNP S.a_Quant (mkCN (E.CompoundCN L.oil_N L.rig_N) (S.mkAdv S.possess_Prep (mkNP (P.mkPN "Cairn Energy"))))))))))))))))) fullStopPunct)
TXT: [an environment group says that 4 expert persons evade a navy from Denmark to climb an inside of an oil rig of Cairn Energy .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Greenpeace")) (mkVP L.say_VS (mkS (mkCl (mkNP S.a_Quant (mkNum (mkDigits "4")) (mkCN (mkCN (mkCN L.person_N) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN (mkCN L.tent_N) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.suspend_V2) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN L.rope_N)))))))))) (mkRS (mkRCl S.which_RP (mkVP L.campaign_V))))) (mkVP (mkVP (P.mkAdV "now") (passiveVP L.hang_V2)) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN L.rig_N)))))))))) fullStopPunct)
TXT: [{s = "Greenpeace"]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Yoda")) (mkVP L.say_V)))) fullStopPunct)
TXT: [Yoda says .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.they_NP (mkNP S.a_Quant (mkCN L.idiot_N))))) fullStopPunct)
TXT: [they are an idiot .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (mkCN L.history_N)) (mkVP (mkVP L.show_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.debt_N)) (have-org-role-91 (P.mkN2 L.president_N L.of_Prep)) (mkVP (passiveVP L.increase_V2) (P.mkAdv "exponential"))))) (S.mkAdv L.GOL_Prep S.we_NP))))) exclMarkPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (mkNP (mkCN L.history_N)) (mkVP (mkVP L.show_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.debt_N)) (have-org-role-91 (P.mkN2 L.president_N L.of_Prep)) (mkVP (passiveVP L.increase_V2) (P.mkAdv "exponential"))))) (S.mkAdv L.GOL_Prep S.we_NP))))) exclMarkPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.cause_V)))) fullStopPunct)
TXT: [unknown qualified constant L.cause_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP L.cause_V) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.debt_N)) (mkVP (passiveVP L.need_V2) (E.PurposeVP (mkVP L.boost_V2 (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN L.gross_A (mkCN L.domestic_A L.product_N))) (mkNP (P.mkPN "Wall Street")))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.cause_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.we_Pron (mkCN L.entire_A L.economy_N)) (mkVP L.depend_VS (mkS (mkCl (mkVP (mkVP L.grow_V) (S.mkAdv L.EXT_Prep (mkNP S.a_Quant (mkCN L.exponential_N)))))))))) fullStopPunct)
TXT: [unknown qualified constant L.depend_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.mean_V2) (E.PurposeVP (mkVP L.stagnate_V2 (mkNP S.a_Quant (mkCN L.economy_N))))) (S.mkAdv S.that_Subj (mkS negativePol (mkCl (passiveVP L.increase_V2)))))))) fullStopPunct)
TXT: [unknown qualified constant L.stagnate_V2]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP L.want_VS (mkS (mkCl (mkVP L.talk_VS (mkS (mkCl S.that_NP (mkNP (mkCN L.truth_N)))))))))) (mkS (S.mkAdv S.because_Subj) (mkS (mkCl (mkVP L.hate_V2 (mkNP (P.mkPN "Ron Paul"))))))))) fullStopPunct)
TXT: [unknown qualified constant L.talk_VS]

SNT: 
AST: NULL
TXT: [constant not found: NULL]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.debt_N)) (passiveVP L.contrast_V2)))) fullStopPunct)
TXT: [a debt is contrasted .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP (P.mkAdV "also") (mkVP L.think_VS (mkS negativePol (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl S.it_NP (passiveVP L.sustain_V2))))))))))) fullStopPunct)
TXT: [I also think that it isn't possible that it is sustained .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP L.opine_VS (mkS (mkCl (mkS (mkCl S.we_NP (mkVP L.have_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.issue_N))))))) (mkAP L.really_AdA (mkAP L.odd_A)))))))) fullStopPunct)
TXT: [unknown qualified constant L.have_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP (P.mkAdV "heck") (mkVP L.remember_VS (mkS (mkCl (mkNP S.somePl_Det (mkCN L.guy_N)) (mkVP (mkVP L.rail_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.issue_N))))) (S.mkAdv S.when_Subj (mkS (mkCl (S.mkAdv L.before_Prep (mkNP S.a_Quant (mkCN L.now_N))) (mkAP L.probable_A)))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.rail_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP L.guess_VS (mkS (mkCl S.it_NP (mkAP L.more_AdA (mkAP (mkAP L.easy_A) (mkS (mkCl (mkVP (mkVP L.stick_V2 (mkNP S.a_Quant (mkCN (mkCN L.collective_A L.head_N) (S.mkAdv L.part_Prep S.we_NP)))) (S.mkAdv L.GOL_Prep (mkNP (mkCN L.sand_N)))))))))))))) fullStopPunct)
TXT: [I guess that it is more easy that it sticks a collective head of us to sand .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "God")) (mkVP L.forbid_VS (mkS (mkCl S.we_NP (mkVP (P.mkAdV "actual") (mkVP L.confront_V2 (mkNP S.a_Quant (mkCN L.difficult_A L.problem_N)))))))))) fullStopPunct)
TXT: [unknown qualified constant L.forbid_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkAP (mkAP L.obvious_A) (mkS (mkCl S.it_NP)))))) fullStopPunct)
TXT: [it is obvious that there is it .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.they_NP (mkVP (P.mkAdV "literal") (mkVP (P.mkAdV "just") (mkVP L.try_VS (mkS (mkCl (mkVP (mkVP L.hold_V2 S.it_NP) (S.mkAdv L.PRD_Prep (mkNP S.a_Quant (mkCN L.together_N)))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.try_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.everything_N)) (mkVP (passiveVP L.obligate_V2) (E.PurposeVP (mkVP (mkVP increase-01) (P.mkAdv "exponential"))))))) fullStopPunct)
TXT: [unknown qualified constant L.everything_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.obligate_V2) (E.PurposeVP (mkVP increase-01))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (P.mkAdV "corporate") (mkVP L.profit_V))))))))) fullStopPunct)
TXT: [constant not found: increase]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.obligate_V2) (E.PurposeVP (mkVP increase-01))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (passiveVP L.profit_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.invest_V)))))))))))) fullStopPunct)
TXT: [constant not found: increase]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP L.consume_V))) (mkS (mkCl (mkVP L.tax_V))))) (mkVP (passiveVP L.obligate_V2) (E.PurposeVP (mkVP increase-01)))))) fullStopPunct)
TXT: [unknown qualified constant L.tax_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.poor_A L.person_N)) (mkVP (mkVP L.suffer_V) (P.mkAdv "most"))))) fullStopPunct)
TXT: [a poor person suffers most .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.they_NP (mkVP (mkVP L.take_VS (mkS (mkCl (mkVP L.sacrifice_V)))) (E.PurposeVP (mkVP L.keep_VS (mkS (mkCl S.it_NP (mkAP (mkAP L.up_A) (mkS (mkCl (mkNP S.a_Quant (mkCN (L.close_A (mkVP L.supply_V2 (mkNP (mkCN L.money_N)))) (mkCN L.person_N)))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.take_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (L.group_N (S.mkOrd (mkDigits "2"))))) (mkVP L.take_VS (mkS (mkCl (mkVP L.hit_V))))))) fullStopPunct)
TXT: [unknown qualified constant L.take_VS]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.they_Pron (mkCN L.power_N)) (mkVP (passiveVP L.suffocate_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.inflate_V))))))) (mkS (mkCl (mkVP L.destroy_VS (mkS (mkCl (mkVP L.save_V))))))))) fullStopPunct)
TXT: [unknown qualified constant L.destroy_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.we_Pron (mkCN L.economy_N)) (mkAP L.product_AdA (mkAP (L.game_A (mkRS (mkRCl S.which_RP (mkAP L.real_A))))))))) fullStopPunct)
TXT: [unknown qualified constant L.product_AdA]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.they_NP (mkVP L.create_V2 (mkNP L.more_Det (mkCN (mkCN L.debt_N) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.feed_V2) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN L.system_N)))))))))))) fullStopPunct)
TXT: [they create more debts that are fed to a system .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.contrast_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.everyone_N)) (mkVP (P.mkAdV "soon") (mkVP L.have_V2 (mkNP (mkCN L.money_N))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.everyone_N]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl (mkNP (P.mkPN "Monopoly")) (mkVP L.consider_VS (mkS (mkCl (mkNP L.all_Det (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.play_V))))) (mkVP L.owe_V2 (mkNP S.a_Quant (mkCN (mkCN L.debt_N) (mkRS (mkRCl S.which_RP create-01))))))))))) fullStopPunct)
TXT: [constant not found: create]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl S.it_NP (mkVP (P.mkAdV "also") (mkVP L.consider_VS (mkS (mkCl S.you_NP (mkVP (mkVP L.owe_V2 (mkNP S.a_Quant (mkNum (mkDigits "220")) (mkCN L.dollar_N))) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN L.bank_N))))))))))) fullStopPunct)
TXT: [it doesn't also consider that you owe 2 Predef.BIND 2 Predef.BIND 0 dollars to a bank .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN L.logic_N)) (mkNP S.a_Quant (mkCN (mkCN L.principal_N) (S.mkAdv L.about_Prep (mkNP (mkCN L.mathematics_N))))))) (passiveVP L.defy_V2)))) fullStopPunct)
TXT: [a logic and a principal about mathematics are defied .]

SNT: 
AST: (q quotient-of)
TXT: [command not parsed: cc -one (q quotient-of)]

SNT: 
AST: (a and)
TXT: [constant not found: a]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.say_V)))) fullStopPunct)
TXT: [it says .]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl S.you_NP (mkVP L.kid_V2 S.i_NP))))) questMarkPunct)
TXT: [do you kid me ?]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkVP L.make_VS (mkS (mkCl (mkVP L.guess_V))))))) exclMarkPunct)
TXT: [you make that it guesses !]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkVP (P.mkAdV "too") (mkVP L.include_VS (mkS (mkCl (mkVP (mkVP L.guess_V) (S.mkAdv L.about_Prep (mkNP (P.mkPN "Romney"))))))))))) exclMarkPunct)
TXT: [unknown qualified constant L.include_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.debt_N)) (mkAP L.more_AdA (mkAP L.most_AdA (mkAP (L.great_A (S.mkAdv S.because_Subj (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP L.lose_V2 (mkNP L.more_Det (mkCN L.revenue_N))))) (mkS (mkCl (mkVP L.reverse_VS (mkS (mkCl (mkVP (passiveVP L.cut_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.defend_V)))))))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.reverse_VS]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl (mkS S.or_Conj (mkListS (mkS (mkCl (mkVP L.keep_VS (mkS (mkCl S.it_NP (mkAP L.same_A)))))) (mkListS (mkS (mkCl (mkNP (P.mkPN "Obama")) (mkVP L.raise_V2 (mkNP S.a_Quant (mkCN L.tax_N))))) (mkS (mkCl (mkVP L.lower_V)))))) (passiveVP L.question_V2))))) questMarkPunct)
TXT: [unknown qualified constant L.keep_VS]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl (mkNP S.a_Quant (mkCN L.anybody_N)) (mkVP L.want_VS (mkS (mkCl (mkVP L.guess_V)))))))) questMarkPunct)
TXT: [unknown qualified constant L.anybody_N]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl S.we_NP (passiveVP L.suppose_V2))))) questMarkPunct)
TXT: [are we supposed ?]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP L.cause_V) (S.mkAdv S.that_Subj (mkS (mkCl S.they_NP (mkVP L.have_V2 (mkNP (mkCN (mkCN L.power_N) (S.mkAdv L.about_Prep (mkNP S.a_Quant (mkCN L.such_A L.thing_N))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.cause_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkS S.and_Conj (mkListS (mkS (mkCl S.it_NP (mkAP (mkAP L.same_A) (mkS (mkCl (mkNP S.a_Quant (mkCN L.some_N))))))) (mkS (mkCl S.it_NP (mkAP L.more_AdA (mkAP (mkAP L.low_A) (mkS (mkCl (mkNP S.a_Quant (mkCN L.some_N)))))))))) (mkVP (passiveVP L.contrast_V2) (E.PurposeVP (mkVP (think-01 S.i_NP))))))) fullStopPunct)
TXT: [unknown qualified constant L.some_N]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl S.i_NP (mkVP L.get_V2 (mkNP S.a_Quant (mkCN L.cookie_N))))))) questMarkPunct)
TXT: [do I get a cookie ?]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkAP L.sure_A)))) fullStopPunct)
TXT: [it is sure .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP L.love_V)))) fullStopPunct)
TXT: [unknown qualified constant L.love_V]

SNT: 
AST: (o or)
TXT: [constant not found: o]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.cry_V)))) exclMarkPunct)
TXT: [it cries !]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.we_NP (mkVP (mkVP L.tell_V) (S.mkAdv L.GOL_Prep S.you_NP))))) fullStopPunct)
TXT: [we tell to you .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.contrast_V2) (E.PurposeVP (mkVP (P.mkAdV "then") (mkVP (mkVP L.leave_V2 (mkNP S.a_Quant (mkCN L.one_N))) (E.PurposeVP (mkVP L.complain_V)))))) (S.mkAdv S.that_Subj (mkS (mkCl S.it_NP (mkAP (mkAP L.okay_A) (mkS (mkCl S.it_NP)))))))))) fullStopPunct)
TXT: [unknown qualified constant L.one_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.senator_N L.of_Prep)) (passiveVP L.make_V2)))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.senator_N L.of_Prep)) (passiveVP L.make_V2)))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.thing_N L.of_Prep)) (mkVP (passiveVP L.make_V2) (S.mkAdv L.DIR_Prep (mkNP S.a_Quant (mkCN (mkCN (mkCN L.duty_N) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.zone_N)))) (mkRS (mkRCl S.which_RP (passiveVP L.activity_V2)))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.thing_N L.of_Prep)) (mkVP (passiveVP L.make_V2) (S.mkAdv L.DIR_Prep (mkNP S.a_Quant (mkCN (mkCN (mkCN L.duty_N) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.zone_N)))) (mkRS (mkRCl S.which_RP (passiveVP L.activity_V2)))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.recommend_V2) (S.mkAdv L.GOL_Prep S.you_NP)) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.shame_V)))))))) fullStopPunct)
TXT: [unknown qualified constant L.shame_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP L.explain_V2 (mkNP S.a_Quant (mkCN L.thing_N))) (S.mkAdv L.GOL_Prep S.i_NP))))) exclMarkPunct)
TXT: [it explains a thing to me !]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.contrast_VV (mkVP (mkVP (okay-01 S.you_NP)) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN L.private_A (mkCN L.company_N))))))))) fullStopPunct)
TXT: [unknown qualified constant L.contrast_VV]

SNT: 
AST: (mkText (mkUtt (mkNP L.more_Det (mkNum (mkDigits "1")) (mkCN L.thing_N))))
TXT: [no overload instance of mkNP]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.somePl_Det (mkCN L.serious_A (mkCN L.nut_N))) (have-org-role-91 (P.mkN2 L.congressman_N L.of_Prep)) (passiveVP L.bust_V2)))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (mkNP S.somePl_Det (mkCN L.serious_A (mkCN L.nut_N))) (have-org-role-91 (P.mkN2 L.congressman_N L.of_Prep)) (passiveVP L.bust_V2)))) fullStopPunct)]

SNT: 
AST: (a and)
TXT: [constant not found: a]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.contrast_V2) (E.PurposeVP (mkVP (mkVP (mkVP (mkVP (L.work_V2 (mkNP S.this_Det (mkCN L.guy_N))) (mkNP (P.mkPN "Tricare"))) (E.PurposeVP (mkVP L.get_VS (mkS (mkCl (mkNP S.that_Det (E.CompoundCN L.cognition_N L.therapy_N)) (passiveVP L.turn_on_V2)))))) (S.mkAdv L.PRD_Prep (mkNP S.a_Quant (mkCN L.over_N)))) (P.mkAdv "really")))) (S.mkAdv S.that_Subj (mkS negativePol (mkCl S.i_NP (mkVP L.like_V2 (mkNP S.a_Quant (mkCN (E.CompoundCN L.any_N L.idea_N) (S.mkAdv L.about_Prep (mkNP (mkCN L.politics_N))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.get_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP L.get_VS (mkS (mkCl (mkVP (mkVP L.call_V) (E.PurposeVP (mkVP L.offer_VS (mkS (mkCl (mkVP L.apologize_V)))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.get_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (passiveVP L.sweet_V2)))) exclMarkPunct)
TXT: [unknown qualified constant L.sweet_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.congressman_N L.of_Prep)) (mkVP (passiveVP L.obligate_V2) (E.PurposeVP (mkVP L.respond_V2 (mkNP S.a_Quant (mkCN (mkCN L.flare_N) (mkRS (mkRCl S.which_RP send-03)))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (have-org-role-91 (P.mkN2 L.congressman_N L.of_Prep)) (mkVP (passiveVP L.obligate_V2) (E.PurposeVP (mkVP L.respond_V2 (mkNP S.a_Quant (mkCN (mkCN L.flare_N) (mkRS (mkRCl S.which_RP send-03)))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.they_NP (mkVP L.have_VS (mkS (mkCl (mkS (mkCl (mkNP S.a_Quant (mkCN L.affair_N)))) (mkNP S.a_Quant (mkCN L.staff_N)))))))) fullStopPunct)
TXT: [unknown qualified constant L.have_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (P.mkAdV "just") (mkVP L.have_purpose_V))))) fullStopPunct)
TXT: [unknown qualified constant L.have_purpose_V]

SNT: 
AST: (mkText (mkUtt (mkS (S.mkAdv S.because_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.military_N)) (mkVP (passiveVP L.base_V2) (S.mkAdv L.DIR_Prep (mkNP (P.mkPN "socialism"))))))) S.that_NP)) fullStopPunct)
TXT: [no overload instance of mkS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.he_NP (mkAP L.all_AdA (mkAP L.alone_A))))) fullStopPunct)
TXT: [unknown qualified constant L.all_AdA]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN (mkCN L.exact_A L.thing_N) (mkRS (mkRCl S.which_RP S.they_NP L.want_V2))))))
TXT: [an exact thing that they want .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP L.begin_VS (mkS (mkCl (mkVP L.think_VS (mkS (mkCl (mkNP (P.mkPN "Warrior")) (mkNP S.a_Quant (mkCN (mkCN L.thing_N) (mkRS (mkRCl S.which_RP say-01))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.begin_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.cause_V)))) fullStopPunct)
TXT: [unknown qualified constant L.cause_V]

SNT: 
AST: (e et-cetera)
TXT: [command not parsed: cc -one (e et-cetera)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.contrast_V)))) fullStopPunct)
TXT: [it contrasts .]

SNT: 
AST: (mkText (mkUtt (mkS S.or_Conj (mkListS (mkS (mkCl (mkVP (passiveVP L.infer_V2) (S.mkAdv S.that_Subj (mkS negativePol (mkCl S.it_NP (passiveVP L.exist_V2))))))) (mkS (mkCl S.he_NP (mkNP S.a_Quant (mkCN (mkCN L.thing_N) (mkRS (mkRCl S.which_RP say-01))))))))) fullStopPunct)
TXT: [unknown qualified constant L.exist_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP L.think_V)))) fullStopPunct)
TXT: [I think .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkVP L.speak_V2 (mkNP S.a_Quant (mkCN L.fucking_A L.mailer_N)))))) fullStopPunct)
TXT: [you speak a fucking mailer .]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl S.i_NP (mkVP L.give_VV (mkVP (think-01 S.you_NP)) (mkNP S.a_Quant (mkCN L.fuck_N)))))) fullStopPunct)
TXT: [unknown qualified constant L.give_VV]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkAP (mkAP L.obvious_A) (mkS (mkCl S.you_NP)))))) fullStopPunct)
TXT: [it is obvious that there is you .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.contrast_V2) (E.PurposeVP (mkVP L.meet_V2 (mkNP S.aPl_Det (mkCN (mkCN (mkCN L.other_A L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.retire_V)))) (mkRS (mkRCl S.which_RP (mkVP L.feel_V2 (mkNP S.a_Quant (mkCN L.same_A (mkCN L.way_N))))))))))) (S.mkAdv S.that_Subj (mkS (mkCl S.i_NP (mkVP L.think_VS (mkS (mkCl (mkAP L.just_A))))))))))) fullStopPunct)
TXT: [no overload instance of mkCl]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.break_V2) (S.mkAdv S.that_Subj (mkS (mkCl S.we_NP (passiveVP L.promise_V2)))))))) fullStopPunct)
TXT: [it is broken that we are promised .]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl S.it_NP (mkAP (mkAP L.free_A) (mkS (mkCl (mkNP S.a_Quant (mkCN L.free_A (mkCN L.medical_N))))))))) exclMarkPunct)
TXT: [it isn't free that there is a free medical !]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkVP (mkVP L.enroll_V) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "Tricare"))))))) fullStopPunct)
TXT: [you enroll to Tricare .]

SNT: 
AST: (a and)
TXT: [constant not found: a]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.contrast_V2) (S.mkAdv S.that_Subj (mkS (mkCl S.it_NP (mkAP L.more_AdA (mkAP (mkAP L.cheap_A) (mkS (mkCl S.it_NP))))))))))) fullStopPunct)
TXT: [it is contrasted that it is more cheap that there is it .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.they_NP (mkVP (P.mkAdV "also") (mkVP L.do_away_V2 (mkNP S.a_Quant (mkCN L.military_A L.pension_N))))))) fullStopPunct)
TXT: [unknown qualified constant L.do_away_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.sound_V2) (S.mkAdv L.PRD_Prep (mkNP S.a_Quant (mkCN L.logical_N)))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.reason_V)))))))) fullStopPunct)
TXT: [unknown qualified constant L.logical_N]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl (mkNP S.a_Quant (mkCN (mkCN (mkCN L.guy_N) (mkRS (mkRCl S.which_RP (passiveVP L.send_V2)))) (mkRS (mkRCl S.which_RP (mkVP L.serve_V2 (mkNP S.a_Quant (mkCN (mkCN L.duty_N) (mkRS (mkRCl S.which_RP (passiveVP L.activity_V2)))))))))) (mkVP L.get_VS (mkS (mkCl (mkVP (passiveVP L.plan_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.retire_V))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.activity_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN (mkCN L.guy_N) (mkRS negativePol (mkRCl S.which_RP (mkVP L.go_VS (mkS (mkCl (mkVP (P.mkAdV "ever") (mkVP L.combat_V)))))))) (mkRS (mkRCl S.which_RP (mkVP L.serve_V))))) (mkVP L.get_V2 (mkNP S.a_Quant (mkCN L.paycheck_N)))))) fullStopPunct)
TXT: [unknown qualified constant L.go_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkS (mkCl (mkNP S.a_Quant (E.CompoundCN L.law_N L.plan_N)) (passiveVP L.create_V2))) (mkNP S.a_Quant (mkCN L.idea_N))))) fullStopPunct)
TXT: [no overload instance of mkCl]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkVP (mkVP L.have_V2 (mkNP S.a_Quant (E.CompoundCN L.nest_N L.little_A L.egg_N))) (S.mkAdv S.when_Subj (mkS (mkCl (passiveVP L.get_V2)))))))) fullStopPunct)
TXT: [missing record fields: s, g type of little_A]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.contrast_VV (mkVP (L.think_V2 S.you_NP) S.that_NP))))) exclMarkPunct)
TXT: [unknown qualified constant L.contrast_VV]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl S.you_NP (mkVP L.join_VS (mkS (mkCl (mkVP L.serve_V)))))) (mkS (mkCl (mkVP (mkVP L.get_VS (mkS (mkCl (mkVP (P.mkAdV "health") (mkVP L.benefit_V))))) (S.mkAdv (P.mkPrep "after") (mkNP S.a_Quant (mkNum (mkDigits "20")) (mkCN L.year_N))))))))) fullStopPunct)
TXT: [unknown qualified constant L.join_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.except_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (mkVP L.shoot_V) (S.mkAdv L.GOL_Prep S.you_NP))))))))) fullStopPunct)
TXT: [it is excepted that it shoots to you .]

SNT: 
AST: (a and)
TXT: [constant not found: a]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl S.you_NP (mkVP L.join_VS (mkS (mkCl (mkVP L.serve_V)))))) (mkS (mkCl (mkVP L.get_V2 (mkNP S.a_Quant (mkCN L.thing_N)))))))) fullStopPunct)
TXT: [unknown qualified constant L.join_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP (mkVP L.shoot_V) (S.mkAdv L.GOL_Prep S.you_NP)))) (mkS (mkCl (mkNP S.a_Quant (mkCN L.less_N)) (passiveVP L.pay_V2))))) (passiveVP L.except_V2)))) fullStopPunct)
TXT: [unknown qualified constant L.less_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP (mkVP L.join_V2 (mkNP S.a_Quant (mkCN L.military_N))) (S.mkAdv S.because_Subj (a amr-unknown)))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP (mkVP L.join_V2 (mkNP S.a_Quant (mkCN L.military_N))) (S.mkAdv S.because_Subj (a amr-unknown)))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN L.oh_N))))
TXT: [unknown qualified constant L.oh_N]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN L.yeah_N))))
TXT: [unknown qualified constant L.yeah_N]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN L.patriotism_N))))
TXT: [a patriotism .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkAP L.sure_A)))) fullStopPunct)
TXT: [it is sure .]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl S.you_NP (mkVP (P.mkAdV "ever") (mkVP L.hear_V2 (mkNP S.or_Conj (mkListNP (mkNP (P.mkPN "Tricare Standard")) (mkNP (P.mkPN "Thrift Savings Plan")))))))))) questMarkPunct)
TXT: [do you ever hear Tricare Standard or Thrift Savings Plan ?]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.both_N)) (mkNP S.a_Quant (mkCN L.around_N))))) fullStopPunct)
TXT: [unknown qualified constant L.both_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.have_concession_V2) (S.mkAdv (mkNP S.and_Conj (mkListNP (mkNP (mkCN L.money_N)) (mkNP S.a_Quant (mkCN L.technology_N)))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (E.CompoundCN L.career_N L.personnel_N)) (mkVP (mkVP L.separate_V2 (mkNP S.a_Quant (mkCN (E.CompoundCN L.branch_N L.military_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "US")))))) (S.mkAdv L.DIR_Prep (mkNP S.a_Quant (E.CompoundCN L.rest_N L.military_N))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.have_concession_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (E.CompoundCN L.only_N L.backbone_N)) (passiveVP L.contrast_V2)))) fullStopPunct)
TXT: [unknown qualified constant L.only_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.personnel_N) (mkRS (mkRCl S.which_RP (mkVP L.decide_VS (mkS (mkCl (mkVP (passiveVP L.stay_V2) (S.mkAdv L.PRD_Prep (mkNP S.a_Quant (mkCN L.career_N))))))))))) (mkAP L.quality_A))) (mkS (mkCl (mkNP S.a_Quant (mkCN L.nation_N)) (mkNP S.a_Quant (mkCN L.security_N)))))) (mkVP (passiveVP L.affect_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (passiveVP L.erode_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.benefit_V)))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.stay_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.nut_N) (S.mkAdv L.part_Prep (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.decide_VS (mkS (mkCl (passiveVP L.stay_V2))))))))))) (mkVP (passiveVP L.kick_V2) (E.PurposeVP (mkVP increase-01)))))) fullStopPunct)
TXT: [unknown qualified constant L.stay_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.compare_VV (mkVP L.toil_V2 (mkNP S.a_Quant (mkCN (mkCN L.life_N) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN (mkCN L.union_A L.shop_N) (S.mkAdv L.from_Prep (mkNP (P.mkPN "America"))))))))) (mkNP S.a_Quant (mkCN L.military_A L.career_N))))))) (mkVP (P.mkAdV "only") (mkVP L.fool_V))))) fullStopPunct)
TXT: [unknown qualified constant L.compare_VV]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl (mkVP L.compare_V)))) fullStopPunct)
TXT: [it doesn't compare .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (E.CompoundCN L.law_N (L.mandate_N (S.mkOrd (mkDigits "1"))))) (mkNP S.a_Quant (E.CompoundCN L.nation_N L.security_N))))) fullStopPunct)
TXT: [A function type is expected for mandate_N instead of type N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.obligate_VV (mkVP accomplish-01))))) fullStopPunct)
TXT: [constant not found: accomplish]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (P.mkAdV "precise") (passiveVP L.cause_V2)) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.this_Det (mkCN L.regime_N)) (mkVP L.need_VS (mkS (mkCl (mkVP (mkVP (passiveVP L.vote_V2) (monthAdv november_Month)) (S.mkAdv S.that_Subj (mkS (mkCl S.it_NP (mkAP L.out_A))))))))))))))) fullStopPunct)
TXT: [{s = "it"]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.we_NP (mkVP L.see_V2 (mkNP S.a_Quant (mkCN L.same_A (mkCN L.bullshit_N))))))) fullStopPunct)
TXT: [we see a same bullshit .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkS (mkCl (mkVP (mkVP L.shit_V) (S.mkAdv L.in_Prep (mkNP S.and_Conj (mkListNP S.we_NP (mkNP S.a_Quant (mkCN L.person_N)))))))) (mkAP (L.all_A (mkRS (mkRCl S.which_RP (mkNP (P.mkPN "Democrats")) L.do_V2))))))) fullStopPunct)
TXT: [A function type is expected for all_A instead of type A]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkVP (mkVP (passiveVP L.see_V2) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.commissary_N)))) (weekdayPunctualAdv sunday_Weekday))))) fullStopPunct)
TXT: [you are seen in a commissary on Sunday .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkS (mkCl S.they_NP (mkVP L.finish_VS (mkS (mkCl (mkVP L.expand_V)))))) (mkAP L.yep_AdA (mkAP (mkAP L.glad_A) (mkS (mkCl S.i_NP))))))) fullStopPunct)
TXT: [unknown qualified constant L.finish_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkAP (mkAP L.actual_A) (mkS (mkCl (mkVP (passiveVP L.seem_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (mkVP (P.mkAdV "now") (passiveVP L.go_V2)) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.shop_V))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.seem_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP L.like_V2 (mkNP S.a_Quant (mkCN (mkCN L.way_N) (mkRS (mkRCl S.which_RP (mkVP L.mean_V2 (mkNP S.a_Quant (mkCN (mkCN L.stuff_N) (mkRS (mkRCl S.which_RP (passiveVP L.freeze_V2)))))))))))))) fullStopPunct)
TXT: [I like a way that means a stuff that is frozen .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.remember_V2) (S.mkAdv S.that_Subj (mkS (mkCl S.you_NP (mkVP L.start_off_V2 (mkNP S.a_Quant (mkCN (mkCN L.stuff_N) (mkRS (mkRCl S.which_RP (passiveVP L.freeze_V2))))))))))))) fullStopPunct)
TXT: [it is remembered that you start off a stuff that is frozen .]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl S.i_NP (mkVP (mkVP L.like_VS (mkS (mkCl (mkVP L.arrange_V)))) (P.mkAdv "at all"))))) fullStopPunct)
TXT: [I don't like at all that it arranges .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkAP L.more_AdA (mkAP L.yep_AdA (mkAP (mkAP L.nice_A) (mkS (mkCl S.it_NP)))))))) fullStopPunct)
TXT: [unknown qualified constant L.yep_AdA]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (passiveVP L.thank_V2)))) fullStopPunct)
TXT: [you are thanked .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkAP (mkAP L.voluntary_A) (mkS (mkCl (mkNP S.a_Quant (mkCN L.military_N)))))))) fullStopPunct)
TXT: [it is voluntary that there is a military .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.nobody_NP (passiveVP L.force_V2)))) fullStopPunct)
TXT: [nobody is forced .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkVP (mkVP L.know_VS (mkS (mkCl (mkVP L.shoot_V)))) (S.mkAdv S.when_Subj (mkS (mkCl (mkVP L.join_V)))))))) fullStopPunct)
TXT: [you know when it joins that it shoots .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkAP L.same_A)))) fullStopPunct)
TXT: [it is same .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.fight_V2 (mkNP (mkCN L.fire_N))))))) (mkVP L.know_VS (mkS (mkCl (mkVP run-02 (S.mkAdv L.into_Prep (mkNP S.a_Quant (mkCN (mkCN L.building_N) (mkRS (mkRCl S.which_RP (passiveVP L.burn_V2))))))))))))) fullStopPunct)
TXT: [constant not found: run]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.contrast_V)))) fullStopPunct)
TXT: [it contrasts .]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl S.we_NP (mkVP (mkVP (P.mkAdV "then") (passiveVP L.suppose_V2)) (E.PurposeVP (mkVP keep-01))))))) questMarkPunct)
TXT: [constant not found: keep]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl (mkVP (mkVP L.pay_V) (S.mkAdv L.PPT_Prep (mkNP S.a_Quant (mkCN (mkCN L.everything_N) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.range_V2) (S.mkAdv L.GOL_Prep (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN L.car_N)) (mkNP S.a_Quant (mkCN L.mortgage_N)))))))))))))))) questMarkPunct)
TXT: [unknown qualified constant L.everything_N]

SNT: 
AST: (b be-located-at-91)
TXT: [command not parsed: cc -one (b be-located-at-91)]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl (mkS (mkCl (mkVP L.treat_V2 (mkNP S.or_Conj (mkListNP (mkNP S.a_Quant (mkCN L.military_N)) (mkNP S.a_Quant (mkCN L.soldier_N))))))) (mkNP S.a_Quant (mkCN (L.issue_N S.we_NP)))))) fullStopPunct)
TXT: [A function type is expected for issue_N instead of type N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.we_NP (mkVP L.want_VS (mkS S.and_Conj (mkListS (mkS (mkCl S.it_NP (mkAP (mkAP L.good_A) (mkS (mkCl (mkNP S.and_Conj (mkListNP (mkNP (mkCN L.equipment_N)) (mkNP S.a_Quant (mkCN L.gear_N))))))))) (mkS (mkCl (mkVP L.pay_V))))))))) fullStopPunct)
TXT: [we want that it is good that there are equipment and a gear and it pays .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.contrast_VV (mkVP (see-01 S.i_NP)))))) fullStopPunct)
TXT: [unknown qualified constant L.contrast_VV]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS negativePol (mkCl S.you_NP (mkVP L.join_up_V))) (mkS negativePol (mkCl (mkNP S.a_Quant (mkCN L.kid_N)) (mkVP (passiveVP L.worry_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP (mkCN L.medicine_N)) (passiveVP L.plan_V2)))))))))) fullStopPunct)
TXT: [you don't join up and a kid isn't worried that medicine is planned .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl S.you_NP (mkVP L.forget_V2 (mkNP S.a_Quant (mkCN L.patriotism_N))))))))) fullStopPunct)
TXT: [it is possible that you forget a patriotism .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkAP (mkAP L.sick_A) (mkS (mkCl (have-org-role-91 (P.mkN2 L.veteran_N L.of_Prep)) (mkVP L.whine_V))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl S.i_NP (mkAP (mkAP L.sick_A) (mkS (mkCl (have-org-role-91 (P.mkN2 L.veteran_N L.of_Prep)) (mkVP L.whine_V))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkVP L.get_V2 (mkNP S.a_Quant (mkCN (mkCN (mkCN L.job_N) (mkRS (mkRCl S.which_RP (mkVP L.furnish_VS (mkS (mkCl (mkVP L.benefit_V))))))) (mkRS (mkRCl S.which_RP (passiveVP L.freak_V2))))))))) exclMarkPunct)
TXT: [unknown qualified constant L.furnish_VS]

SNT: 
AST: (multi-sentence (mkText (mkUtt (mkS (mkCl (mkVP L.state_V)))) fullStopPunct) (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.recommend_V2) (S.mkAdv S.that_Subj (mkS (mkCl S.you_NP (mkVP L.shame_V)))))))) fullStopPunct))
TXT: [it states .] [unknown qualified constant L.shame_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP L.know_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.person_N)) (mkVP L.raise_V2 S.you_NP))))))) fullStopPunct)
TXT: [I know that a person raises you .]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN L.mortgage_N))))
TXT: [a mortgage .]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl (mkVP (mkVP L.pay_V) (S.mkAdv L.PPT_Prep (mkNP S.a_Quant (mkCN L.car_N)))))))) questMarkPunct)
TXT: [does it pay a car ?]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkVP L.go_on_V)))) exclMarkPunct)
TXT: [you go on !]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl (mkNP S.a_Quant (mkCN L.military_N)) (mkVP (mkVP L.pay_V) (S.mkAdv L.PPT_Prep S.that_NP))))) fullStopPunct)
TXT: [a military doesn't pay that .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkVP L.get_V)))) fullStopPunct)
TXT: [unknown qualified constant L.get_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkVP (P.mkAdV "all") (mkVP L.get_VS (mkS (mkCl (mkVP L.benefit_V)))))))) fullStopPunct)
TXT: [unknown qualified constant L.get_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.that_NP (mkNP S.a_Quant (mkCN (mkCN L.point_N) (S.mkAdv S.possess_Prep (mkNP S.this_Det (mkCN L.topic_N)))))))) fullStopPunct)
TXT: [that is a point of this topic .]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN L.real_A (mkCN (mkCN L.reason_N) (mkRS (mkRCl S.which_RP (mkVP L.cause_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.military_N)) (passiveVP L.join_V2)))))))))))
TXT: [a real reason that causes that a military is joined .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.this_NP (mkVP L.affect_VS (mkS (mkCl (mkNP S.we_Pron (mkCN L.military_N)) (passiveVP L.ready_V2))))))) fullStopPunct)
TXT: [unknown qualified constant L.affect_VS]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl S.i_NP (mkVP (mkVP L.tell_V2 (mkNP S.a_Quant (mkCN L.many_N))) (S.mkAdv L.GOL_Prep S.you_NP)))))))) fullStopPunct)
TXT: [unknown qualified constant L.many_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP (P.mkAdV "also") (mkVP L.fantasize_VS (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP L.hit_V2 (mkNP S.somePl_Det (mkCN (mkCN L.blacktop_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "States")))))))) (mkS (mkCl (mkVP (P.mkAdV "just") (mkVP L.do_VS (mkS (mkCl (passiveVP L.drive_V2)))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.fantasize_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (P.mkAdV "just") (mkVP L.move_V)) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.smooth_A (mkCN L.road_N)))))))) fullStopPunct)
TXT: [it just moves in a smooth road .]

SNT: 
AST: (o or)
TXT: [constant not found: o]

SNT: 
AST: (o or)
TXT: [constant not found: o]

SNT: 
AST: (S.mkAdv L.without_Prep (mkNP S.a_Quant (mkCN L.shoe_N)))
TXT: [without a shoe]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (mkCN L.clean_A (mkCN L.water_N))) (passiveVP L.have_V2)))) fullStopPunct)
TXT: [clean water is had .]

SNT: 
AST: (a and)
TXT: [constant not found: a]

SNT: 
AST: (mkText (mkUtt (mkNP (mkCN L.silence_N))))
TXT: [silence .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.much_Det (mkCN L.hot_A (mkCN L.water_N))) (passiveVP L.have_V2)))) fullStopPunct)
TXT: [much hot water is had .]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl (mkNP S.a_Quant (mkCN L.person_N)) (mkVP L.have_V2 (mkNP S.a_Quant (mkCN (mkCN L.clue_N) (S.mkAdv L.about_Prep (mkNP S.a_Quant (mkCN L.thing_N))))))))) fullStopPunct)
TXT: [a person doesn't have a clue about a thing .]

SNT: 
AST: (o or)
TXT: [constant not found: o]

SNT: 
AST: (o or)
TXT: [constant not found: o]

SNT: 
AST: (o or)
TXT: [constant not found: o]

SNT: 
AST: (a and)
TXT: [constant not found: a]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP (P.mkAdV "man") (mkVP (mkVP L.miss_VS (mkS S.and_Conj (mkListS (mkS (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl (mkVP L.have_V2 (mkNP (mkCN L.beer_N)))))))) (mkS (mkCl (mkNP S.a_Quant (mkCN (L.sex_N (mkNP S.a_Quant (mkCN L.woman_N)))))))))) (S.mkAdv S.when_Subj (mkS (mkCl (passiveVP L.deploy_V2))))))))) fullStopPunct)
TXT: [unknown qualified constant L.miss_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl S.you_NP (mkVP L.get_V2 (mkNP S.and_Conj (mkListNP (mkNP (mkCN L.alcoholic_A L.beer_N)) (mkNP S.a_Quant (mkCN (mkCN L.chick_N) (S.mkAdv L.of_Prep (mkNP S.a_Quant (mkCN (mkCN L.nation_N) (mkRS (mkRCl S.which_RP (mkVP L.host_V))))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.host_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP L.mean_VV (mkVP contrast-01))))) fullStopPunct)
TXT: [constant not found: contrast]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkS (mkCl (mkNP (P.mkPN "Obama")) (mkVP (passiveVP L.send_V2) (monthAdv november_Month)))) (mkNP S.a_Quant (E.CompoundCN L.only_N L.way_N))))) fullStopPunct)
TXT: [unknown qualified constant L.only_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.every_Det (mkCN L.group_N)) (mkVP L.plan_VS (mkS (mkCl (mkVP L.do_V2 S.this_NP))))))) fullStopPunct)
TXT: [every group plans that it does this .]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl S.it_NP (mkNP S.a_Quant (mkCN L.hot_A (mkCN L.major_A (mkCN L.topic_N)))))) (mkS negativePol (mkCl S.he_NP (mkVP L.fool_V)))))) exclMarkPunct)
TXT: [unknown qualified constant L.fool_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (P.mkAdV "hey") (passiveVP L.say_V2)) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN L.fuckstick_N))))))) fullStopPunct)
TXT: [unknown qualified constant L.fuckstick_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (E.CompoundCN L.organization_N L.person_N)) (mkVP L.control_V2 (mkNP (P.mkPN "House")))))) fullStopPunct)
TXT: [an organization person controls House .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.instead_of_V2) (E.PurposeVP (mkVP try-01)))))) fullStopPunct)
TXT: [unknown qualified constant L.instead_of_V2]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl (mkVP (passiveVP L.say_V2) (S.mkAdv L.GOL_Prep S.you_NP)))))) questMarkPunct)
TXT: [is it said to you ?]

SNT: 
AST: (multi-sentence (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP (passiveVP L.deploy_V2) (S.mkAdv L.LOC_Prep (mkNP S.and_Conj (mkListNP (mkNP (P.mkPN "Kuwait")) (mkNP (P.mkPN "Saudi Arabia"))))))))) fullStopPunct) (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.contrast_V2) (E.PurposeVP (mkVP allow-01))) (S.mkAdv S.that_Subj (mkS (mkCl S.they_NP (mkVP L.have_V2 (mkNP (mkCN L.alcoholic_A L.beer_N)))))))))) fullStopPunct))
TXT: [I am deployed Kuwait and Saudi Arabia .] [constant not found: allow]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl (mkVP (passiveVP L.allow_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN (mkCN L.military_A L.even_A L.couple_N) (mkRS (mkRCl S.which_RP (mkVP (P.mkAdV "together") (passiveVP L.deploy_V2))))) (mkRS (mkRCl S.which_RP (passiveVP L.marry_V2))))) (mkVP L.fuck_V)))))))) fullStopPunct)
TXT: [no overload instance of mkCN]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP L.remember_VS (mkS (mkCl (mkVP L.love_VS (mkS (mkCl (mkVP L.go_V)))))))))) fullStopPunct)
TXT: [unknown qualified constant L.love_VS]

SNT: 
AST: (multi-sentence (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.person_N)) (mkVP (mkVP L.explain_V) (S.mkAdv L.GOL_Prep S.i_NP))))) fullStopPunct))
TXT: [unknown qualified constant L.explain_V]

SNT: 
AST: (b (be-temporally-at-91 (mkNP S.and_Conj (mkListNP (mkNP (P.mkPN "WWII")) (mkNP S.a_Quant (mkCN (mkCN L.war_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Korea")))))))))
TXT: [command not parsed: cc -one (b (be-temporally-at-91 (mkNP S.and_Conj (mkListNP (mkNP (P.mkPN "WWII")) (mkNP S.a_Quant (mkCN (mkCN L.war_N) (S.mkAdv L.in_Prep (mkNP (P.mkPN "Korea")))))))))]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl S.i_NP (mkVP L.understand_V2 (mkNP S.a_Quant (mkCN (mkCN L.thing_N) (mkRS (mkRCl S.which_RP (mkVP L.cause_VS (mkS (mkCl (mkNP S.this_Det (mkCN L.man_N)) (mkAP (L.emotional_A (S.mkAdv S.because_Subj (mkNP S.a_Quant (mkCN L.flag_N)))))))))))))))) fullStopPunct)
TXT: [A function type is expected for emotional_A instead of type A]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.a_Quant (mkCN L.person_N)) (mkVP L.burn_V2 (mkNP S.a_Quant (mkCN L.flag_N))))) (mkS (mkCl (mkVP (mkVP L.call_V) (S.mkAdv L.PRD_Prep (mkNP S.a_Quant (mkCN L.just_A L.piece_N))))))))) fullStopPunct)
TXT: [a person burns a flag and it calls a just piece .]

SNT: 
AST: NULL
TXT: [constant not found: NULL]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkVP (P.mkAdV "just") (mkVP L.look_V2 (mkNP S.a_Quant (mkCN L.great_A L.way_N))))))) fullStopPunct)
TXT: [it just looks a great way .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.contrast_V2) (E.PurposeVP (mkVP end_up-03))) (S.mkAdv S.that_Subj (mkS negativePol (mkCl S.i_NP (mkVP (P.mkAdV "certain") (mkVP L.plan_VS (mkS (mkCl (mkVP L.serve_V)))))))))))) fullStopPunct)
TXT: [constant not found: end_up]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP (P.mkAdV "then") (mkVP L.go_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.parade_N))))))))) fullStopPunct)
TXT: [unknown qualified constant L.go_VS]

SNT: 
AST: (a and)
TXT: [constant not found: a]

SNT: 
AST: (a and)
TXT: [constant not found: a]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP (passiveVP L.catch_V2) (P.mkAdv "total"))))) exclMarkPunct)
TXT: [I am caught total !]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.benefit_V)))) fullStopPunct)
TXT: [it benefits .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.thing_N)) (mkVP L.keep_VS (mkS (mkCl (mkNP S.many_Det (mkCN (mkCN L.bum_N) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.street_N))))) (mkVP L.live_V))))))) fullStopPunct)
TXT: [unknown qualified constant L.keep_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.criminal_N)) (mkVP (P.mkAdV "then") (mkVP L.use_VV (mkVP L.restart_V2 (mkNP S.a_Quant (mkCN L.life_N))) S.they_NP))))) fullStopPunct)
TXT: [no overload instance of mkVP]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN (E.CompoundCN L.yeah_N L.front_N) (S.mkAdv L.part_Prep (mkNP S.a_Quant (mkCN L.line_N)))))))
TXT: [unknown qualified constant L.yeah_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.conservative_A L.person_N)) (mkVP (mkVP L.love_VS (mkS (mkCl (have-org-role-91 (P.mkN2 L.veteran_N L.of_Prep)) (mkVP L.benefit_V)))) (S.mkAdv S.because_Subj (mkS (mkCl (mkVP L.help_V2 (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP throw_out-06)))))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.conservative_A L.person_N)) (mkVP (mkVP L.love_VS (mkS (mkCl (have-org-role-91 (P.mkN2 L.veteran_N L.of_Prep)) (mkVP L.benefit_V)))) (S.mkAdv S.because_Subj (mkS (mkCl (mkVP L.help_V2 (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP throw_out-06)))))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.say_V2) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (E.CompoundCN L.shit_N L.stain_N)))) (S.mkAdv S.that_Subj (mkS negativePol (mkCl (mkS S.or_Conj (mkListS (mkS (mkCl (mkVP (mkVP L.pay_V) (S.mkAdv L.PPT_Prep (mkNP S.a_Quant (mkCN L.car_N)))))) (mkS (mkCl (mkVP (mkVP L.pay_V) (S.mkAdv L.PPT_Prep (mkNP S.a_Quant (mkCN L.mortgage_N)))))))) (passiveVP L.include_V2)))))))) fullStopPunct)
TXT: [it is said to a shit stain that it pays a car or it pays a mortgage isn't included .]

SNT: 
AST: (mkText (mkUtt (mkQS negativePol (mkQCl (mkCl S.you_NP (mkVP L.thank_V2 (mkNP (P.mkPN "Obama"))))))) questMarkPunct)
TXT: [don't you thank Obama ?]

SNT: 
AST: (o or)
TXT: [constant not found: o]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP L.read_V)))) fullStopPunct)
TXT: [I read .]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl S.he_NP (mkVP L.need_VS (mkS (mkCl S.you_NP (passiveVP L.thank_V2))))))) fullStopPunct)
TXT: [he doesn't need that you are thanked .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.he_NP (mkNP S.a_Quant (mkCN (mkCN (E.CompoundCN L.fuck_N L.idiot_N) (mkRS (mkRCl S.which_RP (passiveVP L.have_concession_V2)))) (mkRS (mkRCl S.which_RP (mkVP L.submit_V2 (mkNP S.a_Quant (mkCN (E.CompoundCN L.dumbass_N L.budget_N) (mkRS (mkRCl S.which_RP (mkVP L.propose_VS (mkS (mkCl S.i_NP (mkVP L.pay_V2 (mkNP L.more_Det (mkCN L.money_N)))))))))))))))))) exclMarkPunct)
TXT: [unknown qualified constant L.have_concession_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "Senate")) (mkVP (passiveVP L.laugh_V2) (S.mkAdv L.CAU_Prep (mkNP S.he_Pron (mkCN L.budget_N))))))) fullStopPunct)
TXT: [Senate is laughed for his budget .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP L.imagine_V2 (mkNP S.a_Quant (mkCN L.thing_N)))))) fullStopPunct)
TXT: [I imagine a thing .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.person_N)) (mkVP L.need_VS (mkS (mkCl (mkVP L.know_V2 (mkNP S.a_Quant (mkCN (mkCN L.thing_N) (mkRS (mkRCl S.which_RP (mkNP S.a_Quant (mkCN L.fool_N)) L.do_V2))))))))))) fullStopPunct)
TXT: [a person needs that it knows a thing that a fool does .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkVP L.keep_VS (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP L.write_V2 (mkNP S.that_Det (mkCN L.check_N))))) (mkS (mkCl (mkVP L.pay_V))))))))) exclMarkPunct)
TXT: [unknown qualified constant L.keep_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.say_V2) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (E.CompoundCN L.shit_N L.stain_N)))) (S.mkAdv S.that_Subj (mkS negativePol (mkCl (mkS S.or_Conj (mkListS (mkS (mkCl (mkVP (mkVP L.pay_V) (S.mkAdv L.PPT_Prep (mkNP S.a_Quant (mkCN L.car_N)))))) (mkS (mkCl (mkVP (mkVP L.pay_V) (S.mkAdv L.PPT_Prep (mkNP S.a_Quant (mkCN L.mortgage_N)))))))) (passiveVP L.include_V2)))))))) fullStopPunct)
TXT: [it is said to a shit stain that it pays a car or it pays a mortgage isn't included .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.conservative_A L.logic_N) (S.mkAdv S.possess_Prep (mkNP S.a_Quant (mkCN L.day_N))))) (mkVP (passiveVP L.use_V2) (E.PurposeVP (mkVP subsidize-01)))))) fullStopPunct)
TXT: [constant not found: subsidize]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkAP (mkAP (L.possible_A (S.mkAdv S.because_Subj (mkS (mkCl (mkVP L.free_up_V2 (mkNP (mkCN L.other_A L.money_N)))))))) (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.receive_V))))) (mkVP L.afford_VS (mkS (mkCl (mkVP (mkVP L.pay_V) (S.mkAdv L.PPT_Prep (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN L.mortgage_N)) (mkNP S.a_Quant (mkCN L.car_N))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.afford_VS]

SNT: 
AST: (multi-sentence (mkText (mkUtt (mkS (mkCl S.this_NP (mkNP S.a_Quant (mkCN (mkCN L.exact_A L.thing_N) (mkRS (mkRCl S.which_RP S.i_NP (L.talk_V2 (S.mkAdv S.when_Subj (mkS (mkCl (mkVP L.speak_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.military_N)) (mkVP (passiveVP L.disconnect_V2) (S.mkAdv L.PPT_Prep (mkNP S.a_Quant (mkCN L.civilian_A L.sector_N)))))))))))))))))) fullStopPunct) (mkText (mkUtt (mkS (mkCl S.it_NP (mkAP (mkAP L.obvious_A) (mkS (mkCl S.you_NP (mkVP L.serve_V))))))) fullStopPunct))
TXT: [unknown qualified constant L.speak_VS] [it is obvious that you serve .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.say_V2) (S.mkAdv L.GOL_Prep S.you_NP))))) exclMarkPunct)
TXT: [it is said to you !]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkAP (P.mkAdA "kind yy") (mkAP L.stupid_A))))) fullStopPunct)
TXT: [you are kind yy stupid .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "VA")) (mkVP L.benefit_V)))) fullStopPunct)
TXT: [VA benefits .]

SNT: 
AST: (multi-sentence (mkText (mkUtt (mkS (mkCl S.you_NP (mkVP L.know_VS (mkS (mkCl (mkVP L.fight_V))))))) fullStopPunct) (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.truck_N)) (mkVP (mkVP (P.mkAdV "boom") (passiveVP L.hit_V2)) (S.mkAdv L.MNR_Prep (mkNP S.a_Quant (mkCN (mkCN L.explosive_A L.device_N) (mkRS (mkRCl S.which_RP (passiveVP L.improvise_V2)))))))))) fullStopPunct) (mkText (mkUtt (mkS (mkCl 200 (mkVP (P.mkAdV "wow") (passiveVP L.rate_entity_V2))))) fullStopPunct) (mkText (mkUtt (mkS (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl S.i_NP (mkVP (mkVP L.have_V2 (mkNP S.a_Quant (mkCN L.decent_A L.check_N))) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.hand_N)))))))))) fullStopPunct))
TXT: [you know that it fights .] [{s = "a"] [unknown qualified constant L.rate_entity_V2] [it is possible that I have a decent check in a hand .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.say_V)))) fullStopPunct)
TXT: [it says .]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl S.it_NP (mkAP L.fortunate_A)))) fullStopPunct)
TXT: [it isn't fortunate .]

SNT: 
AST: (multi-sentence (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.say_V2) (S.mkAdv L.GOL_Prep (mkNP (P.mkPN "Dante")))) (S.mkAdv S.that_Subj (mkS (mkCl S.we_NP (mkVP (mkVP L.waste_V2 (mkNP S.we_Pron (mkCN L.time_N))) (S.mkAdv L.MNR_Prep (mkNP S.that_Det (mkCN L.asshat_N))))))))))) fullStopPunct) (mkText (mkUtt (mkS (mkCl S.she_NP (mkVP L.think_VS (mkS (mkCl S.it_NP (mkAP L.same_A))))))) fullStopPunct))
TXT: [unknown qualified constant L.asshat_N] [she thinks that it is same .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.bunch_N)) (mkVP (mkVP L.post_V) (S.mkAdv L.GOL_Prep (mkNP S.this_Det (mkCN L.thread_N))))))) fullStopPunct)
TXT: [a bunch posts to this thread .]

SNT: 
AST: (multi-sentence (mkText (mkUtt (mkS (mkCl S.it_NP (mkVP (P.mkAdV "just") (mkVP L.illustrate_V2 (mkNP S.i_Pron (mkCN (mkCN L.point_N) (S.mkAdv L.about_Prep (mkNP S.a_Quant (mkCN L.thing_N)))))))))) fullStopPunct) (mkText (mkUtt (mkS negativePol (mkCl S.we_NP (mkVP (P.mkAdV "yet") (mkVP L.see_V2 (mkNP S.a_Quant (mkCN L.anything_N))))))) exclMarkPunct))
TXT: [it just illustrates my point about a thing .] [unknown qualified constant L.anything_N]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP L.house_V))) (mkS (mkCl (mkVP L.pay_V))))) (passiveVP L.eliminate_V2))) (mkListS (mkS (mkCl (mkNP S.a_Quant (mkCN L.military_A L.plan_N)) (passiveVP L.scrap_V2))) (mkS (mkCl (mkNP L.all_Det (mkCN (mkCN L.soldier_N) (mkRS (mkRCl S.which_RP (mkVP L.activity_V2 (mkNP S.a_Quant (mkCN L.duty_N))))))) (mkVP (passiveVP L.obligate_V2) (E.PurposeVP (mkVP (mkVP fend-01) (E.PurposeVP (mkVP L.care_V2 (mkNP (mkCN L.health_N))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.house_V]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN L.yep_N))))
TXT: [unknown qualified constant L.yep_N]

SNT: 
AST: (a and)
TXT: [constant not found: a]

SNT: 
AST: (mkText (mkUtt (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN L.pathetic_N)) (mkNP S.a_Quant (mkCN L.patriotic_N))))))
TXT: [unknown qualified constant L.pathetic_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkVP L.misunderstand_V2 (mkNP S.i_Pron (mkCN L.point_N)))))) fullStopPunct)
TXT: [you misunderstand my point .]

SNT: 
AST: (a and)
TXT: [constant not found: a]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP L.think_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.union_N)) (mkAP (P.mkAdA "as much as") (mkAP L.important_A)))))))) fullStopPunct)
TXT: [I think that a union is as much as important .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.let_V2) (S.mkAdv S.that_Subj (mkS (mkCl S.i_NP (mkVP L.explain_V)))))))) fullStopPunct)
TXT: [unknown qualified constant L.let_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.great_A L.place_N)) (mkVP (passiveVP L.have_condition_V2) (S.mkAdv (mkNP S.a_Quant (mkCN L.union_N))))))) fullStopPunct)
TXT: [unknown qualified constant L.have_condition_V2]

SNT: 
AST: (a and)
TXT: [constant not found: a]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl S.you_NP (mkVP L.like_V2 (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN L.week_N)) (mkNP S.a_Quant (mkCN L.overtime_N))))))))) questMarkPunct)
TXT: [do you like a week and an overtime ?]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkVP L.thank_V2 (mkNP S.a_Quant (mkCN L.union_N)))))) exclMarkPunct)
TXT: [you thank a union !]

SNT: 
AST: (a (amr-unknown (S.mkAdv L.about_Prep (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN (mkCN L.day_N) (E.PurposeVP (mkVP L.vacation_V)))) (mkNP S.a_Quant (mkCN L.sick_A L.day_N)))))))
TXT: [command not parsed: cc -one (a (amr-unknown (S.mkAdv L.about_Prep (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN (mkCN L.day_N) (E.PurposeVP (mkVP L.vacation_V)))) (mkNP S.a_Quant (mkCN L.sick_A L.day_N)))))))]

SNT: 
AST: (a (amr-unknown (S.mkAdv L.about_Prep (mkNP (mkCN L.fair_A (mkCN L.safe_A (mkCN (mkCN L.law_N) (mkRS (mkRCl S.which_RP (mkVP (mkVP L.protect_V2 S.you_NP) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.workplace_N)))))))))))))
TXT: [command not parsed: cc -one (a (amr-unknown (S.mkAdv L.about_Prep (mkNP (mkCN L.fair_A (mkCN L.safe_A (mkCN (mkCN L.law_N) (mkRS (mkRCl S.which_RP (mkVP (mkVP L.protect_V2 S.you_NP) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.workplace_N)))))))))))))]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.a_Quant (mkCN L.union_N)) (mkVP (mkVP L.fight_V) (S.mkAdv L.CAU_Prep (mkNP L.all_Det (mkCN (mkCN L.thing_N) (S.mkAdv L.of_Prep S.this_NP))))))) (mkS (mkCl (passiveVP L.die_V2)))))) fullStopPunct)
TXT: [unknown qualified constant L.die_V2]

SNT: 
AST: (a and)
TXT: [constant not found: a]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl (mkVP L.mean_VV (mkVP (L.condemn_V2 S.you_NP) (mkNP S.a_Quant (mkCN L.whole_A L.group_N))))))) fullStopPunct)
TXT: [A function type is expected for condemn_V2 instead of type V2]

SNT: 
AST: (h (have-org-role-91 S.you_NP (mkNP (P.mkPN "GOP"))))
TXT: [command not parsed: cc -one (h (have-org-role-91 S.you_NP (mkNP (P.mkPN "GOP"))))]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkVP (P.mkAdV "then") (mkVP L.favor_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.union_N)) (passiveVP L.break_V2)))))))) fullStopPunct)
TXT: [unknown qualified constant L.favor_VS]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl (mkVP (passiveVP L.have_V2) (S.mkAdv S.that_Subj (mkS (mkCl S.they_NP (mkVP L.pay_V2 (mkNP S.a_Quant (mkCN L.more_N))))))))))) questMarkPunct)
TXT: [is it had that they pay a more ?]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (mkVP (P.mkAdV "away") (passiveVP L.take_V2)) (S.mkAdv L.DIR_Prep S.they_NP)) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.right_N))))))))) fullStopPunct)
TXT: [it is away taken to them that there is a right .]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl (mkVP (mkVP (passiveVP L.take_V2) (E.PurposeVP (mkVP (mkVP L.profitable_V) (P.mkAdv "more")))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (passiveVP L.cut_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.pay_V))))))))))))) questMarkPunct)
TXT: [unknown qualified constant L.profitable_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkS S.and_Conj (mkListS (mkS (mkCl S.they_NP (mkVP L.sacrifice_V))) (mkS negativePol (mkCl S.you_NP (mkVP L.sacrifice_V))))) (mkVP (passiveVP L.recommend_V2) (S.mkAdv S.because_Subj (a amr-unknown)))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (mkS S.and_Conj (mkListS (mkS (mkCl S.they_NP (mkVP L.sacrifice_V))) (mkS negativePol (mkCl S.you_NP (mkVP L.sacrifice_V))))) (mkVP (passiveVP L.recommend_V2) (S.mkAdv S.because_Subj (a amr-unknown)))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl (mkVP (mkVP (passiveVP L.contrast_V2) (S.mkAdv L.PPT_Prep S.you_NP)) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP (passiveVP L.recommend_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.police_V))))) (mkVP L.take_VS (mkS (mkCl (mkVP L.cut_V)))))))))))))))) questMarkPunct)
TXT: [unknown qualified constant L.police_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP L.agree_V)))) fullStopPunct)
TXT: [I agree .]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.a_Quant (mkCN L.much_N)) (have-org-role-91 (P.mkN2 L.senator_N L.of_Prep)) (passiveVP L.make_V2))) (mkS negativePol (mkCl S.they_NP (mkVP L.go_VS (mkS (mkCl (mkVP L.pay_V))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.a_Quant (mkCN L.much_N)) (have-org-role-91 (P.mkN2 L.senator_N L.of_Prep)) (passiveVP L.make_V2))) (mkS negativePol (mkCl S.they_NP (mkVP L.go_VS (mkS (mkCl (mkVP L.pay_V))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.they_NP (mkVP L.go_V2 (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.fight_V2 (mkNP (mkCN L.fire_N))))))) (mkListNP (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.teach_V))))) (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.police_V)))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.police_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkAP L.same_A)))) fullStopPunct)
TXT: [it is same .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.instead_of_V2) (E.PurposeVP (mkVP let-01))) (S.mkAdv S.that_Subj (mkS (mkCl S.they_NP (mkVP (mkVP L.ask_VS (mkS (mkCl (mkVP L.pay_V2 (mkNP S.a_Quant (mkCN L.more_N)))))) (S.mkAdv L.GOL_Prep (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.teach_V))))) (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.fight_V2 (mkNP (mkCN L.fire_N)))))))))))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.instead_of_V2) (E.PurposeVP (mkVP let-01))) (S.mkAdv S.that_Subj (mkS (mkCl S.they_NP (mkVP (mkVP L.ask_VS (mkS (mkCl (mkVP L.pay_V2 (mkNP S.a_Quant (mkCN L.more_N)))))) (S.mkAdv L.GOL_Prep (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.teach_V))))) (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.fight_V2 (mkNP (mkCN L.fire_N)))))))))))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkNP S.a_Quant (E.CompoundCN L.fuck_N L.patriotic_A L.person_N))))) exclMarkPunct)
TXT: [missing record fields: s, g type of patriotic_A]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl S.i_NP (mkVP L.care_VS (mkS S.or_Conj (mkListS (mkS (mkCl S.you_NP (mkVP L.serve_V))) (mkS negativePol (mkCl (mkVP L.serve_V))))))))) fullStopPunct)
TXT: [unknown qualified constant L.care_VS]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl S.you_NP (mkVP L.know_V2 (mkNP S.few_Det (mkCN L.bad_A (mkCN (mkCN L.apple_N) (mkRS (mkRCl S.which_RP S.i_NP L.mention_V2)))))))))) questMarkPunct)
TXT: [do you know few bad apples that I mention ?]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP (P.mkAdV "just") (mkVP L.consider_V2 S.you_NP))))) fullStopPunct)
TXT: [I just consider you .]

SNT: 
AST: (a and)
TXT: [constant not found: a]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.have_condition_V2) (E.PurposeVP (mkVP L.right_V2 S.you_NP))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.have_polarity_V)))))))) fullStopPunct)
TXT: [unknown qualified constant L.have_condition_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP (P.mkAdV "then") (mkVP L.say_VS (mkS (mkCl S.you_NP (mkVP (mkVP L.deserve_VS (mkS (mkCl (mkVP L.cut_V)))) (S.mkAdv S.because_Subj (mkS (mkCl (mkVP L.vote_V2 (mkNP S.a_Quant (mkCN L.wrong_A (mkCN L.party_N))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.deserve_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP L.serve_V) (S.mkAdv L.GOL_Prep S.you_NP))))) fullStopPunct)
TXT: [it serves to you .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "GOP")) (mkVP L.say_VS (mkS negativePol (mkCl S.you_NP (mkVP L.deserve_V2 (mkNP S.a_Quant (mkCN L.anything_N))))))))) fullStopPunct)
TXT: [unknown qualified constant L.anything_N]

SNT: 
AST: (a and)
TXT: [constant not found: a]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.force_V2 S.you_NP)))) fullStopPunct)
TXT: [it forces you .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.wage_N)) (mkVP (passiveVP L.pay_V2) (S.mkAdv L.GOL_Prep S.you_NP))))) fullStopPunct)
TXT: [a wage is paid to you .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.give_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN L.break_N))))))))) fullStopPunct)
TXT: [it is given that there is a break .]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl S.you_NP (mkVP L.know_VS (mkS (mkCl (mkVP see-01 (have-org-role-91 (P.mkN2 L.soldier_N L.of_Prep)))))))))) questMarkPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkQS (mkQCl (mkCl S.you_NP (mkVP L.know_VS (mkS (mkCl (mkVP see-01 (have-org-role-91 (P.mkN2 L.soldier_N L.of_Prep)))))))))) questMarkPunct)]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP L.pay_V2 (mkNP S.a_Quant (mkCN L.less_N))))) (mkListS (mkS (mkCl S.i_NP (mkVP (mkVP L.compare_VS (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP L.pay_V))) (mkS (mkCl (mkVP L.serve_V)))))) (S.mkAdv L.between_Prep (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP (L.respond_V (S.mkOrd (mkDigits "1")))))))) (mkNP S.a_Quant (mkCN L.military_N)))))))) (mkS (mkCl (mkVP L.do_V2 (mkNP S.a_Quant (mkCN L.both_N))))))))) fullStopPunct)
TXT: [unknown qualified constant L.less_N]

SNT: 
AST: (multi-sentence (mkText (mkUtt (mkS (mkCl S.it_NP (mkAP (mkAP L.right_A) (mkS (mkCl S.that_NP)))))) fullStopPunct) (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl S.i_NP (mkVP L.run_V))) (mkS (mkCl (mkVP (P.mkAdV "also") (mkVP L.run_V))))))) fullStopPunct) (mkText (mkUtt (mkQS (mkQCl (mkCl S.you_NP (mkVP L.care_VS (mkS (mkCl (mkVP L.know_V2 (mkNP S.a_Quant (mkCN (mkCN L.thing_N) (mkRS (mkRCl S.which_RP face-01)))))))))))) questMarkPunct))
TXT: [it is right that there is that .] [I run and it also runs .] [unknown qualified constant L.care_VS]

SNT: 
AST: (multi-sentence (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP L.experience_V2 (mkNP L.all_Det (mkCN (mkCN (mkCN (mkCN L.professional_A L.person_N) (mkRS (mkRCl S.which_RP (mkVP (mkVP L.work_V) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN (mkCN L.department_N) (mkRS (mkRCl S.which_RP (passiveVP L.unionize_V2)))))))))) (mkRS (mkRCl S.which_RP see-01))) (mkRS (mkRCl S.which_RP (mkVP (L.respond_V (S.mkOrd (mkDigits "1")))))))))))) fullStopPunct) (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP L.wonder_V)))) fullStopPunct))
TXT: [unknown qualified constant L.unionize_V2] [I wonder .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.word_N) (mkRS (mkRCl S.which_RP bold-00)))) (mkVP L.indicate_VS (mkS (mkCl S.this_NP (mkAP L.total_AdA (mkAP L.political_A)))))))) fullStopPunct)
TXT: [constant not found: bold]

SNT: 
AST: (multi-sentence (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl S.i_NP (mkVP smell-01 (have-org-role-91 (mkNP (P.mkPN "Democrat")) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.away_N)))))))))) (mkS (mkCl (mkVP (P.mkAdV "already") (mkVP L.figure_V2 S.you_NP))))))) fullStopPunct) (mkText (mkUtt (mkS (mkCl S.this_NP (mkVP (P.mkAdV "just") (mkVP L.confirm_V2 S.it_NP))))) fullStopPunct))
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl S.i_NP (mkVP smell-01 (have-org-role-91 (mkNP (P.mkPN "Democrat")) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.away_N)))))))))) (mkS (mkCl (mkVP (P.mkAdV "already") (mkVP L.figure_V2 S.you_NP))))))) fullStopPunct)] [this just confirms it .]

SNT: 
AST: (multi-sentence (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.a_Quant (mkCN L.lifer_N)) (passiveVP L.contrast_V2))) (mkS (mkCl (mkVP (mkVP (passiveVP L.say_V2) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN L.pal_N)))) (S.mkAdv S.that_Subj (mkS negativePol (mkCl (mkNP S.a_Quant (mkCN (mkCN L.most_N) (mkRS (mkRCl S.which_RP (passiveVP L.include_V2))))) (mkVP L.work_V2 (mkNP S.a_Quant (mkCN L.week_N)))))))))))) fullStopPunct) (mkText (mkUtt (mkS negativePol (mkCl (mkNP S.a_Quant (mkCN L.military_N)) (mkVP L.have_V2 (mkNP S.a_Quant (E.CompoundCN L.butt_N L.job_N)))))) fullStopPunct))
TXT: [unknown qualified constant L.most_N] [a military doesn't have a butt job .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkVP (P.mkAdV "just") (mkVP (mkVP L.dislike_V2 S.they_NP) (S.mkAdv S.because_Subj (mkS negativePol (mkCl (mkNP S.a_Quant (mkCN (mkCN L.majority_N) (mkRS (mkRCl S.which_RP (passiveVP L.include_V2))))) (mkVP L.share_VS (mkS (mkCl (mkVP L.view_V2 (mkNP (mkCN L.politics_N)))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.share_VS]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl S.you_NP (mkVP (mkVP L.know_V2 (mkNP S.a_Quant (mkCN (mkCN L.anything_N) (S.mkAdv L.about_Prep S.that_NP)))) (S.mkAdv S.because_Subj (mkS negativePol (mkCl (mkVP (P.mkAdV "ever") (mkVP L.serve_V))))))))) fullStopPunct)
TXT: [unknown qualified constant L.anything_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.little_A L.child_N)) (mkVP (P.mkAdV "now") (mkVP (mkVP L.end_V2 S.it_NP) (S.mkAdv S.because_Subj (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.man_N) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.here_N))))) (mkVP L.try_VS (mkS (mkCl (mkVP L.converse_V)))))))))))) exclMarkPunct)
TXT: [unknown qualified constant L.here_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN L.grunt_N)) (mkNP S.a_Quant (mkCN (mkCN L.rest_N) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.include_V2) (S.mkAdv (mkNP S.a_Quant (E.CompoundCN L.arms_N L.unit_N)))))))))) (mkVP (mkVP L.work_V) (S.mkAdv L.in_Prep (mkNP S.and_Conj (mkListNP (mkNP (P.mkPN "Iraq")) (mkNP (P.mkPN "Afghanistan"))))))))) fullStopPunct)
TXT: [unknown qualified constant L.arms_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (P.mkAdV "just") (mkVP L.resemble_V))))) fullStopPunct)
TXT: [unknown qualified constant L.resemble_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (mkVP (P.mkAdV "constant") (passiveVP L.train_V2)) (S.mkAdv L.PPT_Prep (mkNP S.that_Det (mkCN (mkCN L.person_N) (mkRS negativePol (mkRCl S.which_RP (mkVP (P.mkAdV "present") (mkVP L.combat_V)))))))) (S.mkAdv S.that_Subj (mkS (mkCl (passiveVP L.remain_V2)))))))) fullStopPunct)
TXT: [it is constant trained that person that doesn't present combat that it is remained .]

SNT: 
AST: (a and)
TXT: [constant not found: a]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP (P.mkPN "God")) (mkVP L.bless_V2 S.they_NP)))) exclMarkPunct)
TXT: [God blesses them !]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkAP L.yeah_AdA (mkAP L.right_A))))) fullStopPunct)
TXT: [unknown qualified constant L.yeah_AdA]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.every_Det (mkCN (mkCN L.bum_N) (mkRS (mkRCl S.which_RP know-02)))) (mkVP (mkVP L.tell_VS (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP L.have_VS (mkS (mkCl (mkVP (passiveVP L.upgrade_V2) (S.mkAdv S.that_Subj (mkS (mkCl (passiveVP L.discharge_V2)))))))))) (mkS (mkCl (mkVP L.get_VS (mkS (mkCl (mkNP (P.mkPN "VA")) (mkVP L.benefit_V))))))))) (S.mkAdv L.GOL_Prep S.i_NP))))) fullStopPunct)
TXT: [constant not found: know]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkNP S.somePl_Det (mkCN L.guy_N)) (passiveVP L.show_up_V2))) (mkS (mkCl (mkVP (mkVP L.try_VS (mkS (mkCl (mkVP L.sign_up_V2 (mkNP S.a_Quant (mkCN L.everyone_N)))))) (S.mkAdv S.when_Subj (mkS (mkCl S.i_NP (mkVP (mkVP (P.mkAdV "every") (mkVP L.volunteer_V)) (S.mkAdv L.in_Prep (mkNP S.or_Conj (mkListNP (mkNP S.somePl_Det (mkCN L.homeless_A L.shelter_N)) (mkNP S.a_Quant (E.CompoundCN L.food_N L.place_N))))))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.try_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.thing_N)) (mkVP (passiveVP L.tell_V2) (S.mkAdv L.GOL_Prep S.i_NP))))) fullStopPunct)
TXT: [a thing is told to me .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.wake_up_V2 (mkNP S.a_Quant (E.CompoundCN L.turd_N L.boy_N)))))) exclMarkPunct)
TXT: [it wakes up a turd boy !]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl S.i_NP (mkVP L.know_V2 (mkNP S.a_Quant (mkCN (mkCN L.person_N) (mkRS (mkRCl S.which_RP (mkVP L.run_V2 (mkNP (P.mkPN "VA")))))))))) (mkS (mkCl (mkVP (mkVP (passiveVP L.obligate_V2) (S.mkAdv S.because_Subj (mkS (mkCl S.it_NP (mkAP L.all_AdA (mkAP L.blind_A)))))) (E.PurposeVP (mkVP keep-02)))))))) fullStopPunct)
TXT: [unknown qualified constant L.all_AdA]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.say_V2) (S.mkAdv L.GOL_Prep (S.you_NP (mkRS (mkRCl S.which_RP (mkVP L.lick_V2 (mkNP S.a_Quant (mkCN L.boot_N)))))))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.use_VS (mkS (mkCl (mkNP (P.mkPN "VA")) (mkVP L.benefit_V))))))))))) exclMarkPunct)
TXT: [unknown qualified constant L.use_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkVP (passiveVP L.sound_V2) (E.PurposeVP (mkVP need-01)))))) fullStopPunct)
TXT: [constant not found: need]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.thing_N)) (mkVP (mkVP (P.mkAdV "also") (passiveVP L.show_V2)) (S.mkAdv S.that_Subj (mkS (mkCl S.you_NP (mkVP L.keep_VS (mkS (mkCl (mkNP S.a_Quant (mkCN L.mouth_N)) (passiveVP L.shut_V2))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.keep_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP L.hope_VS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.reputation_N) (mkRS (mkRCl S.which_RP (passiveVP L.negative_V2))))) (have-org-role-91 (P.mkN2 L.veteran_N L.of_Prep) (S.mkAdv L.in_Prep (mkNP S.this_Det (mkCN L.thread_N)))) (mkVP (passiveVP L.give_V2) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN (mkCN (mkCN L.pathetic_A L.ass_N) (S.mkAdv L.part_Prep S.you_NP)) (mkRS negativePol (mkRCl S.which_RP (mkVP L.serve_V))))))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP L.hope_VS (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.reputation_N) (mkRS (mkRCl S.which_RP (passiveVP L.negative_V2))))) (have-org-role-91 (P.mkN2 L.veteran_N L.of_Prep) (S.mkAdv L.in_Prep (mkNP S.this_Det (mkCN L.thread_N)))) (mkVP (passiveVP L.give_V2) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN (mkCN (mkCN L.pathetic_A L.ass_N) (S.mkAdv L.part_Prep S.you_NP)) (mkRS negativePol (mkRCl S.which_RP (mkVP L.serve_V))))))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkAP (mkAP L.sure_A) (mkS (mkCl S.i_NP (mkVP L.do_V))))))) fullStopPunct)
TXT: [unknown qualified constant L.do_V]

SNT: 
AST: (S.mkAdv L.before_Prep (mkNP S.a_Quant (mkCN L.incident_N)))
TXT: [before an incident]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl (mkNP S.a_Quant (mkCN L.day_N)) (have-org-role-91 (P.mkN2 L.veteran_N L.of_Prep)) (passiveVP L.see_V2)))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS negativePol (mkCl (mkNP S.a_Quant (mkCN L.day_N)) (have-org-role-91 (P.mkN2 L.veteran_N L.of_Prep)) (passiveVP L.see_V2)))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.military_N)) (have-org-role-91 (P.mkN2 L.veteran_N L.of_Prep)) (mkVP (passiveVP L.go_V2) (S.mkAdv L.DIR_Prep (mkNP S.a_Quant (mkCN L.into_N))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.military_N)) (have-org-role-91 (P.mkN2 L.veteran_N L.of_Prep)) (mkVP (passiveVP L.go_V2) (S.mkAdv L.DIR_Prep (mkNP S.a_Quant (mkCN L.into_N))))))) fullStopPunct)]

SNT: 
AST: (mkAP S.and_Conj (mkListAP (mkS (mkCl S.they_NP (mkAP L.criminal_A))) (mkS (mkCl (mkAP L.bum_A)))))
TXT: [no overload instance of mkCl]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP (mkVP L.pay_V) (S.mkAdv L.GOL_Prep S.they_NP)))) (mkS (mkCl (mkVP (mkVP (passiveVP L.become_V2) (S.mkAdv S.when_Subj (mkS (mkCl (mkVP L.leave_V2 (mkNP S.a_Quant (mkCN L.military_N))))))) (S.mkAdv L.PRD_Prep (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN L.criminal_N)) (mkNP S.a_Quant (mkCN L.bum_N))))))))))) fullStopPunct)
TXT: [it pays to them and it is become when it leaves a military a criminal and a bum .]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (have-org-role-91 (mkNP (P.mkPN "VA"))) (passiveVP L.show_up_V2))) (mkS (mkCl (mkVP (mkVP L.tell_V2 (mkNP S.a_Quant (mkCN L.thing_N))) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN L.person_N))))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl (have-org-role-91 (mkNP (P.mkPN "VA"))) (passiveVP L.show_up_V2))) (mkS (mkCl (mkVP (mkVP L.tell_V2 (mkNP S.a_Quant (mkCN L.thing_N))) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN L.person_N))))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkVP (P.mkAdV "just") (mkVP ask-01 (have-org-role-91 (P.mkN2 L.veteran_N L.of_Prep) (mkRS (mkRCl S.which_RP (mkVP L.honest_V))))))))) exclMarkPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (mkCl S.you_NP (mkVP (P.mkAdV "just") (mkVP ask-01 (have-org-role-91 (P.mkN2 L.veteran_N L.of_Prep) (mkRS (mkRCl S.which_RP (mkVP L.honest_V))))))))) exclMarkPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkAP (L.secret_A (mkRS (mkRCl S.which_RP (mkAP L.open_A)))))))) fullStopPunct)
TXT: [A function type is expected for secret_A instead of type A]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl (mkVP (mkVP (mkVP (passiveVP L.differ_V2) (E.PurposeVP (mkVP work-01))) (S.mkAdv L.VSP_Prep (mkNP S.a_Quant (mkCN L.person_N)))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.serve_V)))))))) fullStopPunct)
TXT: [unknown qualified constant L.differ_V2]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl S.you_NP (mkVP (P.mkAdV "ever") (mkVP L.go_V2 (mkNP S.a_Quant (mkCN L.post_N)))))))) questMarkPunct)
TXT: [do you ever go a post ?]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.contrast_V2) (E.PurposeVP (mkVP (deserve-01 S.she_NP)))) (S.mkAdv S.that_Subj (mkS (mkCl S.i_NP (mkVP L.do_V)))))))) fullStopPunct)
TXT: [constant not found: deserve]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkVP L.argue_V)))) exclMarkPunct)
TXT: [you argue !]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl S.you_NP (mkNP S.a_Quant (mkCN L.serious_A (mkCN L.piece_N))))) (mkS (mkCl (mkVP L.deserve_V2 (mkNP S.a_Quant (mkCN (mkCN L.brick_N) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.throw_V2) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN L.fucking_A L.head_N)))))))))))))) fullStopPunct)
TXT: [you are a serious piece and it deserves a brick that is thrown to a fucking head .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.and_N) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.instead_of_V2) (S.mkAdv (mkNP S.a_Quant (mkCN L.fact_N)))))))) (mkVP (passiveVP L.say_V2) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN L.bitch_N))))))) fullStopPunct)
TXT: [unknown qualified constant L.and_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP L.hurt_V) (S.mkAdv L.MNR_Prep (mkNP (mkCN L.truth_N))))))) fullStopPunct)
TXT: [it hurts truth .]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl S.i_NP (mkVP L.strike_VS (mkS (mkCl S.it_NP (mkAP L.close_A)))))))) questMarkPunct)
TXT: [unknown qualified constant L.strike_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkVP L.ask_V)))) exclMarkPunct)
TXT: [you ask !]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.open_A (mkCN L.secret_N))) (mkNP S.a_Quant (mkCN (mkCN (mkCN L.thing_N) (mkRS (mkRCl S.which_RP tell-01))) (mkRS (mkRCl S.which_RP (do-02 (mkVP get-01))))))))) fullStopPunct)
TXT: [constant not found: tell]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (P.mkAdV "yeah") (mkVP L.obligate_VV (mkVP L.relate_V2 (mkNP S.a_Quant (mkCN L.everything_N)))))))) exclMarkPunct)
TXT: [unknown qualified constant L.everything_N]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN L.bullshit_N))))
TXT: [a bullshit .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP L.know_V)))) fullStopPunct)
TXT: [I know .]

SNT: 
AST: (b (be-located-at-91 S.i_NP))
TXT: [command not parsed: cc -one (b (be-located-at-91 S.i_NP))]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl S.i_NP (mkVP L.do_V))))) questMarkPunct)
TXT: [unknown qualified constant L.do_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkS S.and_Conj (mkListS (mkS (mkCl (mkVP (mkVP L.go_V) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN L.one_N)))))) (mkS (mkCl (mkVP L.tell_V2 (mkNP S.a_Quant (mkCN (mkCN L.way_N) (mkRS (mkRCl S.which_RP feel-01))))))))) (mkVP (passiveVP L.recommend_V2) (S.mkAdv L.GOL_Prep S.you_NP))))) fullStopPunct)
TXT: [unknown qualified constant L.one_N]

SNT: 
AST: (h2 (have-org-role-91 (S.i_NP (mkRS (mkRCl S.which_RP (mkVP L.honest_V)))) (P.mkN2 L.veteran_N L.of_Prep)))
TXT: [command not parsed: cc -one (h2 (have-org-role-91 (S.i_NP (mkRS (mkRCl S.which_RP (mkVP L.honest_V)))) (P.mkN2 L.veteran_N L.of_Prep)))]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl S.i_NP (mkVP L.ask_V))) (mkS (mkCl (mkVP L.tell_VS (mkS (mkCl S.you_NP (mkVP (passiveVP L.fill_V2) (S.mkAdv L.PPT_Prep (mkNP S.a_Quant (mkCN L.shit_N)))))))))))) fullStopPunct)
TXT: [I ask and it tells that you are filled a shit .]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN L.heh_N))))
TXT: [unknown qualified constant L.heh_N]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl S.i_NP (mkVP L.think_VS (mkS (mkCl (mkVP L.retire_V))))))) fullStopPunct)
TXT: [I don't think that it retires .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP (P.mkAdV "near") (mkVP L.pop_V2 (mkNP S.a_Quant (mkCN L.bastard_N))))))) fullStopPunct)
TXT: [I near pop a bastard .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP L.remember_V2 (mkNP S.a_Quant (mkCN L.location_N)))))) fullStopPunct)
TXT: [I remember a location .]

SNT: 
AST: (b be-temporally-at-91)
TXT: [command not parsed: cc -one (b be-temporally-at-91)]

SNT: 
AST: (multi-sentence (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.contrast_V2) (S.mkAdv S.that_Subj (mkS (mkCl S.i_NP (mkVP L.know_V2 (mkNP S.a_Quant (mkCN (mkCN L.thing_N) (mkRS (mkRCl S.which_RP S.that_NP L.imply_V2)))))))))))) exclMarkPunct) (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl S.you_NP (mkVP (mkVP L.go_V) (S.mkAdv L.DIR_Prep (mkNP S.a_Quant (mkCN L.ahead_N)))))) (mkS (mkCl (mkVP (mkVP L.tell_V2 (mkNP S.a_Quant (mkCN (mkCN L.way_N) (mkRS (mkRCl S.which_RP feel-01))))) (S.mkAdv L.GOL_Prep S.we_NP))))))) exclMarkPunct) (mkText (mkUtt (mkS (mkCl S.i_NP (mkAP (mkAP L.sure_A) (mkS (mkCl S.it_NP (mkNP S.a_Quant (mkCN (mkCN L.anything_N) (mkRS negativePol (mkRCl S.which_RP S.we_NP L.hear_V2)))))))))) fullStopPunct))
TXT: [it is contrasted that I know a thing that that implies !] [unknown qualified constant L.ahead_N] [unknown qualified constant L.anything_N]

SNT: 
AST: (multi-sentence (mkText (mkUtt (mkS (mkCl S.that_NP (passiveVP L.do_V2)))) fullStopPunct))
TXT: [that is done .]

SNT: 
AST: (mkText (mkUtt (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (E.CompoundCN L.organization_N L.post_N)) (mkNP S.few_Det (mkCN L.other_N))))))
TXT: [an organization post and few others .]

SNT: 
AST: (mkText (mkUtt (mkS (S.mkAdv S.because_Subj) (mkS negativePol (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl (mkNP (mkCN L.truth_N)) (have-org-role-91 (P.mkN2 L.veteran_N L.of_Prep)) (passiveVP L.tell_V2)))))))) fullStopPunct)
TXT: [command not parsed: cc -one (mkText (mkUtt (mkS (S.mkAdv S.because_Subj) (mkS negativePol (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl (mkNP (mkCN L.truth_N)) (have-org-role-91 (P.mkN2 L.veteran_N L.of_Prep)) (passiveVP L.tell_V2)))))))) fullStopPunct)]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN L.everyone_N)) (mkVP L.know_V2 (mkNP S.a_Quant (mkCN (mkCN (L.and_N (mkRS (mkRCl S.which_RP (mkVP (mkVP L.bend_V2 (mkNP S.every_Det (mkCN L.rule_N))) (E.PurposeVP (mkVP L.sign_up_V2 (mkNP S.a_Quant (mkCN (mkCN L.everyone_N) (mkRS (mkRCl S.which_RP sign_up-03))))))))))) (mkRS (mkRCl S.which_RP (mkVP L.do_VV (mkVP change-01) (mkNP S.a_Quant (mkCN L.everything_N))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.everyone_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (passiveVP L.get_V2) (S.mkAdv S.that_Subj (mkS (mkCl (mkNP S.every_Det (mkCN L.little_A L.thing_N)) (mkVP (passiveVP L.parse_V2) (E.PurposeVP (mkVP relate-01)))))))))) fullStopPunct)
TXT: [constant not found: relate]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl (mkNP S.a_Quant (mkCN L.problem_N)) (passiveVP L.have_V2))))) questMarkPunct)
TXT: [is a problem had ?]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.relate_V)))) fullStopPunct)
TXT: [it relates .]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl (mkNP S.a_Quant (mkCN L.drug_N)) (mkNP S.a_Quant (mkCN L.problem_N)))))) questMarkPunct)
TXT: [is a drug a problem ?]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl (mkNP S.and_Conj (mkListNP (mkNP S.a_Quant (mkCN L.person_N)) (mkNP S.a_Quant (mkCN L.person_N)))) (passiveVP L.beat_V2))))) questMarkPunct)
TXT: [are a person and a person beaten ?]

SNT: 
AST: (mkText (mkUtt (mkQS negativePol (mkQCl (mkCl S.it_NP (mkAP (mkAP L.possible_A) (mkS (mkCl (mkNP S.a_Quant (mkCN L.job_N)) (passiveVP L.function_V2)))))))) questMarkPunct)
TXT: [unknown qualified constant L.function_V2]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP L.relate_V)))) fullStopPunct)
TXT: [it relates .]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN L.fuck_N))))
TXT: [a fuck .]

SNT: 
AST: (mkText (mkUtt (mkNP S.a_Quant (mkCN (mkCN L.and_N) (mkRS (mkRCl S.which_RP (mkVP (passiveVP L.instead_of_V2) (E.PurposeVP (mkVP (mkVP go-08) (S.mkAdv L.PRD_Prep (mkNP S.a_Quant (mkCN L.cuckoo_N))))))))))))
TXT: [unknown qualified constant L.and_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.we_NP (mkVP (mkVP L.lose_V2 (mkNP S.a_Quant (mkCN L.close_A (mkCN L.person_N)))) (S.mkAdv L.DIR_Prep (mkNP (P.mkPN "Vietnam War"))))))) fullStopPunct)
TXT: [we lose a close person to Vietnam War .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP (P.mkAdV "also") (mkVP L.know_V2 (mkNP S.a_Quant (mkCN (mkCN (mkCN L.criminal_N) (mkRS (mkRCl S.which_RP (mkVP (mkVP L.go_V) (E.PurposeVP (mkVP L.serve_V)))))) (mkRS (mkRCl S.which_RP (mkVP (mkVP L.scam_V2 (mkNP S.a_Quant (mkCN L.system_N))) (S.mkAdv S.when_Subj (mkS (mkCl S.it_NP (mkAP L.out_A)))))))))))))) fullStopPunct)
TXT: [I also know a criminal that goes to serve that scams a system when it is out .]

SNT: 
AST: (multi-sentence (mkText (mkUtt (mkS negativePol (mkCl S.it_NP (mkAP L.more_AdA (mkAP L.good_A))))) fullStopPunct))
TXT: [it isn't more good .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkVP (mkVP (passiveVP L.exist_V2) (S.mkAdv L.in_Prep (mkNP L.all_Det (mkCN L.federal_A L.program_N)))) (S.mkAdv S.that_Subj (mkS (mkCl (mkVP L.scam_V)))))))) exclMarkPunct)
TXT: [unknown qualified constant L.exist_V2]

SNT: 
AST: (mkText (mkUtt (mkS S.and_Conj (mkListS (mkS (mkCl S.we_NP (mkVP (mkVP L.go_V) (S.mkAdv L.GOL_Prep (mkNP S.a_Quant (mkCN L.society_N)))))) (mkS (mkCl (mkVP L.work_V)))))) fullStopPunct)
TXT: [we go to a society and it works .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkNP S.a_Quant (mkCN L.idiot_N))))) fullStopPunct)
TXT: [you are an idiot .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.most_N) (mkRS (mkRCl S.which_RP (passiveVP L.include_V2))))) (mkNP S.a_Quant (mkCN (mkCN L.lifer_N) (mkRS (mkRCl S.which_RP (mkVP L.cause_VS (mkS negativePol (mkCl (mkVP L.benefit_V))))))))))) fullStopPunct)
TXT: [unknown qualified constant L.most_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkVP (P.mkAdV "only") (mkVP L.know_V))))) fullStopPunct)
TXT: [you only know .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP S.a_Quant (mkCN (mkCN L.everything_N) (mkRS (mkRCl S.which_RP S.you_NP L.say_V2)))) (mkAP (L.logical_A (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN (mkCN L.delusional_A L.world_N) (mkRS (mkRCl S.which_RP inhabit-01)))))))))) fullStopPunct)
TXT: [unknown qualified constant L.everything_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkNP S.a_Quant (mkCN (mkCN (mkCN L.just_A L.gibberish_N) (S.mkAdv L.in_Prep (mkNP S.a_Quant (mkCN L.real_A (mkCN L.world_N))))) (S.mkAdv S.possess_Prep (mkNP S.a_Quant (mkCN L.idiot_N)))))))) fullStopPunct)
TXT: [it is a just gibberish in a real world of an idiot .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP (passiveVP L.excuse_V2) (P.mkAdv "fuck"))))) exclMarkPunct)
TXT: [I am excused fuck !]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl S.you_NP (mkVP (mkVP L.agree_V) (S.mkAdv L.COM_Prep (mkNP (P.mkPN "Dante")))))))) questMarkPunct)
TXT: [do you agree of Dante ?]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.i_NP (mkVP (mkVP L.direct_VS (mkS (mkCl (mkVP L.comment_V)))) (S.mkAdv L.DIR_Prep (mkNP (P.mkPN "Dante"))))))) fullStopPunct)
TXT: [unknown qualified constant L.direct_VS]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkAP L.sorry_A)))) fullStopPunct)
TXT: [it is sorry .]

SNT: 
AST: (h (mkCN S.i_NP (P.mkN2 L.grunt_N L.of_Prep) (mkNP S.and_Conj (mkListNP (mkNP (P.mkPN "Bn")) (mkNP (ss "north") (mkNP (P.mkPN "I Corps")))))))
TXT: [constant not found: h]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkAP (mkAP L.good_A) (mkS (mkCl S.it_NP)))))) fullStopPunct)
TXT: [it is good that there is it .]

SNT: 
AST: (mkText (mkUtt (mkS negativePol (mkCl S.i_NP (mkVP L.insinuate_V2 S.that_NP)))) fullStopPunct)
TXT: [I don't insinuate that .]

SNT: 
AST: (a and)
TXT: [constant not found: a]

SNT: 
AST: (a and)
TXT: [constant not found: a]

SNT: 
AST: (a and)
TXT: [constant not found: a]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkVP L.honest_V)))) exclMarkPunct)
TXT: [unknown qualified constant L.honest_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.it_NP (mkVP (mkVP L.concern_V2 (mkNP (mkCN L.money_N))) (P.mkAdv "all"))))) fullStopPunct)
TXT: [it concerns money all .]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkVP L.follow_V2 (mkNP (mkCN L.money_N)))))) exclMarkPunct)
TXT: [you follow money !]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (S.you_NP (mkRS (mkRCl S.which_RP (mkAP L.real_A)))) (mkNP S.a_Quant (mkCN (mkCN L.ignorant_A (mkCN L.dumb_A L.person_N)) (mkRS (mkRCl S.which_RP (mkVP L.suck_V2 (mkNP S.a_Quant (mkCN L.cock_N)))))))))) fullStopPunct)
TXT: [A function type is expected for you_NP instead of type NP]

SNT: 
AST: (mkText (mkUtt (mkQS (mkQCl (mkCl (mkVP L.instead_of_V))))) questMarkPunct)
TXT: [unknown qualified constant L.instead_of_V]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl (mkNP L.another_Det (mkCN L.one_N)) (mkVP (passiveVP L.chalk_up_V2) (E.PurposeVP (mkVP L.right_V2 (mkNP S.a_Quant (mkCN L.dumb_A L.person_N)))))))) fullStopPunct)
TXT: [unknown qualified constant L.one_N]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkNP S.a_Quant (mkCN (mkCN L.simple_A (mkCN L.just_A L.dumb_A L.person_N)) (mkRS (mkRCl S.which_RP (mkVP L.suck_V2 (mkNP S.a_Quant (mkCN L.cock_N)))))))))) fullStopPunct)
TXT: [no overload instance of mkCN]

SNT: 
AST: (mkText (mkUtt (mkS (mkCl S.you_NP (mkVP (mkVP L.deal_V) (S.mkAdv L.PRD_Prep S.it_NP))))) exclMarkPunct)
TXT: [you deal it !]

